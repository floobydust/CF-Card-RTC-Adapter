  Fri May 14 2021 10:56                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C02 Macro Assembler    **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;**************************************************************************************************
     2                        ;*   C02Monitor 3.04 - Release version for Pocket SBC  (c)2013-2021 by Kevin E. Maier 14/05/2021  *
     3                        ;*                                                                                                *
     4                        ;*  Monitor Functions are divided into groups as follows:                                         *
     5                        ;*   1. Memory Operations:                                                                        *
     6                        ;*      - Fill Memory: Source, Length, Value (prompts for commit)                                 *
     7                        ;*      - Move Memory: Source, Target, Length (prompts for commit)                                *
     8                        ;*      - Compare Memory: Source, Target, Length                                                  *
     9                        ;*      - Examine/Edit: Address, Data (edit) sequential memory                                    *
    10                        ;*      - Input ASCII Text into memory: Address, Data (ESC quits)                                 *
    11                        ;*      - Hex Data Search: Hex data up to 16 bytes                                                *
    12                        ;*      - Text String Search: ASCII data up to 16 characters                                      *
    13                        ;*      - Display Memory as Hex/ASCII: Address start - 256 consecutive bytes displayed            *
    14                        ;*      - Execute from Memory: Start address                                                      *
    15                        ;*                                                                                                *
    16                        ;*   2. Register Operations:                                                                      *
    17                        ;*      - Display All Registers                                                                   *
    18                        ;*      - Display/Edit A, X, Y, (S)tack Pointer, (P)rocessor Status                               *
    19                        ;*                                                                                                *
    20                        ;*   3. Timer/Counter Functions:                                                                  *
    21                        ;*      - Set delay time: 8-bit 10-millisecond count and 16-bit multiplier count                  *
    22                        ;*      - Execute Millisecond Delay 1-256 times 10ms (Jiffy Clock)                                *
    23                        ;*      - Execute Millisecond Delay times 16-bit multiplier count (0-65535)                       *
    24                        ;*      - Extended Delay: up to 256 times above count ($00 = 256)                                 *
    25                        ;*      - RTC function based on 10ms Jiffy Clock: Ticks, Seconds, Minutes, Hours, Days            *
    26                        ;*      - Benchmark timing up to 65535.99 seconds with 10ms resolution                            *
    27                        ;*                                                                                                *
    28                        ;*   4. Keyboard Macro Facility:                                                                  *
    29                        ;*      - Provides up to 127 byte keyboard buffer loop capability                                 *
    30                        ;*      - Optional 16-bit Loop Counter (1-65,535)                                                 *
    31                        ;*      - Send Break command (from Terminal program) exits Macro function                         *
    32                        ;*                                                                                                *
    33                        ;*   5. Control-Key Functions:                                                                    *
    34                        ;*      - CTRL-A: Starts Assembler for simple code entry based on Mnemonics (not completed yet)   *
    35                        ;*      - CTRL-B: Starts Rich Leary's DOS/65 ROM Version 3 (NEW)                                  *
    36                        ;*      - CTRL-D: Table-Driven Disassembler - Supports Full WDC Opcodes/Addressing modes          *
    37                        ;*      - CTRL-E: Edit single byte in the EEPROM - uses BurnByte routine to ensure proper write   *
    38                        ;*      - CTRL-L: Xmodem Loader w/CRC-16 Support, auto detect S19 Records from WDC Linker         *
    39                        ;*      - CTRL-P: Program EEPROM - Source, Target, Length (Source must be RAM based)              *
    40                        ;*      - CTRL-Q: Query Commands - Shows all available Monitor functions                          *
    41                        ;*      - CTRL-R: Reset System - Initiates Cold Start of BIOS and Monitor                         *
    42                        ;*      - CTRL-S: Xmodem Save w/CRC-16 Support                                                    *
    43                        ;*      - CTRL-T: Shows Elapsed time since System Cold Start                                      *
    44                        ;*      - CTRL-V: Shows Version for BIOS and Monitor                                              *
    45                        ;*      - CTRL-Z: Zeros out ALL RAM and initiates Cold Start of BIOS and Monitor                  *
    46                        ;*                                                                                                *
    47                        ;*   6. Panic Button (NMI Support Routine in C02BIOS)                                             *
    48                        ;*      - Saves Page Zero, CPU Stack, Console Buffer and Vector/Config Data pages                 *
    49                        ;*      - Re-initializes Vector and Configuration Data in Page $03                                *
    50                        ;*      - Clears Console Buffer pointers in Page $00 and restarts Console only                    *
    51                        ;*      - Toggles Test Flag in SCC2691 UART - might need to invoke twice (removed in 2.02)        *
    52                        ;**************************************************************************************************
    53                                PL      66      ;Page Length
    54                                PW      132     ;Page Width (# of char/line)
    55                                CHIP    W65C02S ;Enable WDC 65C02 instructions
    56                                PASS1   OFF     ;Set ON for debugging
    57                                INCLIST ON      ;Set ON for listing Include files
  Fri May 14 2021 10:56                                                                                                    Page 2


    58                        ;**************************************************************************************************
    59                        ; Page Zero definitions $00 to $9F reserved for user routines
    60                        ; NOTES:- Locations $00 and $01 are used to zero RAM (calls CPU reset)
    61                        ;       - EEPROM Byte Write routine loaded into Page Zero at $88-$9C
    62                        ;       - Enhanced Basic uses locations $00 - $85
    63                        ;**************************************************************************************************
    64                        ;
    65                        ; This BIOS and Monitor version also use a common source file for constants and variables used by
    66                        ; both. This just simplifies keeping both code pieces in sync.
    67                        ;
    68                                INCLUDE         C02Constants3.asm
     1                        ;**************************************************************************************************
     2                        ;*                                                                                                *
     3                        ;*              C02 Constants used for the 3.xx releases of C02BIOS3 and C02Monitor3              *
     4                        ;*                                                                                                *
     5                        ;*                                                                                                *
     6                        ;*                                  03/02/2021 (Day/Month/Year)                                   *
     7                        ;*                                                                                                *
     8                        ;**************************************************************************************************
     9                        ; C02BIOS Version 3.03                                                                            *
    10                        ; - All Constants and Variables are now defined in a single source file (this one) for assembling *
    11                        ; - both the C02BIOS3 and the C02Monitor3. It is also used for the Template for writing code to   *
    12                        ; - be used for the C02 Pocket SBC and Adapters.                                                  *
    13                        ;                                                                                                 *
    14                        ; - Be sure to include this file at the start of any source file that needs it.                   *
    15                        ;                                                                                                 *
    16                        ;**************************************************************************************************
    17                        ;
    18                        ;       - Page Zero definitions ($00 to $9F reserved for user routines)
    19             000000A0   PGZERO_ST       .EQU    $A0                     ;Start of Page Zero usage for C02 Monitor
    20                        ;
    21             000000A0   BUFF_PG0        .EQU    PGZERO_ST+00            ;Default Page zero location for Monitor buffers
    22                        ;
    23             000000A0   INBUFF          .EQU    BUFF_PG0+00             ;Input Buffer - 4 bytes ($A0-$A3)
    24             000000A4   DATABUFF        .EQU    BUFF_PG0+04             ;Data Buffer - 6 bytes ($A4-$A9)
    25                        ;
    26                        ;       - 16-bit variables:
    27             000000AA   HEXDATAH        .EQU    PGZERO_ST+10            ;Hexadecimal input
    28             000000AB   HEXDATAL        .EQU    PGZERO_ST+11
    29             000000AC   BINVALL         .EQU    PGZERO_ST+12            ;Binary Value for HEX2ASC
    30             000000AD   BINVALH         .EQU    PGZERO_ST+13
    31             000000AE   COMLO           .EQU    PGZERO_ST+14            ;User command address
    32             000000AF   COMHI           .EQU    PGZERO_ST+15
    33             000000B0   INDEXL          .EQU    PGZERO_ST+16            ;Index for address - multiple routines
    34             000000B1   INDEXH          .EQU    PGZERO_ST+17
    35             000000B2   TEMP1L          .EQU    PGZERO_ST+18            ;Index for word temp value used by Memdump
    36             000000B3   TEMP1H          .EQU    PGZERO_ST+19
    37             000000B4   TEMP2L          .EQU    PGZERO_ST+20            ;Index for Text entry
    38             000000B5   TEMP2H          .EQU    PGZERO_ST+21
    39             000000B6   PROMPTL         .EQU    PGZERO_ST+22            ;Prompt string address
    40             000000B7   PROMPTH         .EQU    PGZERO_ST+23
    41             000000B8   SRCL            .EQU    PGZERO_ST+24            ;Source address for memory operations
    42             000000B9   SRCH            .EQU    PGZERO_ST+25
    43             000000BA   TGTL            .EQU    PGZERO_ST+26            ;Target address for memory operations
    44             000000BB   TGTH            .EQU    PGZERO_ST+27
    45             000000BC   LENL            .EQU    PGZERO_ST+28            ;Length address for memory operations
    46             000000BD   LENH            .EQU    PGZERO_ST+29
    47                        ;
    48                        ;       - 8-bit variables and constants:
    49             000000BE   BUFIDX          .EQU    PGZERO_ST+30            ;Buffer index
    50             000000BF   BUFLEN          .EQU    PGZERO_ST+31            ;Buffer length
    51             000000C0   IDX             .EQU    PGZERO_ST+32            ;Temp Indexing
    52             000000C1   IDY             .EQU    PGZERO_ST+33            ;Temp Indexing
  Fri May 14 2021 10:56                                                                                                    Page 3


    53             000000C2   TEMP1           .EQU    PGZERO_ST+34            ;Temp - Code Conversion routines
    54             000000C3   TEMP2           .EQU    PGZERO_ST+35            ;Temp - Memory/EEPROM/SREC routines - Disassembler
    55             000000C4   TEMP3           .EQU    PGZERO_ST+36            ;Temp - EEPROM/SREC routines
    56             000000C5   CMDFLAG         .EQU    PGZERO_ST+37            ;Command Flag, bit specific, used by many routines
    57             000000C6   OPXMDM          .EQU    PGZERO_ST+38            ;Saved Opcode/Xmodem Flag variable
    58                        ;
    59                        ;       - Xmodem transfer variables
    60             000000C7   CRCHI           .EQU    PGZERO_ST+39            ;CRC hi byte  (two byte variable)
    61             000000C8   CRCLO           .EQU    PGZERO_ST+40            ;CRC lo byte - Operand in Disassembler
    62             000000C9   CRCCNT          .EQU    PGZERO_ST+41            ;CRC retry count - Operand in Disassembler
    63             000000CA   PTRL            .EQU    PGZERO_ST+42            ;Data pointer lo byte - Mnemonic in Disassembler
    64             000000CB   PTRH            .EQU    PGZERO_ST+43            ;Data pointer hi byte - Mnemonic in Disassembler
    65             000000CC   BLKNO           .EQU    PGZERO_ST+44            ;Block number
    66                        ;
    67                        ;        - Macro Loop Counter variables
    68             000000CD   LPCNTL          .EQU    PGZERO_ST+45            ;Loop Count low byte
    69             000000CE   LPCNTH          .EQU    PGZERO_ST+46            ;Loop Count high byte
    70                        ;
    71                        ;       - Spare Monitor byte for future use
    72             000000CF   SPARE_M0        .EQU    PGZERO_ST+47            ;Spare Monitor page zero byte
    73                        ;
    74             000000D0   IDE_STATUS_RAM  .EQU    PGZERO_ST+48            ;IDE RAM-Based Status
    75                        ;
    76             000000D1   IDE_LBA0        .EQU    PGZERO_ST+49            ;IDE LBA Variables for DOS/65
    77             000000D2   IDE_LBA1        .EQU    PGZERO_ST+50
    78             000000D3   IDE_LBA2        .EQU    PGZERO_ST+51
    79                        ;
    80                        ;       - BIOS variables, pointers, flags located at top of Page Zero
    81             000000D8   BIOS_PG0        .EQU    PGZERO_ST+56            ;Start of BIOS page 0 use ($D8-$FF, 40 bytes total)
    82                        ;
    83                        ;       - BRK handler routine
    84             000000D8   PCL             .EQU    BIOS_PG0+00             ;Program Counter Low index
    85             000000D9   PCH             .EQU    BIOS_PG0+01             ;Program Counter High index
    86             000000DA   PREG            .EQU    BIOS_PG0+02             ;Temp Status Reg
    87             000000DB   SREG            .EQU    BIOS_PG0+03             ;Temp Stack ptr
    88             000000DC   YREG            .EQU    BIOS_PG0+04             ;Temp Y Reg
    89             000000DD   XREG            .EQU    BIOS_PG0+05             ;Temp X Reg
    90             000000DE   AREG            .EQU    BIOS_PG0+06             ;Temp A Reg
    91                        ;
    92                        ;       - 2691 IRQ handler pointers and status
    93             000000DF   ICNT            .EQU    BIOS_PG0+07             ;Input buffer count
    94             000000E0   IHEAD           .EQU    BIOS_PG0+08             ;Input buffer head pointer
    95             000000E1   ITAIL           .EQU    BIOS_PG0+09             ;Input buffer tail pointer
    96             000000E2   OCNT            .EQU    BIOS_PG0+10             ;Output buffer count
    97             000000E3   OHEAD           .EQU    BIOS_PG0+11             ;Output buffer head pointer
    98             000000E4   OTAIL           .EQU    BIOS_PG0+12             ;Output buffer tail pointer
    99             000000E5   UART_IRT        .EQU    BIOS_PG0+13             ;2691 Interrupt Status byte
   100             000000E6   UART_SRT        .EQU    BIOS_PG0+14             ;2691 Status Register byte
   101                        ;
   102                        ;       - Real-Time Clock variables
   103                        ; These are repurposed for adding a Realtime clock chip DS1511Y
   104                        ; The Ticks, Seconds, Minutes and Hours remain the same in function.
   105                        ; The 16-bit Days variable is replaced however.
   106                        ; - The DAY_DATE is a new variable. To minimize Page Zero usage, it has two functions
   107                        ;       Bits 0-4 represent the days of the Month 1-31
   108                        ;       Bits 5-7 represent the Day of the Week, 1-7 (Saturday=1)
   109                        ; The Months are handled by the upper 4 bits of the MONTH_YEAR variable
   110                        ; The Century is handled by a the Year (0-255) and the lower 4 bits of the MONTH_YEAR variable
   111             000000E7   TICKS           .EQU    BIOS_PG0+15             ;Number of timer countdowns = 1 second (100)
   112             000000E8   SECS            .EQU    BIOS_PG0+16             ;Seconds: 0-59
   113             000000E9   MINS            .EQU    BIOS_PG0+17             ;Minutes: 0-59
   114             000000EA   HOURS           .EQU    BIOS_PG0+18             ;Hours: 0-23
   115             000000EB   DAY_DATE        .EQU    BIOS_PG0+19             ;Day: (bits 5-7) Date: (bits 0-4)
  Fri May 14 2021 10:56                                                                                                    Page 4


   116             000000EC   MONTH_CENTURY   .EQU    BIOS_PG0+20             ;Month: (bits 4-7) Century: (bits 0-3)
   117             000000ED   YEAR            .EQU    BIOS_PG0+21             ;Century 0-255 plus 4 bits as noted above
   118             000000EE   RTC_TEMP        .EQU    BIOS_PG0+22             ;Temp work byte for updating shared variables
   119                        ;
   120                        ;       - Delay Timer variables
   121             000000EF   MSDELAY         .EQU    BIOS_PG0+23             ;Timer delay countdown byte (255 > 0)
   122             000000F0   SETMS           .EQU    BIOS_PG0+24             ;Set timeout for delay routines - BIOS use only
   123             000000F1   DELLO           .EQU    BIOS_PG0+25             ;Delay value BIOS use only
   124             000000F2   DELHI           .EQU    BIOS_PG0+26             ;Delay value BIOS use only
   125             000000F3   XDL             .EQU    BIOS_PG0+27             ;XL Delay count
   126                        ;
   127                        ;       - Count variables for 10ms benchmark timing
   128             000000F4   MS10_CNT        .EQU    BIOS_PG0+28             ;10ms Count variable
   129             000000F5   SECL_CNT        .EQU    BIOS_PG0+29             ;Seconds Low byte count
   130             000000F6   SECH_CNT        .EQU    BIOS_PG0+30             ;Second High byte count
   131                        ;
   132                        ;       - Adddress and pointers for CF-Card IDE Interface
   133             000000F7   LBA_ADDR_LOW    .EQU    BIOS_PG0+31             ;LBA Transfer Address low byte
   134             000000F8   LBA_ADDR_HIGH   .EQU    BIOS_PG0+32             ;LBA Transfer Address high byte
   135             000000F9   LBA_XFER_CNT    .EQU    BIOS_PG0+33             ;LBA Transfer Count
   136                        
   137             000000FA   LBA_LOW_BYTE    .EQU    BIOS_PG0+34             ;LBA Block number 0-7
   138             000000FB   LBA_HIGH_BYTE   .EQU    BIOS_PG0+35             ;LBA Block number 8-15
   139             000000FC   LBA_EXT_BYTE    .EQU    BIOS_PG0+36             ;LBA Block number 16-23
   140                        ;
   141             000000FD   BIOS_XFERL      .EQU    BIOS_PG0+37             ;BIOS Move Routine low byte
   142             000000FE   BIOS_XFERH      .EQU    BIOS_PG0+38             ;BIOS Move Routine high byte
   143                        ;
   144                        ;       - Timer/Counter Match flag for Delay/Benchmark
   145             000000FF   MATCH           .EQU    BIOS_PG0+39             ;Bit7 used for Delay, Bit6 used for Benchmark
   146                                                                        ;Bits 4,5 used for BRG Test register status
   147                                                                        ;Bits 3,2,1 used for CF Card Interrupt Handler
   148                        ;
   149                        ;       - Default for RTC tick count - number of IRQs for 1 second
   150             00000064   DF_TICKS        .EQU    100                     ;Timer is 10 milliseconds (100 x 10ms = 1 second)
   151                        ;
   152                        ;**************************************************************************************************
   153             00000200   IBUF            .EQU    $0200                   ;Console Input Buffer - 128 bytes
   154             00000280   OBUF            .EQU    $0280                   ;Console Output Buffer - 128 bytes
   155                        ;**************************************************************************************************
   156             00000300   SOFTVEC         .EQU    $0300                   ;Start of soft vectors
   157                        ;The Interrupt structure is vector based. During startup, Page $03 is loaded from ROM.
   158                        ; The soft vectors are structured to allow inserting additional routines either before
   159                        ; or after the ROM based routines. This allows flexibility and changing of routine priority.
   160                        ;
   161                        ;The main set of vectors occupy the first 16 bytes of Page $03. The ROM handler for
   162                        ; NMI, BRK and IRQ jump to the first 3 vectors. The following 3 vectors are loaded with
   163                        ; return addresses to the ROM handler for each. The following 2 vectors are the cold and
   164                        ; warm entry points for the Monitor. After the basic initialization, the monitor is entered.
   165                        ;
   166                        ;The following vector set allows inserts, pre or post for NMI/BRK/IRQ. There a total of 8 inserts
   167                        ; which occupy 16 bytes. They can be used as required.
   168                        ; Currently, VECINSRT0 will be used if a CF-Card IDE Controller is detected.
   169                        ;
   170             00000300   NMIVEC0         .EQU    SOFTVEC+00              ;NMI Vector Entry 0
   171             00000302   BRKVEC0         .EQU    SOFTVEC+02              ;BRK Vector Entry 0
   172             00000304   IRQVEC0         .EQU    SOFTVEC+04              ;IRQ Vector Entry 0
   173                        ;
   174             00000306   NMIRTVEC0       .EQU    SOFTVEC+06              ;NMI Vector Return 0
   175             00000308   BRKRTVEC0       .EQU    SOFTVEC+08              ;BRK Vector Return 0
   176             0000030A   IRQRTVEC0       .EQU    SOFTVEC+10              ;IRQ Vector Return 0
   177                        ;
   178             0000030C   CLDMNVEC0       .EQU    SOFTVEC+12              ;Monitor Cold Entry Vector 0
  Fri May 14 2021 10:56                                                                                                    Page 5


   179             0000030E   WRMMNVEC0       .EQU    SOFTVEC+14              ;Monitor Warm Entry Vector 0
   180                        ;
   181             00000310   VECINSRT0       .EQU    SOFTVEC+16              ;1st Vector Insert
   182             00000312   VECINSRT1       .EQU    SOFTVEC+18              ;2nd Vector Insert
   183             00000314   VECINSRT2       .EQU    SOFTVEC+20              ;3rd Vector Insert
   184             00000316   VECINSRT3       .EQU    SOFTVEC+22              ;4th Vector Insert
   185             00000318   VECINSRT4       .EQU    SOFTVEC+24              ;5th Vector Insert
   186             0000031A   VECINSRT5       .EQU    SOFTVEC+26              ;6th Vector Insert
   187             0000031C   VECINSRT6       .EQU    SOFTVEC+28              ;7th Vector Insert
   188             0000031E   VECINSRT7       .EQU    SOFTVEC+30              ;8th Vector Insert
   189                        ;
   190                        ;**************************************************************************************************
   191             00000320   SOFTCFG         .EQU    SOFTVEC+32              ;Start of hardware config parameters
   192                        ;Soft Config values below are loaded from ROM and are the default I/O setup configuration data that
   193                        ; the INIT_x routines use. As a result, you can write a routine to change the I/O configuration
   194                        ; data and use the standard ROM routines to initialize the I/O without restarting or changing ROM
   195                        ; A Reset (HW or coded) will reinitialize the I/O with the ROM default I/O configuration.
   196                        ;
   197                        ;There are a total of 32 Bytes configuration data reserved starting at $0320
   198                        ;
   199             00000320   LOAD_2691       .EQU    SOFTCFG+00              ;SCC2691 Soft Config Data
   200                        ;
   201             00000330   LOAD_IDE        .EQU    SOFTCFG+16              ;IDE/CF-Card Soft Config Data
   202                        ;
   203                        ;Search Buffer is 16 bytes in length. Used to hold search string for text or hex data
   204             00000340   SRCHBUFF        .EQU    SOFTCFG+32              ;Located in Page $03 following Hardware config data
   205                        ;
   206                        ;Xmodem/CRC Loader also provides Motorola S19 Record sense and load. Designed to handle the S19
   207                        ; records from the WDC Assembler/Linker package. This requires a 44 byte buffer to parse each valid
   208                        ; S1 record, located just before the 132 Byte Xmodem frame buffer. Total Buffer space for the
   209                        ; Xmodem/CRC Loader is 176 bytes
   210                        ;
   211                        ;Valid S-record headers are "S1" and "S9". For S1, the maximum length is "$19" hex. The last S1
   212                        ; record can be less. S9 record is always the last record with no data. WDC Linker also appends
   213                        ; a CR/LF to the end of each record for a total of 44 bytes.
   214             00000350   SRBUFF          .EQU    SOFTCFG+48              ;S-Record buffer, up to 44 bytes in length
   215                        ;
   216                        ;Xmodem frame buffer. The entire Xmodem frame is buffered here and then checked for proper header
   217                        ; and frame number, CRC-16 on the data, then moved to user RAM.
   218             0000037C   RBUFF           .EQU    SOFTCFG+92              ;Xmodem temp 132 byte receive buffer
   219                        ;
   220                        ;Page $03 is completely allocated for Buffers, Config Data and Vector pointers.
   221                        ; Some of the buffer space can be used as needed, provided any required Monitor functions are NOT
   222                        ; being used concurrently.
   223                        ;
   224                        ;Page $04 is Reserved for a second UART Receive/Transmit buffer (future SC28L92)
   225             00000400   IBUF2           .EQU    $0400                   ;Alternate Input Buffer - 128 bytes
   226             00000480   OBUF2           .EQU    $0480                   ;Alternate Output Buffer - 128 bytes
   227                        ;
   228                        ;Page $05 is used for the Realtime Clock NVRAM read and write routines
   229             00000500   NVRAM_DATA      .EQU    $0500                   ;NVRAM Data Buffer address
   230                        ;
   231                        ;Pages $06 - $07 are used for the IDE device Block Buffer (512 bytes)
   232             00000600   LBA_BUFFER      .EQU    $0600                   ;Default IDE Block Buffer address
   233                        ; 
   234                        ;XMODEM Control Character Constants
   235             00000001   SOH             .EQU    $01                     ;Start of Block Header
   236             00000004   EOT             .EQU    $04                     ;End of Text marker
   237             00000006   ACK             .EQU    $06                     ;Good Block Acknowledge
   238             00000015   NAK             .EQU    $15                     ;Bad Block acknowledged
   239             00000018   CAN             .EQU    $18                     ;Cancel character
   240                        ;
   241                        ;**************************************************************************************************
  Fri May 14 2021 10:56                                                                                                    Page 6


   242                        ;RAM location used for the EEPROM Byte Write routine
   243                        ; Note: location moved from $00 to $88 to avoid conflict with EhBasic Page 0 usage
   244                        ;
   245             00000088   BURN_BYTE       .EQU    $0088                   ;Page 0 RAM for EEPROM BYTE write routine
   246                        ;**************************************************************************************************
   247                        ;EnHanced Basic or DOS/65 can be called from the Monitor via the Ctrl-B comand.
   248                        ; The default is different for each of these optional software components.
   249                        ;
   250                        ;The start location is just added here for convienience, but should be changed as needed.
   251                        ;
   252             0000B000   EH_BASIC        .EQU    $B000                   ;Default location for EnHanced BASIC (optional)
   253             0000D680   DOS_65          .EQU    $D680                   ;Default location to Boot DOS/65 (optional)
   254                        ;**************************************************************************************************
   255             0000FE00   IOPAGE          .EQU    $FE00                   ;I/O Page Base Start Address
   256                        ;**************************************************************************************************
   257             0000FE80   SCC2691_BASE    .EQU    IOPAGE+$80              ;Beginning of Console UART address
   258                        ;
   259             0000FE80   UART_MODEREG    .EQU    SCC2691_BASE+$00        ;MR1/MR2 same address, sequential read/write
   260             0000FE81   UART_STATUS     .EQU    SCC2691_BASE+$01        ;UART Status Register (READ)
   261             0000FE81   UART_CLKSEL     .EQU    SCC2691_BASE+$01        ;UART Clock Select Register (WRITE)
   262             0000FE82   UART_BRGTST     .EQU    SCC2691_BASE+$02        ;UART BRG Test Register (READ)
   263             0000FE82   UART_COMMAND    .EQU    SCC2691_BASE+$02        ;UART Command Register (WRITE)
   264             0000FE83   UART_RECEIVE    .EQU    SCC2691_BASE+$03        ;UART Receive Register (READ)
   265             0000FE83   UART_TRANSMIT   .EQU    SCC2691_BASE+$03        ;UART Transmit Register (WRITE)
   266             0000FE84   UART_CLKTEST    .EQU    SCC2691_BASE+$04        ;X1/X16 Test Register (READ)
   267             0000FE84   UART_AUXCR      .EQU    SCC2691_BASE+$04        ;Aux Command Register (WRITE)
   268             0000FE85   UART_ISR        .EQU    SCC2691_BASE+$05        ;Interrupt Status Register (READ)
   269             0000FE85   UART_IMR        .EQU    SCC2691_BASE+$05        ;Interrupt Mask Register (WRITE)
   270             0000FE86   UART_CNTU       .EQU    SCC2691_BASE+$06        ;Counter/Timer Upper Register (READ)
   271             0000FE86   UART_CNTUP      .EQU    SCC2691_BASE+$06        ;Counter/Timer Upper Preset Register (WRITE)
   272             0000FE87   UART_CNTL       .EQU    SCC2691_BASE+$07        ;Counter/Timer Lower Register (READ)
   273             0000FE87   UART_CNTLP      .EQU    SCC2691_BASE+$07        ;Counter/Timer Lower Preset Register (WRITE)
   274                        ;
   275                        ;Additional Hardware
   276                        ; Adding BIOS definitions for Realtime Clock chip - DS1511Y
   277                        ; uses the first 16 addresses for RTC registers and basic operation
   278                        ; uses two addresses for extended RAM of 256 bytes
   279                        ;
   280                        ; upper addresses are used for a 16-bit IDE interface (below)
   281                        ; NOTE: offset $11 and $12 are unused (reserved per the datasheet).
   282                        ;
   283             0000FE60   RTC_IDE_BASE    .EQU    IOPAGE+$60              ;Beginning of Realtime Clock address
   284                        ;
   285             0000FE60   RTC_SECONDS     .EQU    RTC_IDE_BASE+$00        ;Seconds in BCD 00-59
   286             0000FE61   RTC_MINUTES     .EQU    RTC_IDE_BASE+$01        ;Minutes in BCD 00-59
   287             0000FE62   RTC_HOURS       .EQU    RTC_IDE_BASE+$02        ;Hours in BCD 00-23
   288             0000FE63   RTC_DAY         .EQU    RTC_IDE_BASE+$03        ;Day in BCD 1-7
   289             0000FE64   RTC_DATE        .EQU    RTC_IDE_BASE+$04        ;Date in BCD 1-31
   290             0000FE65   RTC_MONTH       .EQU    RTC_IDE_BASE+$05        ;Month in BCD 1-12
   291             0000FE66   RTC_YEAR        .EQU    RTC_IDE_BASE+$06        ;Year in BCD 00-99
   292             0000FE67   RTC_CENTURY     .EQU    RTC_IDE_BASE+$07        ;Century in BCD 00-39
   293             0000FE68   RTC_ALARM_SEC   .EQU    RTC_IDE_BASE+$08        ;Alarm Seconds in BCD 00-59
   294             0000FE69   RTC_ALARM_MIN   .EQU    RTC_IDE_BASE+$09        ;Alarm Minutes in BCD 00-59
   295             0000FE6A   RTC_ALARM_HRS   .EQU    RTC_IDE_BASE+$0A        ;Alarm Hours in BCD 00-23
   296             0000FE6B   RTC_ALARM_DYDT  .EQU    RTC_IDE_BASE+$0B        ;Alarm Day/Date in BCD 0-7 1-31
   297             0000FE6C   RTC_WTCHDOG_01  .EQU    RTC_IDE_BASE+$0C        ;Watchdog 0.1 / 0.01 Seconds in BCD 00-99
   298             0000FE6D   RTC_WTCHDOG_10  .EQU    RTC_IDE_BASE+$0D        ;Watchdog 10 / 1 Seconds in BCD 00-99
   299             0000FE6E   RTC_CONTROL_A   .EQU    RTC_IDE_BASE+$0E        ;Control A
   300             0000FE6F   RTC_CONTROL_B   .EQU    RTC_IDE_BASE+$0F        ;Control B
   301             0000FE70   RTC_RAM_ADDR    .EQU    RTC_IDE_BASE+$10        ;Extended RAM address
   302             0000FE73   RTC_RAM_DATA    .EQU    RTC_IDE_BASE+$13        ;Extended RAM data
   303                        ;
   304                        ; Adding BIOS definitions for 16-bit IDE interface
  Fri May 14 2021 10:56                                                                                                    Page 7


   305                        ; uses two addresses for Upper Byte Latch read / write
   306                        ; uses eight addresses for Command Block Registers
   307                        ; uses two addresses for Control Block Registers
   308                        ;
   309             0000FE74   IDE_16_READ     .EQU    RTC_IDE_BASE+$14        ;Upper byte Read address
   310             0000FE75   IDE_16_WRITE    .EQU    RTC_IDE_BASE+$15        ;Upper byte Write address
   311                        ;
   312                        ; Adding BIOS definitions for IDE Controller (HARD DISK, Flash Module, etc.)
   313                        ; Hardware Adapter provides a 16-bit IDE Port per:
   314                        ;        Seagate ATA Interface Reference Manual 36111-001, Rev. C (21st May 1993)
   315                        ;
   316                        ; Compact Flash Adapter BIOS is based on documentation from SanDisk:
   317                        ;       OEM Product Manual Version 12.0 Doc # 20-10-00038m 02/2007
   318                        ;
   319                        ; Control Block Registers
   320             0000FE76   IDE_ALT_STATUS  .EQU    RTC_IDE_BASE+$16        ;Alternate Status Register (READ)
   321             0000FE76   IDE_DEV_CTRL    .EQU    RTC_IDE_BASE+$16        ;Device Control Register (WRITE)
   322             0000FE77   IDE_DRV_ADDR    .EQU    RTC_IDE_BASE+$17        ;Drive Address Register (READ)
   323                        ;
   324                        ; Command Block Registers
   325             0000FE78   IDE_DATA        .EQU    RTC_IDE_BASE+$18        ;Data Register (R/W)
   326             0000FE79   IDE_ERROR       .EQU    RTC_IDE_BASE+$19        ;Error Register (READ)
   327             0000FE79   IDE_FEATURE     .EQU    RTC_IDE_BASE+$19        ;Feature Register (WRITE)
   328             0000FE7A   IDE_SCT_CNT     .EQU    RTC_IDE_BASE+$1A        ;Sector Count Register
   329             0000FE7B   IDE_SCT_NUM     .EQU    RTC_IDE_BASE+$1B        ;Sector Number Register
   330             0000FE7C   IDE_CYL_LOW     .EQU    RTC_IDE_BASE+$1C        ;Cylinder Low Register
   331             0000FE7D   IDE_CYL_HIGH    .EQU    RTC_IDE_BASE+$1D        ;Cylinder High Register
   332             0000FE7E   IDE_DRV_HEAD    .EQU    RTC_IDE_BASE+$1E        ;Drive/Head Register
   333             0000FE7F   IDE_STATUS      .EQU    RTC_IDE_BASE+$1F        ;Status Register (READ)
   334             0000FE7F   IDE_COMMAND     .EQU    RTC_IDE_BASE+$1F        ;Command Register (WRITE)
   335                        ;
   336                        ;**************************************************************************************************
   337                                .END
    69                        ;
    70                        ;**************************************************************************************************
    71                        ;
    72                        ;**************************************************************************************************
    73                        ;The following 32 functions are provided by BIOS via the JMP Table below
    74                        ; $FF21 - $FF2A are Reserved for future expansion
    75                        ;
    76                        ; $FF00 IDE_RES_DIAG    ;Reset IDE and Run Diagnostics
    77                        ; $FF03 IDE_GET_STATUS  ;Get IDE Status and Extended Error codes
    78                        ; $FF06 IDE_IDENTIFY    ;Get IDE Identification Block
    79                        ; $FF09 IDE_READ_LBA    ;Read a Block from IDE device
    80                        ; $FF0C IDE_WRITE_LBA   ;Write a Block to IDE device
    81                        ; $FF0F IDE_VERIFY_LBA  ;Verify the last Block from IDE device
    82                        ; $FF12 IDE_SET_LBA     ;Set the LBA Block ID for Read/Write/Verify
    83                        ; $FF15 IDE_SET_ADDRESS ;Set the Memory Address to transfer Block data to/from 
    84                        ;
    85                        ; $FF18 RTC_NVRD        ;Read the NVRAM from the RTC
    86                        ; $FF1B RTC_NVWR        ;Write the NVRAM to the RTC
    87                        ; $FF1E RTC_INIT        ;Initialize the Software RTC from the hardware RTC
    88                        ;
    89                        ; $FF2D CNT_INIT        ;Reset counters and Start Benchmark Counter
    90                        ; $FF30 CNT_STRT        ;Start Benchmark Counter
    91                        ; $FF33 CNT_STOP        ;Stop Benchmark Counter
    92                        ; $FF36 CHRIN_NW        ;Data input from console, no waiting, clear carry if none
    93                        ; $FF39 CHRIN           ;Data input from console, carry set if data
    94                        ; $FF3C CHROUT          ;Data output to console, sent data preserved
    95                        ; $FF3F SET_DLY         ;Set delay value for milliseconds and 16-bit counter
    96                        ; $FF42 EXE_MSDLY       ;Execute millisecond delay 1-256 * 10 milliseconds
    97                        ; $FF45 EXE_LGDLY       ;Execute long delay; millisecond delay * 16-bit count
    98                        ; $FF48 EXE_XLDLY       ;Execute extra long delay; 8-bit count * long delay
  Fri May 14 2021 10:56                                                                                                    Page 8


    99                        ; $FF4B INIT_VEC        ;Initialize soft vectors at $0300 from ROM
   100                        ; $FF4E INIT_CFG        ;Initialize soft config values at $0320 from ROM
   101                        ; $FF51 INIT_2691       ;Initialize SCC2691 console 38.4K, 8-N-1 RTS/CTS
   102                        ; $FF54 RESET_2691      ;Reset SCC2691 - called before INIT_2691
   103                        ; $FF57 MON_WARM        ;Monitor warm start - jumps to page $03
   104                        ; $FF5A MON_COLD        ;Monitor cold start - jumps to page $03
   105                        ; $FF5D COLDSTRT        ;System cold start - RESET vector for 65C02
   106                        ;
   107                        ;**************************************************************************************************
   108                        ; Additional BIOS equates for using extended baud rates
   109             0000FECE   MR2_DAT         .EQU    $FECE                   ;ROM config data - UART
   110                        ;**************************************************************************************************
   111                        ;BIOS JUMP Table starts here:
   112                        ;       - BIOS calls are listed below - total of 32
   113                        ;       - Reserved calls are for future hardware support
   114                        ;
   115             0000FF00   B_IDE_RESET             .EQU    $FF00           ;Call 00
   116             0000FF03   B_IDE_GET_STAT          .EQU    $FF03           ;Call 01
   117             0000FF06   B_IDE_IDENTIFY          .EQU    $FF06           ;Call 02
   118             0000FF09   B_IDE_READ_LBA          .EQU    $FF09           ;Call 03
   119             0000FF0C   B_IDE_WRITE_LBA         .EQU    $FF0C           ;Call 04
   120             0000FF0F   B_IDE_VERFY_LBA         .EQU    $FF0F           ;Call 05
   121             0000FF12   B_IDE_SET_LBA           .EQU    $FF12           ;Call 06
   122             0000FF15   B_IDE_SET_ADDR          .EQU    $FF15           ;Call 07
   123                        ;
   124             0000FF18   B_RTC_NVRD              .EQU    $FF18           ;Call 08
   125             0000FF1B   B_RTC_NVWR              .EQU    $FF1B           ;Call 09
   126             0000FF1E   B_RTC_INIT              .EQU    $FF1E           ;Call 10
   127                        ;
   128             0000FF21   B_Reserve11             .EQU    $FF21           ;Call 11
   129             0000FF24   B_Reserve12             .EQU    $FF24           ;Call 12
   130             0000FF27   B_Reserve13             .EQU    $FF27           ;Call 13
   131             0000FF2A   B_Reserve14             .EQU    $FF2A           ;Call 14
   132                        ;
   133             0000FF2D   B_CNT_INIT              .EQU    $FF2D           ;Call 15
   134             0000FF30   B_CNT_STRT              .EQU    $FF30           ;Call 16
   135             0000FF33   B_CNT_STOP              .EQU    $FF33           ;Call 17
   136                        ;
   137             0000FF36   B_CHRIN_NW              .EQU    $FF36           ;Call 18
   138             0000FF39   B_CHRIN                 .EQU    $FF39           ;Call 19
   139             0000FF3C   B_CHROUT                .EQU    $FF3C           ;Call 20
   140                        ;
   141             0000FF3F   B_SET_DLY               .EQU    $FF3F           ;Call 21
   142             0000FF42   B_EXE_MSDLY             .EQU    $FF42           ;Call 22
   143             0000FF45   B_EXE_LGDLY             .EQU    $FF45           ;Call 23
   144             0000FF48   B_EXE_XLDLY             .EQU    $FF48           ;Call 24
   145                        ;
   146             0000FF4B   B_INIT_VEC              .EQU    $FF4B           ;Call 25
   147             0000FF4E   B_INIT_CFG              .EQU    $FF4E           ;Call 26
   148             0000FF51   B_INIT_2691             .EQU    $FF51           ;Call 27
   149             0000FF54   B_RESET_2691            .EQU    $FF54           ;Call 28
   150                        ;
   151             0000FF57   B_WRMMNVEC0             .EQU    $FF57           ;Call 29
   152             0000FF5A   B_CLDMNVEC0             .EQU    $FF5A           ;Call 30
   153             0000FF5D   B_COLDSTRT              .EQU    $FF5D           ;Call 31
   154                        ;
   155             0000FFD0   BIOS_MSG                .EQU    $FFD0           ;BIOS Startup Message is hard-coded here
   156                        ;**************************************************************************************************
   157                                .ORG $E000                              ;6KB reserved for Monitor ($E000 through $F7FF)
   158                        ;**************************************************************************************************
   159                        ;Monitor JUMP Table starts here:
   160                        ;       - Monitor calls are listed below - total of 32
   161                        ;       - Reserved calls are for future Monitor functions
  Fri May 14 2021 10:56                                                                                                    Page 9


   162                        ;
   163 00:E000: 4C 60 E0     M_COLD_MON      JMP     COLD_MON                ;Call 00 $E000
   164 00:E003: 4C 65 E0     M_WARM_MON      JMP     WARM_MON                ;Call 01 $E003
   165                        ;
   166 00:E006: 4C A4 E0     M_RESERVE2      JMP     RESERVED                ;Call 02 $E006
   167 00:E009: 4C 9E E3     M_MOVE_RAM      JMP     MOVER+3                 ;Call 03 $E009
   168 00:E00C: 4C F9 E2     M_FILL_LP       JMP     FILL_LP                 ;Call 04 $E00C
   169                        ;
   170 00:E00F: 4C D7 E1     M_BSOUT         JMP     BSOUT                   ;Call 05 $E00F
   171 00:E012: 4C EC EA     M_XMDM_SAVE     JMP     XMDM_SAVE               ;Call 06 $E012
   172 00:E015: 4C 1A E9     M_XMDM_LOAD     JMP     XMDM_LOAD               ;Call 07 $E015
   173 00:E018: 4C 80 E2     M_BENCH         JMP     BENCH                   ;Call 08 $E018
   174 00:E01B: 4C 8B E2     M_QUITB         JMP     QUITB                   ;Call 09 $E01B
   175 00:E01E: 4C 9B E8     M_TIME          JMP     TIME                    ;Call 10 $E01E
   176 00:E021: 4C 24 E6     M_PRSTAT1       JMP     PRSTAT1                 ;Call 11 $E021
   177 00:E024: 4C D8 E6     M_DIS_LINE      JMP     DIS_LINE                ;Call 12 $E024
   178 00:E027: 4C CB E1     M_INCINDEX      JMP     INCINDEX                ;Call 13 $E027
   179 00:E02A: 4C C2 E1     M_DECINDEX      JMP     DECINDEX                ;Call 14 $E02A
   180 00:E02D: 4C 5F E1     M_RDLINE        JMP     RDLINE                  ;Call 15 $E02D
   181 00:E030: 4C A3 E1     M_RDCHAR        JMP     RDCHAR                  ;Call 16 $E030
   182 00:E033: 4C 2F E1     M_HEXIN2        JMP     HEXIN2                  ;Call 17 $E033
   183 00:E036: 4C 22 E1     M_HEXIN4        JMP     HEXIN4                  ;Call 18 $E036
   184 00:E039: 4C D0 E0     M_HEX2ASC       JMP     HEX2ASC                 ;Call 19 $E039
   185 00:E03C: 4C A5 E0     M_BIN2ASC       JMP     BIN2ASC                 ;Call 20 $E03C
   186 00:E03F: 4C 8E E0     M_ASC2BIN       JMP     ASC2BIN                 ;Call 21 $E03F
   187 00:E042: 4C D2 E1     M_BEEP          JMP     BEEP                    ;Call 22 $E042
   188 00:E045: 4C F5 E1     M_DOLLAR        JMP     DOLLAR                  ;Call 23 $E045
   189 00:E048: 4C FD E1     M_CROUT         JMP     CROUT                   ;Call 24 $E048
   190 00:E04B: 4C F0 E1     M_SPC           JMP     SPC                     ;Call 25 $E04B
   191 00:E04E: 4C 22 E2     M_PRBYTE        JMP     PRBYTE                  ;Call 26 $E04E
   192 00:E051: 4C 38 E2     M_PRWORD        JMP     PRWORD                  ;Call 27 $E051
   193 00:E054: 4C 15 E2     M_PRASC         JMP     PRASC                   ;Call 28 $E054
   194 00:E057: 4C FC E0     M_PROMPT        JMP     PROMPT                  ;Call 29 $E057
   195 00:E05A: 4C 04 E1     M_PROMPTR       JMP     PROMPTR                 ;Call 30 $E05A
   196 00:E05D: 4C 42 E2     M_CONTINUE      JMP     CONTINUE                ;Call 31 $E05D
   197                        ;
   198                        ;START OF MONITOR CODE
   199                        ;**************************************************************************************************
   200                        ;*                      This is the Monitor Cold start vector                                     *
   201                        ;**************************************************************************************************
   202 00:E060: A9 14        COLD_MON        LDA     #$14                    ;Get intro msg / BEEP
   203 00:E062: 20 FC E0                     JSR     PROMPT                  ;Send to Console
   204                        ;
   205                        ;**************************************************************************************************
   206                        ;*                              Command input loop                                                *
   207                        ;**************************************************************************************************
   208                        ;*                      This is the Monitor Warm start vector                                     *
   209                        ;**************************************************************************************************
   210 00:E065: A2 FF        WARM_MON        LDX     #$FF                    ;Initialize Stack pointer
   211 00:E067: 9A                           TXS                             ;Xfer to stack
   212 00:E068: 77 C5                        RMB7    CMDFLAG                 ;Clear bit7 of command flag
   213 00:E06A: A9 16                        LDA     #$16                    ;Get prompt msg
   214 00:E06C: 20 FC E0                     JSR     PROMPT                  ;Send to terminal
   215                        ;
   216 00:E06F: 20 A3 E1     CMON            JSR     RDCHAR                  ;Wait for keystroke (converts to upper-case)
   217 00:E072: A2 22                        LDX     #MONTAB-MONCMD-1        ;Get command list count
   218 00:E074: DD D6 EB     CMD_LP          CMP     MONCMD,X                ;Compare to command list
   219 00:E077: D0 0D                        BNE     CMD_DEC                 ;Check for next command and loop
   220 00:E079: 48                           PHA                             ;Save keystroke
   221 00:E07A: 8A                           TXA                             ;Xfer Command index to A reg
   222 00:E07B: 0A                           ASL     A                       ;Multiply keystroke value by 2 (command offset)
   223 00:E07C: AA                           TAX                             ;Xfer Command offsett address to table MONTAB
   224 00:E07D: 68                           PLA                             ;Restore keystroke (some commands send to terminal)
  Fri May 14 2021 10:56                                                                                                    Page 10


   225 00:E07E: 20 83 E0                     JSR     DOCMD                   ;Call Monitor command processor as a subroutine
   226 00:E081: 80 E2                        BRA     WARM_MON                ;Command processed, branch / wait for next command
   227 00:E083: 7C F9 EB     DOCMD           JMP     (MONTAB,X)              ;Execute command from Table
   228                        ;
   229 00:E086: CA           CMD_DEC         DEX                             ;Decrement index count
   230 00:E087: 10 EB                        BPL     CMD_LP                  ;If more to check, loop back
   231 00:E089: 20 D2 E1                     JSR     BEEP                    ;Beep for error, not valid command character
   232 00:E08C: 80 E1                        BRA     CMON                    ;Branch back and re-enter Monitor
   233                        ;
   234                        ;**************************************************************************************************
   235                        ;*                      Basic Subroutines used by multiple routines                               *
   236                        ;**************************************************************************************************
   237                        ;
   238                        ;ASC2BIN subroutine: Convert 2 ASCII HEX digits to a binary (byte) value
   239                        ; Enter: A register = high digit, Y register = low digit
   240                        ; Return: A register = binary value
   241                        ; Updated routine via Mike Barry... saves 3 bytes, 10 clock cycles
   242 00:E08E: 64 C2        ASC2BIN         STZ     TEMP1           ;Clear TEMP1
   243 00:E090: 20 9A E0                     JSR     BINARY          ;Convert high digit to 4-bit nibble
   244 00:E093: 0A                           ASL     A               ;Shift to high nibble
   245 00:E094: 0A                           ASL     A
   246 00:E095: 0A                           ASL     A
   247 00:E096: 0A                           ASL     A
   248 00:E097: 85 C2                        STA     TEMP1           ;Store it in temp area
   249 00:E099: 98                           TYA                     ;Get Low digit
   250                        ;
   251 00:E09A: 49 30        BINARY          EOR     #$30            ;ASCII -> HEX nibble
   252 00:E09C: C9 0A                        CMP     #$0A            ;Check for result < 10
   253 00:E09E: 90 02                        BCC     BNOK            ;Branch if 0-9
   254 00:E0A0: E9 67                        SBC     #$67            ;Else subtract for A-F
   255 00:E0A2: 05 C2        BNOK            ORA     TEMP1           ;OR into temp value
   256 00:E0A4: 60           RESERVED        RTS                     ;Return to caller
   257                        ;
   258                        ;BIN2ASC subroutine: Convert single byte to two ASCII HEX digits
   259                        ; Enter: A register contains byte value to convert
   260                        ; Return: A register = high digit, Y register = low digit
   261 00:E0A5: 48           BIN2ASC         PHA                     ;Save A Reg on stack
   262 00:E0A6: 29 0F                        AND     #$0F            ;Mask off high nibble
   263 00:E0A8: 20 B1 E0                     JSR     ASCII           ;Convert nibble to ASCII HEX digit
   264 00:E0AB: A8                           TAY                     ;Move to Y Reg
   265 00:E0AC: 68                           PLA                     ;Get character back from stack
   266 00:E0AD: 4A                           LSR     A               ;Shift high nibble to lower 4 bits
   267 00:E0AE: 4A                           LSR     A
   268 00:E0AF: 4A                           LSR     A
   269 00:E0B0: 4A                           LSR     A
   270                        ;
   271 00:E0B1: C9 0A        ASCII           CMP     #$0A            ;Check for 10 or less
   272 00:E0B3: 90 02                        BCC     ASCOK           ;Branch if less than 10
   273 00:E0B5: 69 06                        ADC     #$06            ;Add $06+CF ($07) for A-F
   274 00:E0B7: 69 30        ASCOK           ADC     #$30            ;Add $30 for ASCII
   275 00:E0B9: 60                           RTS                     ;Return to caller
   276                        ;
   277                        ;HEX8ASC - Accepts 8-bit Hexadecimal value (00-99 decimal) and converts to ASCII numeric values.
   278                        ; A register contains the single byte value on entry and outputs the two ASCII numeric values.
   279                        ; leading zero is output as it is used for showing hundredths of a second after a decimal point.
   280 00:E0BA: A0 FF        HEX8ASC         LDY     #$FF            ;Load Y reg with "-1"
   281 00:E0BC: 38                           SEC                     ;Set carry for subtraction
   282 00:E0BD: C8           HEX8LP1         INY                     ;Increment 10's count (starts at zero)
   283 00:E0BE: E9 0A                        SBC     #10             ;Subtract 10 decimal
   284 00:E0C0: B0 FB                        BCS     HEX8LP1         ;Branch back if >10
   285 00:E0C2: 69 3A                        ADC     #$3A            ;Add the last 10 back plus $30 (ASCII "0")
   286 00:E0C4: 48                           PHA                     ;Save 1's count to the Stack
   287 00:E0C5: 98                           TYA                     ;Get the 10's count
  Fri May 14 2021 10:56                                                                                                    Page 11


   288 00:E0C6: 18                           CLC                     ;Clear carry for add
   289 00:E0C7: 69 30                        ADC     #$30            ;Add $30 for ASCII digit
   290 00:E0C9: 20 3C FF                     JSR     B_CHROUT        ;Print the first digit (10's)
   291 00:E0CC: 68                           PLA                     ;Get 1's count from the Stack
   292 00:E0CD: 4C 3C FF                     JMP     B_CHROUT        ;Print the second digit, return
   293                        ;
   294                        ;HEX2ASC - Accepts 16-bit Hexadecimal value and converts to an ASCII decimal string. Input is
   295                        ; via the A and Y registers and output is up to 5 ASCII digits in DATABUFF. The High Byte is in
   296                        ; the Y Register and Low Byte is in the A register. Output data is placed in variable DATABUFF
   297                        ; and terminated with a null character.
   298                        ; Note: leading zeros are supressed. PROMPTR routine is used to print the ASCII decimal value.
   299                        ; Core routine based on Michael Barry's code. Saves many bytes with two updates/changes ;-)
   300 00:E0D0: 85 AC        HEX2ASC         STA     BINVALL         ;Save Low byte
   301 00:E0D2: 84 AD                        STY     BINVALH         ;Save High byte
   302 00:E0D4: A2 05                        LDX     #5              ;Get ASCII buffer offset
   303 00:E0D6: 74 A4                        STZ     DATABUFF,X      ;Zero last buffer byte for null end
   304                        ;
   305 00:E0D8: A9 00        CNVERT          LDA     #$00            ;Clear remainder
   306 00:E0DA: A0 10                        LDY     #16             ;Set loop count for 16-bits
   307                        ;
   308 00:E0DC: C9 05        DVLOOP          CMP     #$05            ;Partial remainder >= 10/2
   309 00:E0DE: 90 02                        BCC     DVLOOP2         ;Branch if less
   310 00:E0E0: E9 05                        SBC     #$05            ;Update partial (carry set)
   311                        ;
   312 00:E0E2: 26 AC        DVLOOP2         ROL     BINVALL         ;Shift carry into dividend
   313 00:E0E4: 26 AD                        ROL     BINVALH         ;Which will be quotient
   314 00:E0E6: 2A                           ROL     A               ;Rotate A reg
   315 00:E0E7: 88                           DEY                     ;Decrement count
   316 00:E0E8: D0 F2                        BNE     DVLOOP          ;Branch back until done
   317 00:E0EA: 09 30                        ORA     #$30            ;Or in $30 for ASCII
   318                        ;
   319 00:E0EC: CA                           DEX                     ;Decrement buffer offset
   320 00:E0ED: 95 A4                        STA     DATABUFF,X      ;Store digit into buffer
   321                        ;
   322 00:E0EF: A5 AC                        LDA     BINVALL         ;Get the Low byte
   323 00:E0F1: 05 AD                        ORA     BINVALH         ;OR in the High byte (check for zero)
   324 00:E0F3: D0 E3                        BNE     CNVERT          ;Branch back until done
   325                        ;
   326                        ;Conversion is complete, get the string address, add offset, then call prompt routine and return
   327                        ; note DATABUFF is fixed location in Page 0, carry flag need not be cleared as result can never
   328                        ; set flag after ADC instruction.
   329 00:E0F5: 8A                           TXA                     ;Get buffer offset
   330 00:E0F6: 69 A4                        ADC     #<DATABUFF      ;Add Low byte address
   331 00:E0F8: A0 00                        LDY     #>DATABUFF      ;Get High byte address
   332 00:E0FA: 80 08                        BRA     PROMPTR         ;Branch to PROMPTR to Print numeric string
   333                        ;
   334                        ;PROMPT routine: Send indexed text string to terminal. Index is contained in A reg.
   335                        ; String buffer address is stored in variable PROMPTL/PROMPTH.
   336 00:E0FC: 0A           PROMPT          ASL     A               ;Multiply by two for msg table index
   337 00:E0FD: AA                           TAX                     ;Xfer to X reg - index
   338 00:E0FE: BD C7 F1                     LDA     MSG_TABLE,X     ;Get low byte address
   339 00:E101: BC C8 F1                     LDY     MSG_TABLE+1,X   ;Get high byte address
   340                        ;
   341                        ;PROMPTR routine: takes message address in Y/A and prints via PROMPT2 routine
   342 00:E104: 85 B6        PROMPTR         STA     PROMPTL         ;Store low byte
   343 00:E106: 84 B7                        STY     PROMPTH         ;Store high byte
   344                        ;
   345                        ;PROMPT2 routine: prints message at address (PROMPTL) till null character found
   346 00:E108: B2 B6        PROMPT2         LDA     (PROMPTL)       ;Get string data
   347 00:E10A: F0 52                        BEQ     HINEXIT         ;If null character, exit (borrowed RTS)
   348 00:E10C: 20 3C FF                     JSR     B_CHROUT        ;Send character to terminal
   349 00:E10F: E6 B6                        INC     PROMPTL         ;Increment low byte index
   350 00:E111: D0 F5                        BNE     PROMPT2         ;Loop back for next character
  Fri May 14 2021 10:56                                                                                                    Page 12


   351 00:E113: E6 B7                        INC     PROMPTH         ;Increment high byte index
   352 00:E115: 80 F1                        BRA     PROMPT2         ;Loop back and continue printing
   353                        ;
   354                        ;SETUP subroutine: Request HEX address input from terminal
   355 00:E117: 20 3C FF     SETUP           JSR     B_CHROUT        ;Send command keystroke to terminal
   356 00:E11A: 20 F0 E1                     JSR     SPC             ;Send [SPACE] to terminal
   357 00:E11D: 80 03                        BRA     HEXIN4          ;Request a 0-4 digit HEX address input from terminal
   358                        ;
   359                        ;HEX input subroutines: Request 1 to 4 ASCII HEX digits from terminal, then convert digits into
   360                        ; a binary value. For 1 to 4 digits entered, HEXDATAH and HEXDATAL contain the output.
   361                        ; Variable BUFIDX will contain the number of digits entered
   362                        ; HEXIN2 - returns value in A reg and Y reg only (Y reg always $00)
   363                        ; HEXIN4 - returns values in A reg, Y reg and INDEXL/INDEXH
   364                        ; HEX2 - Prints MSG# in A reg then calls HEXIN2, HEX4 - Prints MSG# in A reg then calls HEXIN4
   365 00:E11F: 20 FC E0     HEX4            JSR     PROMPT          ;Print MSG # from A reg
   366 00:E122: A2 04        HEXIN4          LDX     #$04            ;Set for number of characters allowed
   367 00:E124: 20 31 E1                     JSR     HEXINPUT        ;Convert digits
   368 00:E127: 84 B1                        STY     INDEXH          ;Store to INDEXH
   369 00:E129: 85 B0                        STA     INDEXL          ;Store to INDEXL
   370 00:E12B: 60                           RTS                     ;Return to caller
   371                        ;
   372 00:E12C: 20 FC E0     HEX2            JSR     PROMPT          ;Print MSG # from A reg
   373 00:E12F: A2 02        HEXIN2          LDX     #$02            ;Set for number of characters allowed
   374                        ;
   375                        ;HEXINPUT subroutine: request 1 to 4 HEX digits from terminal, then convert ASCII HEX to HEX
   376                        ; minor update from Mike Barry, saves a byte.
   377                        ; Setup RDLINE subroutine parameters:
   378 00:E131: 20 F5 E1     HEXINPUT        JSR     DOLLAR          ;Send "$" to console
   379 00:E134: 20 5F E1                     JSR     RDLINE          ;Request ASCII HEX input from terminal
   380 00:E137: F0 25                        BEQ     HINEXIT         ;Exit if none (Z flag already set)
   381 00:E139: 64 AA                        STZ     HEXDATAH        ;Clear Upper HEX byte, Lower HEX byte will be updated
   382 00:E13B: A0 02                        LDY     #$02            ;Set index for 2 bytes
   383 00:E13D: 5A           ASCLOOP         PHY                     ;Save it to stack
   384 00:E13E: B5 9F                        LDA     INBUFF-1,X      ;Read ASCII digit from buffer
   385 00:E140: A8                           TAY                     ;Xfer to Y Reg (LSD)
   386 00:E141: CA                           DEX                     ;Decrement input count
   387 00:E142: F0 04                        BEQ     NO_UPNB         ;Branch if no upper nibble
   388 00:E144: B5 9F                        LDA     INBUFF-1,X      ;Read ASCII digit from buffer
   389 00:E146: 80 02                        BRA     DO_UPNB         ;Branch to include upper nibble
   390 00:E148: A9 30        NO_UPNB         LDA     #$30            ;Load ASCII "0" (MSD)
   391 00:E14A: 20 8E E0     DO_UPNB         JSR     ASC2BIN         ;Convert ASCII digits to binary value
   392 00:E14D: 7A                           PLY                     ;Get index from stack
   393 00:E14E: 99 A9 00                     STA     HEXDATAH-1,Y    ;Write byte to indexed buffer location
   394 00:E151: 8A                           TXA                     ;Check for zero, (no digits left)
   395 00:E152: F0 04                        BEQ     HINDONE         ;If not, exit
   396 00:E154: 88                           DEY                     ;Else, decrement to next byte set
   397 00:E155: CA                           DEX                     ;Decrement index count
   398 00:E156: D0 E5                        BNE     ASCLOOP         ;Loop back for next byte
   399 00:E158: A4 AA        HINDONE         LDY     HEXDATAH        ;Get High Byte
   400 00:E15A: A5 AB                        LDA     HEXDATAL        ;Get Low Byte
   401 00:E15C: A6 BE                        LDX     BUFIDX          ;Get input count (set Z flag)
   402 00:E15E: 60           HINEXIT         RTS                     ;And return to caller
   403                        ;
   404                        ;RDLINE subroutine: Store keystrokes into buffer until [RETURN] key is struck
   405                        ; Used for Hex entry, so only (0-9,A-F) are accepted entries. Lower-case alpha characters
   406                        ; are converted to upper-case. On entry, X reg = buffer length. On exit, X reg = buffer count
   407                        ; [BACKSPACE] key removes keystrokes from buffer. [ESCAPE] key aborts then re-enters monitor.
   408 00:E15F: 86 BF        RDLINE          STX     BUFLEN          ;Store buffer length
   409 00:E161: 64 BE                        STZ     BUFIDX          ;Zero buffer index
   410 00:E163: 20 A3 E1     RDLOOP          JSR     RDCHAR          ;Get character from terminal, convert LC2UC
   411 00:E166: C9 1B                        CMP     #$1B            ;Check for ESC key
   412 00:E168: F0 36                        BEQ     RDNULL          ;If yes, exit back to Monitor
   413 00:E16A: C9 0D        NOTESC          CMP     #$0D            ;Check for C/R
  Fri May 14 2021 10:56                                                                                                    Page 13


   414 00:E16C: F0 2B                        BEQ     EXITRD          ;Exit if yes
   415 00:E16E: C9 08                        CMP     #$08            ;Check for Backspace
   416 00:E170: F0 1C                        BEQ     RDBKSP          ;If yes handle backspace
   417 00:E172: C9 30                        CMP     #$30            ;Check for '0' or higher
   418 00:E174: 90 0A                        BCC     INPERR          ;Branch to error if less than '0'
   419 00:E176: C9 47                        CMP     #$47            ;Check for 'G' ('F'+1)
   420 00:E178: B0 06                        BCS     INPERR          ;Branch to error if 'G' or higher
   421 00:E17A: A6 BE                        LDX     BUFIDX          ;Get the current buffer index
   422 00:E17C: E4 BF                        CPX     BUFLEN          ;Compare to length for space
   423 00:E17E: 90 05                        BCC     STRCHR          ;Branch to store in buffer
   424 00:E180: 20 D2 E1     INPERR          JSR     BEEP            ;Else, error, send Bell to terminal
   425 00:E183: 80 DE                        BRA     RDLOOP          ;Branch back to RDLOOP
   426 00:E185: 95 A0        STRCHR          STA     INBUFF,X        ;Store keystroke in buffer
   427 00:E187: 20 3C FF                     JSR     B_CHROUT        ;Send keystroke to terminal
   428 00:E18A: E6 BE                        INC     BUFIDX          ;Increment buffer index
   429 00:E18C: 80 D5                        BRA     RDLOOP          ;Branch back to RDLOOP
   430 00:E18E: A5 BE        RDBKSP          LDA     BUFIDX          ;Check if buffer is empty
   431 00:E190: F0 EE                        BEQ     INPERR          ;Branch if yes
   432 00:E192: C6 BE                        DEC     BUFIDX          ;Else, decrement buffer index
   433 00:E194: 20 D7 E1                     JSR     BSOUT           ;Send Backspace to terminal
   434 00:E197: 80 CA                        BRA     RDLOOP          ;Loop back and continue
   435 00:E199: A6 BE        EXITRD          LDX     BUFIDX          ;Get keystroke count (Z flag)
   436 00:E19B: D0 0F                        BNE     UCOK            ;If data entered, normal exit
   437 00:E19D: FF C5 0C                     BBS7    CMDFLAG,UCOK    ;Branch if bit7 of command flag active
   438 00:E1A0: 6C 0E 03     RDNULL          JMP     (WRMMNVEC0)     ;Quit to Monitor warm start
   439                        ;
   440                        ;RDCHAR subroutine: Waits for a keystroke to be entered.
   441                        ; if keystroke is a lower-case alphabetical, convert it to upper-case
   442 00:E1A3: 20 39 FF     RDCHAR          JSR     B_CHRIN         ;Request keystroke input from terminal
   443 00:E1A6: C9 61                        CMP     #$61            ;Check for lower case value range
   444 00:E1A8: 90 02                        BCC     UCOK            ;Branch if < $61, control code/upper-case/numeric
   445 00:E1AA: E9 20                        SBC     #$20            ;Subtract $20 to convert to upper case
   446 00:E1AC: 60           UCOK            RTS                     ;Character received, return to caller
   447                        ;
   448                        ;Routines to update pointers for memory operations. UPD_STL subroutine: Increments Source
   449                        ; and Target pointers. UPD_TL subroutine: Increments Target pointers only, then drops into
   450                        ; decrement Length pointer. Used by multiple Memory operation commands.
   451 00:E1AD: E6 B8        UPD_STL         INC     SRCL            ;Increment source low byte
   452 00:E1AF: D0 02                        BNE     UPD_TL          ;Check for rollover
   453 00:E1B1: E6 B9                        INC     SRCH            ;Increment source high byte
   454 00:E1B3: E6 BA        UPD_TL          INC     TGTL            ;Increment target low byte
   455 00:E1B5: D0 02                        BNE     DECLEN          ;Check for rollover
   456 00:E1B7: E6 BB                        INC     TGTH            ;Increment target high byte
   457                        ;
   458                        ;DECLEN subroutine: decrement 16-bit variable LENL/LENH
   459 00:E1B9: A5 BC        DECLEN          LDA     LENL            ;Get length low byte
   460 00:E1BB: D0 02                        BNE     SKP_LENH        ;Test for LENL = zero
   461 00:E1BD: C6 BD                        DEC     LENH            ;Else decrement length high byte
   462 00:E1BF: C6 BC        SKP_LENH        DEC     LENL            ;Decrement length low byte
   463 00:E1C1: 60                           RTS                     ;Return to caller
   464                        ;
   465                        ;DECINDEX subroutine: decrement 16 bit variable INDEXL/INDEXH
   466 00:E1C2: A5 B0        DECINDEX        LDA     INDEXL          ;Get index low byte
   467 00:E1C4: D0 02                        BNE     SKP_IDXH        ;Test for INDEXL = zero
   468 00:E1C6: C6 B1                        DEC     INDEXH          ;Decrement index high byte
   469 00:E1C8: C6 B0        SKP_IDXH        DEC     INDEXL          ;Decrement index low byte
   470 00:E1CA: 60                           RTS                     ;Return to caller
   471                        ;
   472                        ;INCINDEX subroutine: increment 16 bit variable INDEXL/INDEXH
   473 00:E1CB: E6 B0        INCINDEX        INC     INDEXL          ;Increment index low byte
   474 00:E1CD: D0 02                        BNE     SKP_IDX         ;If not zero, skip high byte
   475 00:E1CF: E6 B1                        INC     INDEXH          ;Increment index high byte
   476 00:E1D1: 60           SKP_IDX         RTS                     ;Return to caller
  Fri May 14 2021 10:56                                                                                                    Page 14


   477                        ;
   478                        ;Output routines for formatting, backspace, CR/LF, BEEP, etc.
   479                        ; all routines preserve the A reg on exit.
   480                        ;
   481                        ;BEEP subroutine: Send ASCII [BELL] to terminal
   482 00:E1D2: 48           BEEP            PHA                     ;Save A reg on Stack
   483 00:E1D3: A9 07                        LDA     #$07            ;Get ASCII [BELL] to terminal
   484 00:E1D5: 80 2E                        BRA     SENDIT          ;Branch to send
   485                        ;
   486                        ;BSOUT subroutine: send a Backspace to terminal
   487 00:E1D7: 20 DD E1     BSOUT           JSR     BSOUT2          ;Send an ASCII backspace
   488 00:E1DA: 20 F0 E1                     JSR     SPC             ;Send space to clear out character
   489 00:E1DD: 48           BSOUT2          PHA                     ;Save character in A reg
   490 00:E1DE: A9 08                        LDA     #$08            ;Send another Backspace to return
   491 00:E1E0: 80 23        BRCHOUT         BRA     SENDIT          ;Branch to send
   492                        ;
   493 00:E1E2: 20 DD E1     BSOUT3T         JSR     BSOUT2          ;Send a Backspace 3 times
   494 00:E1E5: 20 DD E1     BSOUT2T         JSR     BSOUT2          ;Send a Backspace 2 times
   495 00:E1E8: 80 F3                        BRA     BSOUT2          ;Send a Backspace and return
   496                        ;
   497                        ;SPC subroutines: Send a Space to terminal 1,2 or 4 times
   498 00:E1EA: 20 ED E1     SPC4            JSR     SPC2            ;Send 4 Spaces to terminal
   499 00:E1ED: 20 F0 E1     SPC2            JSR     SPC             ;Send 2 Spaces to terminal
   500 00:E1F0: 48           SPC             PHA                     ;Save character in A reg
   501 00:E1F1: A9 20                        LDA     #$20            ;Get ASCII Space
   502 00:E1F3: 80 10                        BRA     SENDIT          ;Branch to send
   503                        ;
   504                        ;DOLLAR subroutine: Send "$" to terminal
   505 00:E1F5: 48           DOLLAR          PHA                     ;Save A reg on STACK
   506 00:E1F6: A9 24                        LDA     #$24            ;Get ASCII "$"
   507 00:E1F8: 80 0B                        BRA     SENDIT          ;Branch to send
   508                        ;
   509                        ;Send CR/LF to terminal
   510 00:E1FA: 20 FD E1     CR2             JSR     CROUT           ;Send CR/LF to terminal
   511 00:E1FD: 48           CROUT           PHA                     ;Save A reg
   512 00:E1FE: A9 0D                        LDA     #$0D            ;Get ASCII Return
   513 00:E200: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
   514 00:E203: A9 0A                        LDA     #$0A            ;Get ASCII Linefeed
   515 00:E205: 20 3C FF     SENDIT          JSR     B_CHROUT        ;Send to terminal
   516 00:E208: 68                           PLA                     ;Restore A reg
   517 00:E209: 60                           RTS                     ;Return to caller
   518                        ;
   519                        ;GLINE subroutine: Send a horizontal line to console used by memory display only.
   520 00:E20A: A2 4F        GLINE           LDX     #$4F            ;Load index for 79 decimal
   521 00:E20C: A9 7E                        LDA     #$7E            ;Get "~" character
   522 00:E20E: 20 3C FF     GLINEL          JSR     B_CHROUT        ;Send to terminal (draw a line)
   523 00:E211: CA                           DEX                     ;Decrement count
   524 00:E212: D0 FA                        BNE     GLINEL          ;Branch back until done
   525 00:E214: 60                           RTS                     ;Return to caller
   526                        ;
   527                        ;Routines to output 8/16-bit Binary Data and ASCII characters
   528                        ; PRASC subroutine: Print A-reg as ASCII (Printable ASCII values = $20 - $7E), else print "."
   529 00:E215: C9 7F        PRASC           CMP     #$7F            ;Check for first 128
   530 00:E217: B0 04                        BCS     PERIOD          ;If = or higher, branch
   531 00:E219: C9 20                        CMP     #$20            ;Check for control characters
   532 00:E21B: B0 02                        BCS     ASCOUT          ;If space or higher, branch and print
   533 00:E21D: A9 2E        PERIOD          LDA     #$2E            ;Else, print a "."
   534 00:E21F: 4C 3C FF     ASCOUT          JMP     B_CHROUT        ;Send byte in A-Reg, then return
   535                        ;
   536                        ;PRBYTE subroutine: Converts a single Byte to 2 HEX ASCII characters and sends to console on
   537                        ; entry, A reg contains the Byte to convert/send. Register contents are preserved on entry/exit.
   538 00:E222: 48           PRBYTE          PHA                     ;Save A register
   539 00:E223: 5A                           PHY                     ;Save Y register
  Fri May 14 2021 10:56                                                                                                    Page 15


   540 00:E224: 20 A5 E0     PRBYT2          JSR     BIN2ASC         ;Convert A reg to 2 ASCII Hex characters
   541 00:E227: 20 3C FF                     JSR     B_CHROUT        ;Print high nibble from A reg
   542 00:E22A: 98                           TYA                     ;Transfer low nibble to A reg
   543 00:E22B: 20 3C FF                     JSR     B_CHROUT        ;Print low nibble from A reg
   544 00:E22E: 7A                           PLY                     ;Restore Y Register
   545 00:E22F: 68                           PLA                     ;Restore A Register
   546 00:E230: 60                           RTS                     ;And return to caller
   547                        ;
   548                        ;PRINDEX subroutine: Prints a $ sign followed by INDEXH/L
   549 00:E231: 20 F5 E1     PRINDEX         JSR     DOLLAR          ;Print a $ sign
   550 00:E234: A5 B0                        LDA     INDEXL          ;Get Index Low byte
   551 00:E236: A4 B1                        LDY     INDEXH          ;Get Index High byte
   552                        ;
   553                        ;PRWORD subroutine: Converts a 16-bit word to 4 HEX ASCII characters and sends to console. On
   554                        ; entry, A reg contains Low Byte, Y reg contains High Byte. Registers are preserved on entry/exit.
   555                        ; NOTE: Routine changed for consistency; A reg = Low byte, Y reg = High byte on 2nd May 2020
   556 00:E238: 48           PRWORD          PHA                     ;Save A register (Low)
   557 00:E239: 5A                           PHY                     ;Save Y register (High)
   558 00:E23A: 48                           PHA                     ;Save Low byte again
   559 00:E23B: 98                           TYA                     ;Xfer High byte to A reg
   560 00:E23C: 20 22 E2                     JSR     PRBYTE          ;Convert and print one HEX character (00-FF)
   561 00:E23F: 68                           PLA                     ;Get Low byte value
   562 00:E240: 80 E2                        BRA     PRBYT2          ;Finish up Low Byte and exit
   563                        ;
   564                        ;Continue routine: called by commands to confirm execution, when No is confirmed, return address
   565                        ;is removed from stack and the exit goes back to the Monitor input loop.
   566                        ;Short version prompts for (Y/N) only.
   567 00:E242: A9 00        CONTINUE        LDA     #$00            ;Get msg "cont? (Y/N)" to terminal
   568 00:E244: 80 02                        BRA     SH_CONT         ;Branch down
   569 00:E246: A9 01        CONTINUE2       LDA     #$01            ;Get short msg "(Y/N)" only
   570 00:E248: 20 FC E0     SH_CONT         JSR     PROMPT          ;Send to terminal
   571 00:E24B: 20 A3 E1     TRY_AGN         JSR     RDCHAR          ;Get keystroke from terminal
   572 00:E24E: C9 59                        CMP     #$59            ;"Y" key?
   573 00:E250: F0 0D                        BEQ     DOCONT          ;if yes, continue/exit
   574 00:E252: C9 4E                        CMP     #$4E            ;if "N", quit/exit
   575 00:E254: F0 05                        BEQ     DONTCNT         ;Return if not ESC
   576 00:E256: 20 D2 E1                     JSR     BEEP            ;Send Beep to console
   577 00:E259: 80 F0                        BRA     TRY_AGN         ;Loop back, try again
   578 00:E25B: 68           DONTCNT         PLA                     ;Else remove return address
   579 00:E25C: 68                           PLA                     ;and discard it
   580 00:E25D: 64 C5                        STZ     CMDFLAG         ;Clear all bits in command flag
   581 00:E25F: 60           DOCONT          RTS                     ;Return
   582                        ;
   583                        ;**************************************************************************************************
   584                        ;*                              Monitor Command Processors                                        *
   585                        ;**************************************************************************************************
   586                        ;
   587                        ;**************************************************************************************************
   588                        ;*                              Timer/Counter based Monitor functions                             *
   589                        ;**************************************************************************************************
   590                        ;
   591                        ;[,] Delay Setup Routine: This routine gets hex input via the console
   592                        ;  - first is a hex byte ($00-$FF) for the 10-millisecond count
   593                        ;  - second is a hex word ($0000-$FFFF) for the delay multiplier
   594                        ;  - these are stored in variables SETMS, DELLO/DELHI
   595 00:E260: A9 17        SET_DELAY       LDA     #$17            ;Get millisecond delay message
   596 00:E262: 20 2C E1                     JSR     HEX2            ;Use short cut version for print and input
   597 00:E265: 85 F0                        STA     SETMS           ;Else store millisecond count in variable
   598 00:E267: A9 18        GETMULT         LDA     #$18            ;Get Multiplier message
   599 00:E269: 20 1F E1                     JSR     HEX4            ;Use short cut version for print and input
   600 00:E26C: 85 F1                        STA     DELLO           ;Store Low byte
   601 00:E26E: 84 F2                        STY     DELHI           ;Store High byte
   602 00:E270: 60                           RTS                     ;Return to caller
  Fri May 14 2021 10:56                                                                                                    Page 16


   603                        ;
   604                        ;[\] Execute XL Delay: Get an 8-bit value for extra long delay, execute is entered.
   605 00:E271: A9 19        SET_XLDLY       LDA     #$19            ;Get XL Loop message
   606 00:E273: 20 2C E1                     JSR     HEX2            ;Use short cut version for print and input
   607 00:E276: 85 F3                        STA     XDL             ;Save delay value
   608 00:E278: A9 0D                        LDA     #$0D            ;Get ASCII C/R
   609 00:E27A: 20 3C FF                     JSR     B_CHROUT        ;Send C/R (show delay started, no L/F)
   610 00:E27D: 4C 48 FF                     JMP     B_EXE_XLDLY     ;Execute Extra Long delay loop
   611                        ;
   612                        ;[B] Benchmark Timer: Starts the benchmark timer.
   613                        ; This routine displays a message to the console. A (y/n) prompt
   614                        ; allows exit if required. Else it calls the BIOS routine at $FF30. This routine will
   615                        ; clear the counters in page zero and enable the benchmark count routine.
   616                        ; NOTE: The Benchmark counter is handled in BIOS and provides a 16-bit count of seconds
   617                        ; along with a jiffy count with 10ms accuracy.
   618                        ;
   619                        ; The companion Q command quits the Benchmark count and displays the elapsed time as
   620                        ; xxxxx.xx seconds.
   621 00:E280: A9 2A        BENCH           LDA     #$2A            ;Get message for Bench startup
   622 00:E282: 20 FC E0                     JSR     PROMPT          ;Send message to console
   623 00:E285: 20 46 E2                     JSR     CONTINUE2       ;Prompt user (y/n)
   624 00:E288: 4C 2D FF                     JMP     B_CNT_INIT      ;Call BIOS routine to Init and start count, return
   625                        ;
   626                        ;[Q] Quit Benchmark timer: Quits the Benchmark timer.
   627                        ; Benchmark timer is stopped by calling the BIOS routine. Once the Benchmark counter is
   628                        ; is stopped, the HEX2ASC routine to print the 16-bit seconds count, followed by a period
   629                        ; and then the HEX8ASC routine prints the hundreds count followed by the "Seconds" message.
   630 00:E28B: 20 33 FF     QUITB           JSR     B_CNT_STOP      ;Stop Benchmark counter
   631 00:E28E: A5 F5                        LDA     SECL_CNT        ;Get seconds low count
   632 00:E290: A4 F6                        LDY     SECH_CNT        ;Get seconds high count
   633 00:E292: 20 D0 E0                     JSR     HEX2ASC         ;Print ASCII number
   634 00:E295: 20 1D E2                     JSR     PERIOD          ;Send "." to console
   635 00:E298: A5 F4                        LDA     MS10_CNT        ;Get hundreds of seconds
   636 00:E29A: 20 BA E0                     JSR     HEX8ASC         ;Print hundreds of seconds
   637 00:E29D: A9 49                        LDA     #$49            ;Get message for " Seconds"
   638 00:E29F: 20 FC E0                     JSR     PROMPT          ;Send to console
   639 00:E2A2: 4C FD E1                     JMP     CROUT           ;Send CR/LF and return
   640                        ;
   641                        ;**************************************************************************************************
   642                        ;*                              Macro functions for testing/looping                               *
   643                        ;**************************************************************************************************
   644                        ;
   645                        ;[(] INIMACRO command: Initialize keystroke input buffer
   646                        ; initializes buffer head/tail pointers and resets buffer count to zero
   647                        ; input buffer appears empty so command macro starts at the head of the buffer
   648 00:E2A5: 64 CD        INIMACRO        STZ     LPCNTL          ;Zero Loop count low byte
   649 00:E2A7: 64 CE                        STZ     LPCNTH          ;Zero Loop count high byte
   650 00:E2A9: 67 C5                        RMB6    CMDFLAG         ;Clear Loop Count flag Bit6
   651                        ;
   652 00:E2AB: A9 21        LP_CNT_FL       LDA     #$21            ;Get Loop Count msg
   653 00:E2AD: 20 FC E0                     JSR     PROMPT          ;Send to console
   654 00:E2B0: A9 01                        LDA     #$01            ;Get short msg "(Y/N)" only
   655 00:E2B2: 20 FC E0                     JSR     PROMPT          ;Send to terminal
   656 00:E2B5: 20 A3 E1                     JSR     RDCHAR          ;Get keystroke from terminal
   657 00:E2B8: C9 59                        CMP     #$59            ;"Y" key?
   658 00:E2BA: F0 09                        BEQ     DOLOOPS         ;If yes, set loop flag
   659 00:E2BC: C9 4E                        CMP     #$4E            ;"N" key?
   660 00:E2BE: F0 07                        BEQ     NOLOOPS         ;If yes, don't set loop flag
   661 00:E2C0: 20 D2 E1                     JSR     BEEP            ;Neither (Y/N) selected, sound bell
   662 00:E2C3: 80 E6                        BRA     LP_CNT_FL       ;Branch back, try again
   663                        ;
   664 00:E2C5: E7 C5        DOLOOPS         SMB6    CMDFLAG         ;Set Loop Count flag Bit6
   665 00:E2C7: 64 DF        NOLOOPS         STZ     ICNT            ;Zero Input buffer count
  Fri May 14 2021 10:56                                                                                                    Page 17


   666 00:E2C9: 64 E1                        STZ     ITAIL           ;Zero Input buffer tail pointer
   667 00:E2CB: 64 E0        MACINI          STZ     IHEAD           ;Zero Input buffer head pointer
   668 00:E2CD: 60           DONEFILL        RTS                     ;Return to caller
   669                        ;
   670                        ;[)] RUNMACRO command: Run Monitor command macro. This will indicate that there are 128 keystrokes
   671                        ; in the keystroke input buffer. The Monitor will process these as if they were received from the
   672                        ; terminal (typed-in by the user). Because the last keystroke stored in the keystroke buffer was
   673                        ; ")", this will loop continuously. Use [SEND BREAK] to exit Macro
   674 00:E2CE: A9 7F        RUNMACRO        LDA     #$7F            ;Get keystroke buffer max length-1
   675 00:E2D0: 85 E1                        STA     ITAIL           ;Push tail pointer to end
   676 00:E2D2: 1A                           INC     A               ;Increment to $80 for buffer count (full)
   677 00:E2D3: 85 DF                        STA     ICNT            ;Make count show as full ($80)
   678 00:E2D5: 6F C5 15                     BBR6    CMDFLAG,NOLP_CNT ;If Loop flag clear, branch around it
   679 00:E2D8: E6 CD                        INC     LPCNTL          ;Increment loops low byte
   680 00:E2DA: D0 02                        BNE     SKP_LPC         ;If not zero, skip high byte
   681 00:E2DC: E6 CE                        INC     LPCNTH          ;Increment loops high byte
   682 00:E2DE: A9 22        SKP_LPC         LDA     #$22            ;Get Loops msg
   683 00:E2E0: 20 FC E0                     JSR     PROMPT          ;Send to console
   684 00:E2E3: A5 CD                        LDA     LPCNTL          ;Get Loop count low
   685 00:E2E5: A4 CE                        LDY     LPCNTH          ;Get Loop count high
   686 00:E2E7: 20 D0 E0                     JSR     HEX2ASC         ;Print Loop count
   687 00:E2EA: 20 FD E1                     JSR     CROUT           ;Send C/R to console
   688 00:E2ED: 80 DC        NOLP_CNT        BRA     MACINI          ;Zero Head pointer and exit
   689                        ;
   690                        ;**************************************************************************************************
   691                        ;*                      Basic Memory Operations (includes Ctrl-P)                                 *
   692                        ;**************************************************************************************************
   693                        ;
   694                        ;[C] Compare routine: one memory range to another and display any addresses which do not match
   695                        ;[M] Move routine: uses this section for parameter input, then branches to MOVER below
   696                        ;[F] Fill routine: uses this section for parameter input but requires a fill byte value
   697                        ;[CTRL-P] Program EEPROM: uses this section for parameter input and to write the EEPROM
   698                        ;Uses source, target and length input parameters. Errors in compare are shown in target space.
   699 00:E2EF: A9 05        FM_INPUT        LDA     #$05            ;Send "val: " to terminal
   700 00:E2F1: 20 2C E1                     JSR     HEX2            ;Use short cut version for print and input
   701 00:E2F4: 85 C3                        STA     TEMP2           ;Save fill byte to temp
   702 00:E2F6: 20 42 E2                     JSR     CONTINUE        ;Handle continue prompt
   703                        ;
   704                        ;Memory fill routine: parameter gathered below with Move/Fill,
   705                        ; then a jump to here TEMP2 contains fill byte value
   706 00:E2F9: A5 BC        FILL_LP         LDA     LENL            ;Get length low byte
   707 00:E2FB: 05 BD                        ORA     LENH            ;OR in length high byte
   708 00:E2FD: F0 CE                        BEQ     DONEFILL        ;Exit if zero
   709 00:E2FF: A5 C3                        LDA     TEMP2           ;Get fill byte from TEMP2
   710 00:E301: 92 BA                        STA     (TGTL)          ;Store in target location
   711 00:E303: 20 B3 E1                     JSR     UPD_TL          ;Update Target/Length pointers
   712 00:E306: 80 F1                        BRA     FILL_LP         ;Loop back until done
   713                        ;
   714                        ;Compare/Move/Fill memory operations ENTER HERE, branches as required
   715 00:E308: 85 C3        CPMVFL          STA     TEMP2           ;Save command character
   716 00:E30A: 20 3C FF                     JSR     B_CHROUT        ;Print command character (C/M/F)
   717 00:E30D: C9 46                        CMP     #$46            ;Check for F - fill memory
   718 00:E30F: D0 0B                        BNE     PRGE_E          ;If not, continue normal parameter input
   719 00:E311: A9 03                        LDA     #$03            ;Get msg " addr:"
   720 00:E313: 80 12                        BRA     F_INPUT         ;Branch to handle parameter input
   721                        ;
   722                        ;EEPROM write operation enters here
   723 00:E315: A9 1C        PROGEE          LDA     #$1C            ;Get PRG_EE msg
   724 00:E317: 20 FC E0                     JSR     PROMPT          ;Send to terminal
   725 00:E31A: 64 C3                        STZ     TEMP2           ;Clear (Compare/Fill/Move)/error flag
   726                        ;
   727 00:E31C: A9 06        PRGE_E          LDA     #$06            ;Get " src:" msg
   728 00:E31E: 20 1F E1                     JSR     HEX4            ;Use short cut version for print and get input
  Fri May 14 2021 10:56                                                                                                    Page 18


   729 00:E321: 85 B8                        STA     SRCL            ;Else, store source address in variable SRCL,SRCH
   730 00:E323: 84 B9                        STY     SRCH            ;Store high address
   731 00:E325: A9 07                        LDA     #$07            ;Get " tgt:" msg
   732 00:E327: 20 1F E1     F_INPUT         JSR     HEX4            ;Use short cut version for print and get input
   733 00:E32A: 85 BA                        STA     TGTL            ;Else, store target address in variable TGTL,TGTH
   734 00:E32C: 84 BB                        STY     TGTH            ;Store high address
   735 00:E32E: A9 04                        LDA     #$04            ;Get " len:" msg
   736 00:E330: 20 1F E1                     JSR     HEX4            ;Use short cut version for print and get input
   737 00:E333: 85 BC                        STA     LENL            ;ELSE, store length address in variable LENL,LENH
   738 00:E335: 84 BD                        STY     LENH            ;Store high address
   739                        ;
   740                        ; All input parameters for Source, Target and Length entered
   741 00:E337: A5 C3                        LDA     TEMP2           ;Get Command character
   742 00:E339: C9 46                        CMP     #$46            ;Check for fill memory
   743 00:E33B: F0 B2                        BEQ     FM_INPUT        ;Handle the remaining input
   744 00:E33D: C9 43                        CMP     #$43            ;Test for Compare
   745 00:E33F: F0 31                        BEQ     COMPLP          ;Branch if yes
   746 00:E341: C9 4D                        CMP     #$4D            ;Check for Move
   747 00:E343: F0 56                        BEQ     MOVER           ;Branch if yes
   748                        ;
   749                        ; Command is to Program EEPROM
   750 00:E345: A9 1D        PROG_EE         LDA     #$1D            ;Get warning msg
   751 00:E347: 20 FC E0                     JSR     PROMPT          ;Send to console
   752 00:E34A: 20 46 E2                     JSR     CONTINUE2       ;Prompt for (Y/N)
   753                        ;
   754                        ;Programming of the EEPROM is now confirmed by user. This routine will copy the core move and test
   755                        ; routine from ROM to RAM, then call COMPLP to write and compare. As I/O can generate interrupts
   756                        ; which point to ROM routines, all interrupts must be disabled during the program sequence.
   757                        ;
   758                        ;Send message to console for writing EEPROM
   759 00:E34D: A9 1E                        LDA     #$1E            ;Get write message
   760 00:E34F: 20 FC E0                     JSR     PROMPT          ;Send to console
   761 00:E352: A5 E2        OC_LOOP         LDA     OCNT            ;Check output buffer count
   762 00:E354: D0 FC                        BNE     OC_LOOP         ;Loop back until buffer sent
   763                        ;
   764                        ;Xfer byte write code to RAM for execution
   765 00:E356: 20 EA E3                     JSR     XFER_BYTE_WRT   ;Xfer byte write code to Page Zero
   766                        ;
   767                        ;Wait for 1/2 second for RAM/ROM access to settle
   768 00:E359: A9 32                        LDA     #$32            ;Set milliseconds to 50(*10 ms)
   769 00:E35B: 20 3F FF                     JSR     B_SET_DLY       ;Set Delay parameters
   770 00:E35E: 20 42 FF                     JSR     B_EXE_MSDLY     ;Call delay for 1/2 second
   771                        ;
   772 00:E361: F7 C3        PROG_EEP        SMB7    TEMP2           ;Set EEPROM write active mask
   773 00:E363: 20 72 E3                     JSR     COMPLP          ;Call routine to write/compare
   774 00:E366: 6F C3 04                     BBR6    TEMP2,PRG_GOOD  ;Skip down if no error
   775 00:E369: A9 20                        LDA     #$20            ;Get Prog failed message
   776 00:E36B: 80 02                        BRA     BRA_PRMPT       ;Branch to Prompt routine
   777                        ;
   778 00:E36D: A9 1F        PRG_GOOD        LDA     #$1F            ;Get completed message
   779 00:E36F: 4C FC E0     BRA_PRMPT       JMP     PROMPT          ;Send to console and exit
   780                        ;
   781 00:E372: A5 BC        COMPLP          LDA     LENL            ;Get low byte of length
   782 00:E374: 05 BD                        ORA     LENH            ;OR in High byte of length
   783 00:E376: F0 71                        BEQ     QUITMV          ;If zero, nothing to compare/write
   784 00:E378: 7F C3 03                     BBR7    TEMP2,SKP_BURN  ;Skip burn if bit 7 clear
   785 00:E37B: 20 88 00                     JSR     BURN_BYTE       ;Else Burn a byte to EEPROM
   786 00:E37E: B2 B8        SKP_BURN        LDA     (SRCL)          ;Load source byte
   787 00:E380: D2 BA                        CMP     (TGTL)          ;Compare to target byte
   788 00:E382: F0 12                        BEQ     CMP_OK          ;If compare is good, continue
   789                        ;
   790 00:E384: E7 C3                        SMB6    TEMP2           ;Set bit 6 of TEMP2 flag (compare error)
   791 00:E386: 20 ED E1                     JSR     SPC2            ;Send 2 spaces
  Fri May 14 2021 10:56                                                                                                    Page 19


   792 00:E389: 20 F5 E1                     JSR     DOLLAR          ;Print $ sign
   793 00:E38C: A5 BA                        LDA     TGTL            ;Get Low byte of address
   794 00:E38E: A4 BB                        LDY     TGTH            ;Get High byte of address
   795 00:E390: 20 38 E2                     JSR     PRWORD          ;Print word
   796 00:E393: 20 F0 E1                     JSR     SPC             ;Add 1 space for formatting
   797                        ;
   798 00:E396: 20 AD E1     CMP_OK          JSR     UPD_STL         ;Update pointers
   799 00:E399: 80 D7                        BRA     COMPLP          ;Loop back until done
   800                        ;
   801                        ;Parameters for move memory entered and validated, now make decision on which direction
   802                        ; to do the actual move, if overlapping, move from end to start, else from start to end.
   803 00:E39B: 20 42 E2     MOVER           JSR     CONTINUE        ;Prompt to continue move
   804 00:E39E: 38                           SEC                     ;Set carry flag for subtract
   805 00:E39F: A5 BA                        LDA     TGTL            ;Get target lo byte
   806 00:E3A1: E5 B8                        SBC     SRCL            ;Subtract source lo byte
   807 00:E3A3: AA                           TAX                     ;Move to X reg temporarily
   808 00:E3A4: A5 BB                        LDA     TGTH            ;Get target hi byte
   809 00:E3A6: E5 B9                        SBC     SRCH            ;Subtract source hi byte
   810 00:E3A8: A8                           TAY                     ;Move to Y reg temporarily
   811 00:E3A9: 8A                           TXA                     ;Xfer lo byte difference to A reg
   812 00:E3AA: C5 BC                        CMP     LENL            ;Compare to lo byte length
   813 00:E3AC: 98                           TYA                     ;Xfer hi byte difference to A reg
   814 00:E3AD: E5 BD                        SBC     LENH            ;Subtract length lo byte
   815 00:E3AF: 90 0F                        BCC     RIGHT           ;If carry is clear, overwrite condition exists
   816                        ;
   817                        ;Move memory block first byte to last byte, no overlap condition
   818 00:E3B1: A5 BC        MVNO_LP         LDA     LENL            ;Get length low byte
   819 00:E3B3: 05 BD                        ORA     LENH            ;OR in length high byte
   820 00:E3B5: F0 32                        BEQ     QUITMV          ;Exit if zero bytes to move
   821 00:E3B7: B2 B8                        LDA     (SRCL)          ;Load source data
   822 00:E3B9: 92 BA                        STA     (TGTL)          ;Store as target data
   823 00:E3BB: 20 AD E1                     JSR     UPD_STL         ;Update Source/Target/Length variables
   824 00:E3BE: 80 F1                        BRA     MVNO_LP         ;Branch back until length is zero
   825                        ;
   826                        ;Move memory block last byte to first byte avoids overwrite in source/target overlap
   827 00:E3C0: A6 BD        RIGHT           LDX     LENH            ;Get the length hi byte count
   828 00:E3C2: 18                           CLC                     ;Clear carry flag for add
   829 00:E3C3: 8A                           TXA                     ;Xfer High page to A reg
   830 00:E3C4: 65 B9                        ADC     SRCH            ;Add in source hi byte
   831 00:E3C6: 85 B9                        STA     SRCH            ;Store in source hi byte
   832 00:E3C8: 18                           CLC                     ;Clear carry for add
   833 00:E3C9: 8A                           TXA                     ;Xfer High page to A reg
   834 00:E3CA: 65 BB                        ADC     TGTH            ;Add to target hi byte
   835 00:E3CC: 85 BB                        STA     TGTH            ;Store to target hi byte
   836 00:E3CE: E8                           INX                     ;Increment high page value for use below in loop
   837 00:E3CF: A4 BC                        LDY     LENL            ;Get length lo byte
   838 00:E3D1: F0 0E                        BEQ     MVPG            ;If zero no partial page to move
   839 00:E3D3: 88                           DEY                     ;Else, decrement page byte index
   840 00:E3D4: F0 07                        BEQ     MVPAG           ;If zero, no pages to move
   841 00:E3D6: B1 B8        MVPRT           LDA     (SRCL),Y        ;Load source data
   842 00:E3D8: 91 BA                        STA     (TGTL),Y        ;Store to target data
   843 00:E3DA: 88                           DEY                     ;Decrement index
   844 00:E3DB: D0 F9                        BNE      MVPRT          ;Branch back until partial page moved
   845 00:E3DD: B1 B8        MVPAG           LDA     (SRCL),Y        ;Load source data
   846 00:E3DF: 91 BA                        STA     (TGTL),Y        ;Store to target data
   847 00:E3E1: 88           MVPG            DEY                     ;Decrement page count
   848 00:E3E2: C6 B9                        DEC     SRCH            ;Decrement source hi page
   849 00:E3E4: C6 BB                        DEC     TGTH            ;Decrement target hi page
   850 00:E3E6: CA                           DEX                     ;Decrement page count
   851 00:E3E7: D0 ED                        BNE     MVPRT           ;Loop back until all pages moved
   852 00:E3E9: 60           QUITMV          RTS                     ;Return to caller
   853                        ;
   854                        ;Xfer byte write code to RAM for execution
  Fri May 14 2021 10:56                                                                                                    Page 20


   855 00:E3EA: A2 15        XFER_BYTE_WRT   LDX     #BYTE_WRE-BYTE_WRS+1 ;Get length of byte write code
   856 00:E3EC: BD F4 E3     BYTE_XFER       LDA     BYTE_WRS-1,X    ;Get code
   857 00:E3EF: 95 87                        STA     BURN_BYTE-1,X   ;Write code to RAM
   858 00:E3F1: CA                           DEX                     ;Decrement index
   859 00:E3F2: D0 F8                        BNE     BYTE_XFER       ;Loop back until done
   860 00:E3F4: 60                           RTS                     ;Return to caller
   861                        ;
   862 00:E3F5: 78           BYTE_WRS        SEI                     ;Disable interrupts
   863 00:E3F6: B2 B8                        LDA     (SRCL)          ;Get source byte
   864 00:E3F8: 92 BA                        STA     (TGTL)          ;Write to target byte
   865 00:E3FA: B2 BA                        LDA     (TGTL)          ;Read target byte (EEPROM)
   866 00:E3FC: 29 40                        AND     #%01000000      ;Mask off bit 6 - toggle bit
   867 00:E3FE: 85 C4        BYTE_WLP        STA     TEMP3           ;Store in Temp location
   868 00:E400: B2 BA                        LDA     (TGTL)          ;Read target byte again (EEPROM)
   869 00:E402: 29 40                        AND     #%01000000      ;Mask off bit 6 - toggle bit
   870 00:E404: C5 C4                        CMP     TEMP3           ;Compare to last read (toggles if write mode)
   871 00:E406: D0 F6                        BNE     BYTE_WLP        ;Branch back if not done
   872 00:E408: 58                           CLI                     ;Re-enable interrupts
   873 00:E409: 60           BYTE_WRE        RTS                     ;Return to caller
   874                        ;
   875                        ;[D] HEX/TEXT DUMP command:
   876                        ; Display in HEX followed by TEXT, the contents of 256 consecutive memory addresses
   877 00:E40A: F7 C5        MDUMP           SMB7    CMDFLAG         ;Set bit7 of command flag
   878 00:E40C: 20 17 E1                     JSR     SETUP           ;Request HEX address input from terminal
   879 00:E40F: D0 08                        BNE     LINED           ;Branch if new address entered (Z flag updated)
   880 00:E411: A5 B2                        LDA     TEMP1L          ;Else, point to next consecutive memory page
   881 00:E413: 85 B0                        STA     INDEXL          ;address saved during last memory dump
   882 00:E415: A5 B3                        LDA     TEMP1H          ;Xfer high byte of address
   883 00:E417: 85 B1                        STA     INDEXH          ;Save in pointer
   884 00:E419: 20 64 E4     LINED           JSR     DMPGR           ;Send address offsets to terminal
   885 00:E41C: 20 0A E2                     JSR     GLINE           ;Send horizontal line to terminal
   886 00:E41F: 20 FD E1                     JSR     CROUT           ;Send CR,LF to terminal
   887 00:E422: A2 10                        LDX     #$10            ;Set line count for 16 rows
   888 00:E424: 20 EA E1     DLINE           JSR     SPC4            ;Send 4 Spaces to terminal
   889 00:E427: 20 31 E2                     JSR     PRINDEX         ;Print INDEX value
   890 00:E42A: 20 ED E1                     JSR     SPC2            ;Send 2 Spaces to terminal
   891 00:E42D: A0 00                        LDY     #$00            ;Initialize line byte counter
   892 00:E42F: 20 87 E5     GETBYT          JSR     SENGBYT         ;Use Search Engine Get Byte (excludes I/O)
   893 00:E432: 99 40 03                     STA     SRCHBUFF,Y      ;Save in Search buffer (16 bytes)
   894 00:E435: 20 22 E2                     JSR     PRBYTE          ;Display byte as a HEX value
   895 00:E438: 20 F0 E1                     JSR     SPC             ;Send Space to terminal
   896 00:E43B: 20 CB E1                     JSR     INCINDEX        ;Increment Index to next byte location
   897 00:E43E: C8                           INY                     ;Increment index
   898 00:E43F: C0 10                        CPY     #$10            ;Check for all 16
   899 00:E441: D0 EC                        BNE     GETBYT          ;Loop back until 16 bytes have been displayed
   900 00:E443: 20 F0 E1                     JSR     SPC             ;Send a space
   901 00:E446: A0 00                        LDY     #$00            ;Reset index for SRCHBUFF
   902 00:E448: B9 40 03     GETBYT2         LDA     SRCHBUFF,Y      ;Get buffered line (16 bytes)
   903 00:E44B: 20 15 E2                     JSR     PRASC           ;Print ASCII character
   904 00:E44E: C8                           INY                     ;Increment index to next byte
   905 00:E44F: C0 10                        CPY     #$10            ;Check for 16 bytes
   906 00:E451: D0 F5                        BNE     GETBYT2         ;Loop back until 16 bytes have been displayed
   907 00:E453: 20 FD E1                     JSR     CROUT           ;Else, send CR,LF to terminal
   908 00:E456: A5 B0                        LDA     INDEXL          ;Get current index low
   909 00:E458: 85 B2                        STA     TEMP1L          ;Save to temp1 low
   910 00:E45A: A5 B1                        LDA     INDEXH          ;Get current index high
   911 00:E45C: 85 B3                        STA     TEMP1H          ;Save to temp1 high
   912 00:E45E: CA                           DEX                     ;Decrement line count
   913 00:E45F: D0 C3                        BNE     DLINE           ;Branch back until all 16 done
   914 00:E461: 20 0A E2                     JSR     GLINE           ;Send horizontal line to terminal
   915                        ;
   916                        ;DMPGR subroutine: Send address offsets to terminal
   917 00:E464: A9 02        DMPGR           LDA     #$02            ;Get msg for "addr:" to terminal
  Fri May 14 2021 10:56                                                                                                    Page 21


   918 00:E466: 20 FC E0                     JSR     PROMPT          ;Send to terminal
   919 00:E469: 20 ED E1                     JSR     SPC2            ;Add two additional spaces
   920 00:E46C: A2 00                        LDX     #$00            ;Zero index count
   921 00:E46E: 8A           MDLOOP          TXA                     ;Send "00" thru "0F", separated by 1 Space, to terminal
   922 00:E46F: 20 22 E2                     JSR     PRBYTE          ;Print byte value
   923 00:E472: 20 F0 E1                     JSR     SPC             ;Add a space
   924 00:E475: E8                           INX                     ;Increment the count
   925 00:E476: E0 10                        CPX     #$10            ;Check for 16
   926 00:E478: D0 F4                        BNE     MDLOOP          ;Loop back until done
   927                        ;
   928                        ;Print the ASCII text header "0123456789ABCDEF"
   929 00:E47A: 20 F0 E1                     JSR     SPC             ;Send a space
   930 00:E47D: A2 00                        LDX     #$00            ;Zero X reg for "0"
   931 00:E47F: 8A           MTLOOP          TXA                     ;Xfer to A reg
   932 00:E480: 20 A5 E0                     JSR     BIN2ASC         ;Convert Byte to two ASCII digits
   933 00:E483: 98                           TYA                     ;Xfer the low nibble character to A reg
   934 00:E484: 20 3C FF                     JSR     B_CHROUT        ;Send least significant HEX to terminal
   935 00:E487: E8                           INX                     ;Increment to next HEX character
   936 00:E488: E0 10                        CPX     #$10            ;Check for 16
   937 00:E48A: D0 F3                        BNE     MTLOOP          ;Branch back till done
   938 00:E48C: 4C FD E1                     JMP     CROUT           ;Do a CR/LF and return
   939                        ;
   940                        ;[E] Examine/Edit command: Display in HEX then change the contents of a specified memory address
   941 00:E48F: 20 17 E1     CHANGE          JSR     SETUP           ;Request HEX address input from terminal
   942 00:E492: A5 B1        CHNG_LP         LDA     INDEXH          ;Test high byte address for RAM (less than $80)
   943 00:E494: 30 1E                        BMI     NO_RAM          ;Address not in RAM
   944 00:E496: 20 ED E1                     JSR     SPC2            ;Send 2 spaces
   945 00:E499: B2 B0                        LDA     (INDEXL)        ;Read specified address
   946 00:E49B: 20 22 E2                     JSR     PRBYTE          ;Display HEX value read
   947 00:E49E: 20 E2 E1                     JSR     BSOUT3T         ;Send 3 Backspaces
   948 00:E4A1: 20 2F E1                     JSR     HEXIN2          ;Get input, result in A reg
   949 00:E4A4: 92 B0                        STA     (INDEXL)        ;Save entered value at Index pointer
   950 00:E4A6: D2 B0                        CMP     (INDEXL)        ;Compare to ensure a match
   951 00:E4A8: F0 05                        BEQ     CHOK            ;Branch if compare is good
   952 00:E4AA: A9 3F                        LDA     #$3F            ;Get "?" for bad compare
   953 00:E4AC: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
   954 00:E4AF: 20 CB E1     CHOK            JSR     INCINDEX        ;Increment Index
   955 00:E4B2: 80 DE                        BRA     CHNG_LP         ;Loop to continue command
   956 00:E4B4: A9 2C        NO_RAM          LDA     #$2C            ;Get address range message
   957 00:E4B6: 20 FC E0                     JSR     PROMPT          ;Send to console
   958 00:E4B9: A9 2E                        LDA     #$2E            ;Get RAM message
   959 00:E4BB: 20 FC E0                     JSR     PROMPT          ;Send to console
   960 00:E4BE: 80 CF                        BRA     CHANGE          ;Branch back and try again
   961                        ;
   962                        ;[G] GO command: Begin executing program code at a specified address.
   963                        ; Prompts the user for a start address, places it in COMLO/COMHI. If no address entered,
   964                        ; uses default address at COMLO/COMHI. Loads the A,X,Y,P registers from presets and does
   965                        ; a JSR to the routine. Upon return, registers are saved back to presets for display later.
   966                        ; Also saves the stack pointer and status register upon return.
   967                        ; Note: Stack pointer is not changed due to IRQ service routines.
   968 00:E4C0: F7 C5        GO              SMB7    CMDFLAG         ;Set bit7 of command flag
   969 00:E4C2: 20 17 E1                     JSR     SETUP           ;Get HEX address (A/Y regs hold 16-bit value)
   970 00:E4C5: F0 04                        BEQ     EXEC_GO         ;If not, setup REGs and execute (Z flag updated)
   971 00:E4C7: 85 AE                        STA     COMLO           ;Save entered address to pointer low byte
   972 00:E4C9: 84 AF                        STY     COMHI           ;Save entered address to pointer hi byte
   973                        ;
   974                        ;Preload all 65C02 MPU registers from Monitor's preset/result variables
   975 00:E4CB: A5 DA        EXEC_GO         LDA     PREG            ;Load processor status register preset
   976 00:E4CD: 48                           PHA                     ;Push it to the stack
   977 00:E4CE: A5 DE                        LDA     AREG            ;Load A-Reg preset
   978 00:E4D0: A6 DD                        LDX     XREG            ;Load X-Reg preset
   979 00:E4D2: A4 DC                        LDY     YREG            ;Load Y-Reg preset
   980 00:E4D4: 28                           PLP                     ;Pull the processor status register
  Fri May 14 2021 10:56                                                                                                    Page 22


   981                        ;
   982                        ;Call user program code as a subroutine
   983 00:E4D5: 20 E7 E4                     JSR     DOCOM           ;Execute code at specified address
   984                        ;
   985                        ;Store all 65C02 MPU registers to Monitor's preset/result variables: store results
   986 00:E4D8: 08                           PHP                     ;Save the processor status register to the stack
   987 00:E4D9: 85 DE                        STA     AREG            ;Store A-Reg result
   988 00:E4DB: 86 DD                        STX     XREG            ;Store X-Reg result
   989 00:E4DD: 84 DC                        STY     YREG            ;Store Y-Reg result
   990 00:E4DF: 68                           PLA                     ;Get the processor status register
   991 00:E4E0: 85 DA                        STA     PREG            ;Store the result
   992 00:E4E2: BA                           TSX                     ;Xfer stack pointer to X-reg
   993 00:E4E3: 86 DB                        STX     SREG            ;Store the result
   994 00:E4E5: D8                           CLD                     ;Clear BCD mode in case of sloppy user code ;-)
   995 00:E4E6: 60           TXT_EXT         RTS                     ;Return to caller
   996 00:E4E7: 6C AE 00     DOCOM           JMP     (COMLO)         ;Execute the command
   997                        ;
   998                        ;[T] LOCATE TEXT STRING command: search memory for an entered text string
   999                        ;Memory range scanned is $0800 through $FFFF (setup before SENGINE subroutine is invoked)
  1000                        ;SRCHTXT subroutine: request 1 - 16 character text string from terminal, followed by Return
  1001                        ;[ESCAPE] aborts, [BACKSPACE] erases last keystroke. String will be stored in SRCHBUFF
  1002 00:E4EA: A9 08        SRCHTXT         LDA     #$08            ;Get msg " find text:"
  1003 00:E4EC: 20 FC E0                     JSR     PROMPT          ;Send to terminal
  1004 00:E4EF: A2 00                        LDX     #$00            ;Initialize index/byte counter
  1005 00:E4F1: 20 39 FF     STLOOP          JSR     B_CHRIN         ;Get input from terminal
  1006 00:E4F4: C9 0D                        CMP     #$0D            ;Check for C/R
  1007 00:E4F6: F0 3F                        BEQ     SRCHRDY1        ;Branch to search engine
  1008 00:E4F8: C9 1B                        CMP     #$1B            ;Check for ESC
  1009 00:E4FA: F0 EA                        BEQ     TXT_EXT         ;Exit to borrowed RTS
  1010 00:E4FC: C9 08                        CMP     #$08            ;Check for B/S
  1011 00:E4FE: D0 09                        BNE     STBRA           ;If not, store character into buffer
  1012 00:E500: 8A                           TXA                     ;Xfer count to A reg
  1013 00:E501: F0 EE                        BEQ     STLOOP          ;Branch to input if zero
  1014 00:E503: 20 D7 E1                     JSR     BSOUT           ;Else, send B/S to terminal
  1015 00:E506: CA                           DEX                     ;Decrement index/byte counter
  1016 00:E507: 80 E8                        BRA     STLOOP          ;Branch back and continue
  1017 00:E509: 9D 40 03     STBRA           STA     SRCHBUFF,X      ;Store character in buffer location
  1018 00:E50C: 20 3C FF                     JSR     B_CHROUT        ;Send character to terminal
  1019 00:E50F: E8                           INX                     ;Increment counter
  1020 00:E510: E0 10                        CPX     #$10            ;Check count for 16
  1021 00:E512: D0 DD                        BNE     STLOOP          ;Loop back for another character
  1022 00:E514: A9 08                        LDA     #$08            ;Get start address for $0800
  1023 00:E516: 80 1F                        BRA     SRCHRDY1        ;Branch to search engine
  1024                        ;
  1025                        ;[H] LOCATE BYTE STRING command: Search memory for an entered byte string. Memory range
  1026                        ; scanned is $0400 through $FFFF. SRCHBYT subroutine: request 0 - 16 byte string from
  1027                        ; terminal, byte followed by [RETURN]. [ESCAPE] aborts. HEX data will be stored in SRCHBUFF.
  1028                        ; minor update from Mike Barry, saves a byte.
  1029 00:E518: F7 C5        SRCHBYT         SMB7    CMDFLAG         ;Set bit7 of command flag
  1030 00:E51A: A9 09                        LDA     #$09            ;Get msg " find bin:"
  1031 00:E51C: 20 FC E0                     JSR     PROMPT          ;Send to terminal
  1032 00:E51F: A2 00                        LDX     #$00            ;Initialize index
  1033 00:E521: DA           SBLOOP          PHX                     ;Save index on stack
  1034 00:E522: 20 2F E1                     JSR     HEXIN2          ;Request HEX byte
  1035 00:E525: 20 F0 E1                     JSR     SPC             ;Send space to terminal
  1036 00:E528: FA                           PLX                     ;Restore index from stack
  1037 00:E529: A4 BE                        LDY     BUFIDX          ;Get # of characters entered
  1038 00:E52B: F0 08                        BEQ     SRCHRDY         ;Branch if no characters
  1039 00:E52D: 9D 40 03                     STA     SRCHBUFF,X      ;Else, store in buffer
  1040 00:E530: E8                           INX                     ;Increment index
  1041 00:E531: E0 10                        CPX     #$10            ;Check for 16 (max)
  1042 00:E533: D0 EC                        BNE     SBLOOP          ;Loop back until done/full
  1043 00:E535: A9 04        SRCHRDY         LDA     #$04            ;Get start address for $0400
  Fri May 14 2021 10:56                                                                                                    Page 23


  1044 00:E537: 85 B1        SRCHRDY1        STA     INDEXH          ;Store to Index high byte
  1045 00:E539: 64 B0                        STZ     INDEXL          ;Zero Index low byte ($XX00)
  1046 00:E53B: 86 C0                        STX     IDX             ;Save input character count
  1047 00:E53D: 8A                           TXA                     ;Check buffer count (for zero)
  1048 00:E53E: F0 58                        BEQ     NOWRAP          ;Exit if no bytes in buffer
  1049                        ;
  1050                        ;SENGINE subroutine: Scan memory range $XX00 through $FFFF for exact match to string contained
  1051                        ; in buffer SRCHBUFF (1 to 16 bytes/characters). Display address of first byte/character of
  1052                        ; each match found until the end of memory is reached.
  1053 00:E540: A9 0C        SENGINE         LDA     #$0C            ;Else, get msg "Searching.."
  1054 00:E542: 20 FC E0                     JSR     PROMPT          ;Send to terminal
  1055 00:E545: A2 00        SENGBR2         LDX     #$00            ;Initialize buffer index
  1056 00:E547: 20 87 E5     SENGBR3         JSR     SENGBYT         ;Get the next byte from Index pointer
  1057 00:E54A: DD 40 03                     CMP     SRCHBUFF,X      ;Compare to search buffer
  1058 00:E54D: F0 05                        BEQ     SENGBR1         ;Branch for a match
  1059 00:E54F: 20 99 E5                     JSR     SINCPTR         ;Increment pointer, test for end of memory
  1060 00:E552: 80 F1                        BRA     SENGBR2         ;Loop back to continue
  1061 00:E554: 20 99 E5     SENGBR1         JSR     SINCPTR         ;Increment pointer, test for end of memory
  1062 00:E557: E8                           INX                     ;Increment buffer index
  1063 00:E558: E4 C0                        CPX     IDX             ;Compare buffer index to address index
  1064 00:E55A: D0 EB                        BNE     SENGBR3         ;Loop back until done
  1065 00:E55C: 38                           SEC                     ;Subtract buffer index from memory pointer; Set carry
  1066 00:E55D: A5 B0                        LDA     INDEXL          ;Get current address for match lo byte
  1067 00:E55F: E5 C0                        SBC     IDX             ;Subtract from buffer index
  1068 00:E561: 85 B0                        STA     INDEXL          ;Save it back to lo address pointer
  1069 00:E563: A5 B1                        LDA     INDEXH          ;Get current address for match hi byte
  1070 00:E565: E9 00                        SBC     #$00            ;Subtract carry flag
  1071 00:E567: 85 B1                        STA     INDEXH          ;Save it back to hi address pointer
  1072 00:E569: A9 0B                        LDA     #$0B            ;Get msg "found"
  1073 00:E56B: 20 FC E0                     JSR     PROMPT          ;Send to terminal
  1074 00:E56E: A9 3A                        LDA     #':'            ;Get Ascii colon
  1075 00:E570: 20 3C FF                     JSR     B_CHROUT        ;Send to console
  1076 00:E573: 20 31 E2                     JSR     PRINDEX         ;Print Index address
  1077 00:E576: A9 0D                        LDA     #$0D            ;Get msg "(n)ext? "
  1078 00:E578: 20 FC E0                     JSR     PROMPT          ;Send to terminal
  1079 00:E57B: 20 A3 E1                     JSR     RDCHAR          ;Get input from terminal
  1080 00:E57E: C9 4E                        CMP     #$4E            ;Check for "(n)ext"
  1081 00:E580: D0 16                        BNE     NOWRAP          ;Exit if not requesting next
  1082 00:E582: 20 99 E5                     JSR     SINCPTR         ;Increment address pointer, test for end of memory
  1083 00:E585: 80 BE                        BRA     SENGBR2         ;Branch back and continue till done
  1084                        ;
  1085                        ;Search Engine GetByte routine: This routine gets the byte value from the current Index pointer
  1086                        ; location. It also checks the Index location FIRST. The I/O page is excluded from the actual data
  1087                        ; search to prevent corrupting any I/O devices which are sensitive to any READ operations outside
  1088                        ; the BIOS which supports it. An example is the NXP UART family, of which the SCC2691 is used here.
  1089                        ; Current I/O Page Range is $FE00 - $FE9F
  1090                        ; NOTE: $FEA0 - $FEFF used for vector/config data - allows searching here
  1091 00:E587: A5 B1        SENGBYT         LDA     INDEXH          ;Get High byte address for current Index
  1092 00:E589: C9 FE                        CMP     #$FE            ;Check for Base I/O page
  1093 00:E58B: F0 03                        BEQ     CHK_UPR         ;If yes, check for I/O range
  1094 00:E58D: B2 B0        SENRTBYT        LDA     (INDEXL)        ;Else Get byte from current pointer
  1095 00:E58F: 60                           RTS                     ;Return to caller
  1096 00:E590: A5 B0        CHK_UPR         LDA     INDEXL          ;Get Low byte address for current Index
  1097 00:E592: C9 A0                        CMP     #$A0            ;Check for end of I/O addresses
  1098 00:E594: B0 F7                        BCS     SENRTBYT        ;Return ROM data if range is $FEA0 or higher
  1099 00:E596: A9 FE                        LDA     #$FE            ;Get $FE as seed byte instead of I/O device read
  1100 00:E598: 60           NOWRAP          RTS                     ;Return to caller
  1101                        ;
  1102                        ;Increment memory address pointer. If pointer high byte = 00 (end of searchable ROM memory),
  1103                        ; send "not found" to terminal then return to Monitor
  1104 00:E599: 20 CB E1     SINCPTR         JSR     INCINDEX        ;Increment Index pointer
  1105 00:E59C: A5 B1                        LDA     INDEXH          ;Check for wrap to $0000
  1106 00:E59E: D0 F8                        BNE     NOWRAP          ;If not, return
  Fri May 14 2021 10:56                                                                                                    Page 24


  1107 00:E5A0: 68                           PLA                     ;Else, Pull return address from stack
  1108 00:E5A1: 68                           PLA                     ;and exit with msg
  1109 00:E5A2: A9 0A                        LDA     #$0A            ;Get msg "not found"
  1110 00:E5A4: 4C FC E0                     JMP     PROMPT          ;Send msg to terminal and return
  1111                        ;
  1112                        ;[I] command: TEXT ENTRY enter ASCII text beginning at a specified address
  1113 00:E5A7: 20 17 E1     TEXT            JSR     SETUP           ;Send "I" command, handle setup
  1114 00:E5AA: 20 FD E1     EDJMP1          JSR     CROUT           ;Send CR,LF to terminal
  1115 00:E5AD: 85 B4                        STA     TEMP2L          ;Save current edit address
  1116 00:E5AF: 84 B5                        STY     TEMP2H          ;Save high byte
  1117 00:E5B1: 20 39 FF     EDJMP2          JSR     B_CHRIN         ;Request a keystroke from terminal
  1118 00:E5B4: C9 1B                        CMP     #$1B            ;Check for end text entry
  1119 00:E5B6: F0 3C                        BEQ     EDITDUN         ;Branch and close out if yes
  1120 00:E5B8: C9 0D                        CMP     #$0D            ;Else, check for Return key
  1121 00:E5BA: D0 12                        BNE     ENOTRET         ;Branch if not
  1122 00:E5BC: 92 B0                        STA     (INDEXL)        ;Save CR to current Index pointer
  1123 00:E5BE: 20 CB E1                     JSR     INCINDEX        ;Increment edit memory address pointer
  1124 00:E5C1: A9 0A                        LDA     #$0A            ;Get a LF character
  1125 00:E5C3: 92 B0                        STA     (INDEXL)        ;Store it in memory
  1126 00:E5C5: 20 CB E1                     JSR     INCINDEX        ;Increment edit memory address pointer
  1127 00:E5C8: A5 B0                        LDA     INDEXL          ;Get Start of next line
  1128 00:E5CA: A4 B1                        LDY     INDEXH          ;and the high byte
  1129 00:E5CC: 80 DC                        BRA     EDJMP1          ;Loop back to continue
  1130 00:E5CE: C9 08        ENOTRET         CMP     #$08            ;Check for backspace character
  1131 00:E5D0: F0 0A                        BEQ     EDBKSPC         ;Branch if yes
  1132 00:E5D2: 92 B0                        STA     (INDEXL)        ;Else, save to current Index pointer
  1133 00:E5D4: 20 3C FF                     JSR     B_CHROUT        ;Send keystroke to terminal
  1134 00:E5D7: 20 CB E1                     JSR     INCINDEX        ;Increment edit memory address pointer
  1135 00:E5DA: 80 D5                        BRA     EDJMP2          ;Loop back to EDJMP2
  1136                        ;
  1137                        ;Handle Backspace, don't allow past starting address
  1138 00:E5DC: A5 B0        EDBKSPC         LDA     INDEXL          ;Get current index low byte
  1139 00:E5DE: C5 B4                        CMP     TEMP2L          ;Compare to initial start address
  1140 00:E5E0: D0 06                        BNE     EDDOBKS         ;If not equal, perform backspace
  1141 00:E5E2: A5 B1                        LDA     INDEXH          ;Get current index high byte
  1142 00:E5E4: C5 B5                        CMP     TEMP2H          ;Compare to initial start address
  1143 00:E5E6: F0 C9                        BEQ     EDJMP2          ;If same, branch to input loop
  1144 00:E5E8: 20 D7 E1     EDDOBKS         JSR     BSOUT           ;Send backspace to terminal
  1145 00:E5EB: 20 C2 E1                     JSR     DECINDEX        ;Decrement edit memory address pointer
  1146 00:E5EE: A9 00                        LDA     #$00            ;Get a null character
  1147 00:E5F0: 92 B0                        STA     (INDEXL)        ;Store in place of character
  1148 00:E5F2: 80 BD                        BRA     EDJMP2          ;LOOP back to EDJMP2
  1149 00:E5F4: 20 FA E1     EDITDUN         JSR     CR2             ;Send 2 CR,LF to terminal
  1150 00:E5F7: 4C 31 E2                     JMP     PRINDEX         ;Print INDEX value and return
  1151                        ;
  1152                        ;**************************************************************************************************
  1153                        ;*                              Processor Register Operations                                     *
  1154                        ;**************************************************************************************************
  1155                        ;
  1156                        ;[P] Processor Status command: Display then change PS preset/result
  1157 00:E5FA: A9 0E        PRG             LDA     #$0E            ;Get MSG # for Processor Status register
  1158 00:E5FC: 80 0E                        BRA     REG_UPT         ;Finish register update
  1159                        ;
  1160                        ;[S] Stack Pointer command: Display then change SP preset/result
  1161 00:E5FE: A9 0F        SRG             LDA     #$0F            ;Get MSG # for Stack register
  1162 00:E600: 80 0A                        BRA     REG_UPT         ;Finish Register update
  1163                        ;
  1164                        ;[Y] Y-Register command: Display then change Y-reg preset/result
  1165 00:E602: A9 10        YRG             LDA     #$10            ;Get MSG # for Y Reg
  1166 00:E604: 80 06                        BRA     REG_UPT         ;Finish register update
  1167                        ;
  1168                        ;[X] X-Register command: Display then change X-reg preset/result
  1169 00:E606: A9 11        XRG             LDA     #$11            ;Get MSG # for X Reg
  Fri May 14 2021 10:56                                                                                                    Page 25


  1170 00:E608: 80 02                        BRA     REG_UPT         ;Finish register update
  1171                        ;
  1172                        ;[A] A-Register command: Display then change A-reg preset/result
  1173 00:E60A: A9 12        ARG             LDA     #$12            ;Get MSG # for A reg
  1174                        ;
  1175 00:E60C: 48           REG_UPT         PHA                     ;Save MSG # to stack
  1176 00:E60D: 48                           PHA                     ;Save MSG # to stack again
  1177 00:E60E: 20 FC E0                     JSR     PROMPT          ;Print Register message
  1178 00:E611: FA                           PLX                     ;Get Index to registers
  1179 00:E612: B5 CC                        LDA     PREG-$0E,X      ;Read Register (A,X,Y,S,P) preset/result
  1180 00:E614: 20 22 E2                     JSR     PRBYTE          ;Display HEX value of register
  1181 00:E617: 20 F0 E1                     JSR     SPC             ;Send [SPACE] to terminal
  1182 00:E61A: 20 2F E1                     JSR     HEXIN2          ;Get up to 2 HEX characters
  1183 00:E61D: FA                           PLX                     ;Get MSG # from stack
  1184 00:E61E: 95 CC                        STA     PREG-$0E,X      ;Write register (A,X,Y,S,P) preset/result
  1185 00:E620: 60           MNE_QUIT        RTS                     ;Return to caller
  1186                        ;
  1187                        ;[R] REGISTERS command: Display contents of all preset/result memory locations
  1188 00:E621: 20 3C FF     PRSTAT          JSR     B_CHROUT        ;Send "R" to terminal
  1189 00:E624: A9 13        PRSTAT1         LDA     #$13            ;Get Header msg
  1190 00:E626: 20 FC E0                     JSR     PROMPT          ;Send to terminal
  1191 00:E629: A5 D8                        LDA     PCL             ;Get PC Low byte
  1192 00:E62B: A4 D9                        LDY     PCH             ;Get PC High byte
  1193 00:E62D: 20 38 E2                     JSR     PRWORD          ;Print 16-bit word
  1194 00:E630: 20 F0 E1                     JSR     SPC             ;Send 1 space
  1195                        ;
  1196 00:E633: A2 04                        LDX     #$04            ;Set for count of 4
  1197 00:E635: B5 DA        REGPLOOP        LDA     PREG,X          ;Start with A reg variable
  1198 00:E637: 20 22 E2                     JSR     PRBYTE          ;Print it
  1199 00:E63A: 20 F0 E1                     JSR     SPC             ;Send 1 space
  1200 00:E63D: CA                           DEX                     ;Decrement count
  1201 00:E63E: D0 F5                        BNE     REGPLOOP        ;Loop back till all 4 are sent
  1202                        ;
  1203 00:E640: A5 DA                        LDA     PREG            ;Get Status register preset
  1204 00:E642: A2 08                        LDX     #$08            ;Get the index count for 8 bits
  1205 00:E644: 0A           SREG_LP         ASL     A               ;Shift bit into Carry
  1206 00:E645: 48                           PHA                     ;Save current (shifted) SR value
  1207 00:E646: A9 30                        LDA     #$30            ;Load an Ascii zero
  1208 00:E648: 69 00                        ADC     #$00            ;Add zero (with Carry)
  1209 00:E64A: 20 3C FF                     JSR     B_CHROUT        ;Print bit value (0 or 1)
  1210 00:E64D: 68                           PLA                     ;Get current (shifted) SR value
  1211 00:E64E: CA                           DEX                     ;Decrement bit count
  1212 00:E64F: D0 F3                        BNE     SREG_LP         ;Loop back until all 8 printed
  1213 00:E651: 4C FD E1                     JMP     CROUT           ;Send CR/LF and return to caller
  1214                        ;
  1215                        ;**************************************************************************************************
  1216                        ;*                              Control Key Operations (Ctrl-?)                                   *
  1217                        ;**************************************************************************************************
  1218                        ;
  1219                        ;[CTRL-A] Start Assembler:
  1220 00:E654: A9 2F        ASSEMBLER       LDA     #$2F            ;Get Intro message
  1221 00:E656: 20 FC E0                     JSR     PROMPT          ;Send to console
  1222 00:E659: A9 03                        LDA     #$03            ;Get Msg 03 -" addr:"
  1223 00:E65B: 20 1F E1                     JSR     HEX4            ;Print msg and get address
  1224                        MNE_RETRY
  1225 00:E65E: 20 FD E1                     JSR     CROUT           ;Send CR,LF to Console
  1226 00:E661: 20 31 E2                     JSR     PRINDEX         ;Send starting address to Console
  1227 00:E664: 20 EA E1                     JSR     SPC4            ;Send 4 spaces
  1228                        ;
  1229                        ; Now get an Instruction entry and put into SRCHBUFF.
  1230                        ; This allows for a full instruction line entry which is buffered. This routine also allows
  1231                        ; editing of the entry input and uses a C/R to exit to the next routine to start instruction
  1232                        ; decode.
  Fri May 14 2021 10:56                                                                                                    Page 26


  1233                        ; NOTE: SRCHBUFF is used by multiple routines, so it won't show the entered data if you leave
  1234                        ; the assembler and use the "D" (display memory) command. 
  1235                        ;
  1236 00:E667: A2 00                        LDX     #$00            ;Set input count to zero
  1237 00:E669: 20 A3 E1     MNE_LOOP        JSR     RDCHAR          ;Get input from terminal
  1238 00:E66C: C9 0D                        CMP     #$0D            ;Check for CR
  1239 00:E66E: F0 21                        BEQ     MNE_CRUNCH      ;Branch to parse routine
  1240 00:E670: C9 1B                        CMP     #$1B            ;Check for ESC
  1241 00:E672: F0 AC                        BEQ     MNE_QUIT        ;Exit to borrowed RTS
  1242 00:E674: C9 08                        CMP     #$08            ;Check for Backspace
  1243 00:E676: D0 09                        BNE     MNE_BRA         ;If not, store character into buffer
  1244 00:E678: 8A                           TXA                     ;Xfer count to A reg
  1245 00:E679: F0 EE                        BEQ     MNE_LOOP        ;Branch to input if zero
  1246 00:E67B: 20 D7 E1                     JSR     BSOUT           ;Else, send Backspace to terminal
  1247 00:E67E: CA                           DEX                     ;Decrement index/byte counter
  1248 00:E67F: 80 E8                        BRA     MNE_LOOP        ;Branch back and continue
  1249 00:E681: 9D 40 03     MNE_BRA         STA     SRCHBUFF,X      ;Store character in buffer location
  1250 00:E684: 20 3C FF                     JSR     B_CHROUT        ;Send character to terminal
  1251 00:E687: E8                           INX                     ;Increment counter
  1252 00:E688: E0 0F                        CPX     #$0F            ;Check count for 15
  1253 00:E68A: D0 DD                        BNE     MNE_LOOP        ;Loop back for another character
  1254 00:E68C: 20 D2 E1                     JSR     BEEP            ;Send Beep to Console (buffer overflow)
  1255 00:E68F: 80 CD                        BRA     MNE_RETRY       ;Branch back and try again
  1256                        ;
  1257                        MNE_CRUNCH
  1258 00:E691: 8E 4F 03                     STX     SRCHBUFF+15     ;Save Input count at end of buffer
  1259                        ;
  1260                        ; Just for test purposes, we're storing the entered line at $0700
  1261                        ;
  1262 00:E694: 8E 0F 07                     STX     $070F           ;Save Input buffer count
  1263 00:E697: A2 0E                        LDX     #$0E            ;Set count of 14
  1264 00:E699: BD 40 03     MNE_XFER        LDA     SRCHBUFF,X      ;Load input buffer
  1265 00:E69C: 9D 00 07                     STA     $0700,x         ;Save it to a temp area
  1266 00:E69F: CA                           DEX                     ;Decrement count
  1267 00:E6A0: 10 F7                        BPL     MNE_XFER        ;Branch back until done
  1268                        ;
  1269                        ;                BRK                     ;Debug entry
  1270                        ;
  1271 00:E6A2: 4C 00 08                     JMP     $0800           ;Jump to RAM development code
  1272                        ;
  1273                        ;[CTRL-B] Boot DOS/65 ROM Version:
  1274 00:E6A5: 4C 80 D6     EHBASIC         JMP     DOS_65          ;Start Address for DOS/65 ROM
  1275                        ;
  1276                        ;[CTRL-D] Disassembler: Table-Driven Disassembler. Supports ALL W65C02 Opcodes and Address modes.
  1277 00:E6A8: A9 29        DISASSEMBLER    LDA     #$29            ;Intro Message
  1278 00:E6AA: 20 FC E0                     JSR     PROMPT          ;Send to terminal
  1279 00:E6AD: A9 03                        LDA     #$03            ;Msg 03 -" addr:"
  1280 00:E6AF: 20 1F E1                     JSR     HEX4            ;Print msg and get address
  1281 00:E6B2: 20 FD E1                     JSR     CROUT           ;Send CR,LF to terminal
  1282 00:E6B5: A2 16        RPT_LIST        LDX     #$16            ;Set list count to 22
  1283 00:E6B7: DA           DIS_LOOP        PHX                     ;Push count to stack
  1284 00:E6B8: 20 D8 E6                     JSR     DIS_LINE        ;Disassemble 1 instruction
  1285 00:E6BB: FA                           PLX                     ;Pull count from stack
  1286 00:E6BC: CA                           DEX                     ;Decrement count
  1287 00:E6BD: D0 F8                        BNE     DIS_LOOP        ;Loop back till list count is zero
  1288 00:E6BF: 20 39 FF     LST_LOOP        JSR     B_CHRIN         ;Get input from terminal
  1289 00:E6C2: C9 0D                        CMP     #$0D            ;Check for Return key
  1290 00:E6C4: F0 EF                        BEQ     RPT_LIST        ;If yes, repeat list
  1291 00:E6C6: C9 1B                        CMP     #$1B            ;Check for Escape
  1292 00:E6C8: F0 37                        BEQ     EXT_LIST        ;If yes, exit
  1293 00:E6CA: C9 20                        CMP     #$20            ;Check for space
  1294 00:E6CC: F0 05                        BEQ     LIST_ONE        ;If yes, disassemble 1 line
  1295 00:E6CE: 20 D2 E1                     JSR     BEEP            ;Else, beep for error
  Fri May 14 2021 10:56                                                                                                    Page 27


  1296 00:E6D1: 80 EC                        BRA     LST_LOOP        ;Loop back again
  1297 00:E6D3: 20 D8 E6     LIST_ONE        JSR     DIS_LINE        ;Else, Disassemble one line
  1298 00:E6D6: 80 E7                        BRA     LST_LOOP        ;Branch back and continue
  1299                        ;
  1300                        ;DISASSEMBLE LINE: disassemble 1 instruction from working address
  1301 00:E6D8: 64 C3        DIS_LINE        STZ     TEMP2           ;Clear all flag bits
  1302 00:E6DA: 20 31 E2                     JSR     PRINDEX         ;Print working address
  1303 00:E6DD: 20 ED E1                     JSR     SPC2            ;Send 2 spaces to terminal
  1304 00:E6E0: B2 B0                        LDA     (INDEXL)        ;Read opcode from working memory pointer
  1305 00:E6E2: 85 C6                        STA     OPXMDM          ;Save opcode
  1306 00:E6E4: 20 49 E7                     JSR     PRB_SPC2        ;Print byte, 2 spaces
  1307 00:E6E7: 4A                           LSR     A               ;Divide by 2 / shift low order bit into carry flag
  1308 00:E6E8: AA                           TAX                     ;Xfer Opcode /2 to X reg
  1309 00:E6E9: BD 5D F2                     LDA     HDLR_IDX,X      ;Get Pointer to handler table
  1310 00:E6EC: B0 04                        BCS     USE_RGHT        ;If carry set use low nibble (odd)
  1311 00:E6EE: 4A                           LSR     A               ;Else shift upper nibble to lower nibble (even)
  1312 00:E6EF: 4A                           LSR     A
  1313 00:E6F0: 4A                           LSR     A
  1314 00:E6F1: 4A                           LSR     A
  1315 00:E6F2: 29 0F        USE_RGHT        AND     #$0F            ;Mask off high nibble
  1316 00:E6F4: 0A                           ASL     A               ;Multiply by 2 for index
  1317 00:E6F5: AA                           TAX                     ;Use handler pointer to index handler table
  1318 00:E6F6: 20 02 E7                     JSR     DODISL          ;Call disassembler handler
  1319 00:E6F9: 20 FD E1                     JSR     CROUT           ;Send CR,LF to terminal
  1320                        ;
  1321                        ;INCNDX routine: increment working address pointer then read it
  1322 00:E6FC: 20 CB E1     INCNDX          JSR     INCINDEX        ;Increment working address pointer
  1323 00:E6FF: B2 B0                        LDA     (INDEXL)        ;Read from working memory address
  1324 00:E701: 60           EXT_LIST        RTS                     ;Done, return to caller/exit
  1325                        ;
  1326 00:E702: 7C DD F2     DODISL          JMP     (HDLR_TAB,X)    ;Execute address mode handler
  1327                        ;
  1328                        ;THREE BYTE routine: display operand bytes then mnemonic for three-byte instruction
  1329                        ; TWO BYTE routine: display operand byte then mnemonic for two-byte instruction
  1330 00:E705: F7 C3        TRI_BYTE        SMB7    TEMP2           ;Set Flag bit for 3-byte instruction
  1331 00:E707: 20 46 E7     TWO_BYTE        JSR     GET_NEXT        ;Read, display operand byte
  1332 00:E70A: 85 C8                        STA     CRCLO           ;Save operand byte in CRCLO
  1333 00:E70C: 7F C3 0A                     BBR7    TEMP2,2BYTSPC   ;Branch for 2-byte is clear
  1334 00:E70F: 20 46 E7                     JSR     GET_NEXT        ;Read, display operand high byte
  1335 00:E712: 85 C7                        STA     CRCHI           ;Save operand high byte in CRCHI
  1336 00:E714: 80 06                        BRA     3BYTSPC         ;Send 2 spaces, send Mnemonic, return
  1337                        ;
  1338                        ;IMPLIED disassembler handler: single byte instructions: implied mode
  1339                        ; (note: ACC_MODE handler calls this)
  1340 00:E716: 20 EA E1     IMPLIED         JSR     SPC4            ;Send 4 spaces
  1341 00:E719: 20 EA E1     2BYTSPC         JSR     SPC4            ;Send 4 spaces
  1342 00:E71C: 20 ED E1     3BYTSPC         JSR     SPC2            ;Send 2 spaces
  1343                        ;
  1344                        ;PRT_MNEM subroutine: send 3 character mnemonic to terminal
  1345                        ; Mnemonic indexed by opcode byte. Sends "???" if byte is not a valid opcode
  1346 00:E71F: A4 C6        PRT_MNEM        LDY     OPXMDM          ;Get current Opcode as index
  1347 00:E721: BE FD F2                     LDX     MNE_PTAB,Y      ;Get opcode pointer from table
  1348 00:E724: BD FD F3                     LDA     DIS_NMEM,X      ;Get left byte
  1349 00:E727: 85 CA                        STA     PTRL            ;Store it to pointer
  1350 00:E729: BD FE F3                     LDA     DIS_NMEM+1,X    ;Get right byte
  1351 00:E72C: 85 CB                        STA     PTRH            ;Store it to pointer
  1352 00:E72E: A2 03                        LDX     #$03            ;Set count for 3 characters
  1353 00:E730: A9 00        NEXT_NME        LDA     #$00            ;Zero A reg
  1354 00:E732: A0 05                        LDY     #$05            ;Set count for 5 bits per character
  1355 00:E734: 06 CB        LOOP_NME        ASL     PTRH            ;Shift right byte into carry
  1356 00:E736: 26 CA                        ROL     PTRL            ;Rotate left byte into A reg
  1357 00:E738: 2A                           ROL     A               ;Rotate into A reg
  1358 00:E739: 88                           DEY                     ;Decrement bit count
  Fri May 14 2021 10:56                                                                                                    Page 28


  1359 00:E73A: D0 F8                        BNE     LOOP_NME        ;Loop back till 5 bits in A reg
  1360 00:E73C: 69 3F                        ADC     #$3F            ;Add $3F to convert to Ascii
  1361 00:E73E: 20 3C FF                     JSR     B_CHROUT        ;Send the character to terminal
  1362 00:E741: CA                           DEX                     ;Decrement character count
  1363 00:E742: D0 EC                        BNE     NEXT_NME        ;Loop back till 3 characters sent
  1364 00:E744: 80 06                        BRA     BR_SPC2         ;Send 2 spaces to terminal, return
  1365                        ;
  1366                        ;GET_NEXT subroutine: increment/read working address
  1367                        ; Display byte, send 2 spaces to terminal (displays operand byte(s))
  1368 00:E746: 20 FC E6     GET_NEXT        JSR     INCNDX          ;Increment working index
  1369 00:E749: 20 22 E2     PRB_SPC2        JSR     PRBYTE          ;Display Byte from working index
  1370 00:E74C: 4C ED E1     BR_SPC2         JMP     SPC2            ;Send 2 spaces to terminal and return
  1371                        ;
  1372                        ;Disassembler handlers:
  1373                        ;
  1374                        ;LF_BRKT subroutine: send "(" to terminal
  1375 00:E74F: A9 28        LF_BRKT         LDA     #$28            ;Get "("
  1376 00:E751: 80 0F                        BRA     BR_COUT         ;Send to terminal and return
  1377                        ;
  1378                        ;ZP_IMMEDIATE: two byte instructions: zero-page immediate mode
  1379 00:E753: 20 07 E7     ZP_IMED         JSR     TWO_BYTE        ;Display operand byte, then mnemonic
  1380 00:E756: A9 23                        LDA     #$23            ;Get "#" character
  1381 00:E758: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1382 00:E75B: 80 1B                        BRA     PRT1_OP         ;Display operand byte again, return
  1383                        ;
  1384                        ;ACC_MODE: single byte A reg mode instructions: implied mode
  1385 00:E75D: 20 16 E7     ACC_MODE        JSR     IMPLIED         ;Send 10 spaces to terminal then display mnemonic
  1386 00:E760: A9 41                        LDA     #$41            ;Get "A" character
  1387 00:E762: 4C 3C FF     BR_COUT         JMP     B_CHROUT        ;Send it and return
  1388                        ;
  1389                        ;ABSOLUTE: three byte instructions: absolute mode
  1390 00:E765: 20 05 E7     ABSOLUTE        JSR     TRI_BYTE        ;Display operand bytes, then mnemonic
  1391                        ;
  1392                        ;Print 2 Operands: display operand bytes of a three-byte instruction
  1393 00:E768: 20 F5 E1     PRT2_OP         JSR     DOLLAR          ;Send "$" to terminal
  1394 00:E76B: A5 C7                        LDA     CRCHI           ;Load operand high byte
  1395 00:E76D: 20 22 E2                     JSR     PRBYTE          ;Send to terminal
  1396 00:E770: A5 C8        BR_PRBTE        LDA     CRCLO           ;Load operand low byte
  1397 00:E772: 4C 22 E2                     JMP     PRBYTE          ;Send to terminal and return
  1398                        ;
  1399                        ;ZP_ABS: two byte instructions: zero-page absolute
  1400 00:E775: 20 07 E7     ZP_ABS          JSR     TWO_BYTE        ;Display operand byte, then mnemonic
  1401                        ;
  1402                        ;Print 1 Operand byte: display operand byte of a two-byte instruction
  1403 00:E778: 20 F5 E1     PRT1_OP         JSR     DOLLAR          ;Send "$" to terminal
  1404 00:E77B: 80 F3                        BRA     BR_PRBTE        ;Branch to complete
  1405                        ;
  1406                        ;INDIRECT: two or three byte instructions: indirect modes
  1407 00:E77D: A5 C6        INDIRECT        LDA     OPXMDM          ;Read saved opcode byte
  1408 00:E77F: C9 6C                        CMP     #$6C            ;Check for JMP(INDIRECT)
  1409 00:E781: D0 13                        BNE     ZP_IND          ;Branch if not
  1410                        ;
  1411 00:E783: 20 05 E7                     JSR     TRI_BYTE        ;Display operand bytes, then mnemonic
  1412 00:E786: 20 4F E7                     JSR     LF_BRKT         ;Send "(" to terminal
  1413 00:E789: 20 68 E7                     JSR     PRT2_OP         ;Display operand bytes again
  1414 00:E78C: 80 0B                        BRA     RT_BRKT         ;Send ")" to terminal, return
  1415                        ;
  1416                        ;Following group is used multiple times, space savings
  1417 00:E78E: 20 07 E7     DSPLY3          JSR     TWO_BYTE        ;Display operand byte, then mnemonic
  1418 00:E791: 20 4F E7                     JSR     LF_BRKT         ;Send "(" to terminal
  1419 00:E794: 80 E2                        BRA     PRT1_OP         ;Display operand byte again, return
  1420                        ;
  1421                        ;this is for a two byte instruction: zero page indirect mode
  Fri May 14 2021 10:56                                                                                                    Page 29


  1422 00:E796: 20 8E E7     ZP_IND          JSR     DSPLY3          ;Do the 3 routines
  1423                        ;
  1424                        ;RT_BRKT subroutine: send ")" to terminal
  1425 00:E799: A9 29        RT_BRKT         LDA     #$29            ;Get ")"
  1426 00:E79B: 80 C5                        BRA     BR_COUT         ;Send to terminal and return
  1427                        ;
  1428                        ;ZP_ABS_X: two byte instructions: zero-page absolute indexed by X mode
  1429 00:E79D: 20 75 E7     ZP_ABS_X        JSR     ZP_ABS          ;Display operand byte, mnemonic, operand byte
  1430                        ;
  1431                        ;Print Comma,X: send ",X" to terminal
  1432 00:E7A0: A9 2C        COM_X           LDA     #$2C            ;Get ","
  1433 00:E7A2: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1434 00:E7A5: A9 58                        LDA     #$58            ;Get "X"
  1435 00:E7A7: 80 B9                        BRA     BR_COUT         ;Send to terminal, return
  1436                        ;
  1437                        ;ZP_ABS_Y: two byte instructions: zero-page absolute indexed by Y mode
  1438 00:E7A9: 20 75 E7     ZP_ABS_Y        JSR     ZP_ABS          ;Display operand byte, mnemonic, operand byte
  1439                        ;
  1440                        ;Print Comma,Y: send ",Y" to terminal
  1441 00:E7AC: A9 2C        COM_Y           LDA     #$2C            ;Get ","
  1442 00:E7AE: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1443 00:E7B1: A9 59                        LDA     #$59            ;Get "Y"
  1444 00:E7B3: 80 AD                        BRA     BR_COUT         ;Send to terminal, return
  1445                        ;
  1446                        ;ABS_Y: three byte instructions: absolute indexed by Y mode
  1447                        ;ABS_X: three byte instructions: absolute indexed by X mode
  1448 00:E7B5: E7 C3        ABS_Y           SMB6    TEMP2
  1449 00:E7B7: 20 05 E7     ABS_X           JSR     TRI_BYTE        ;Display operand bytes, then mnemonic
  1450 00:E7BA: 20 68 E7                     JSR     PRT2_OP         ;Display operand bytes again
  1451 00:E7BD: EF C3 EC                     BBS6    TEMP2,COM_Y
  1452 00:E7C0: 80 DE                        BRA     COM_X           ;Send ",X" to terminal, return
  1453                        ;
  1454                        ;ZP_IND_X: two byte instructions: zero-page indirect pre-indexed by X mode
  1455 00:E7C2: 20 8E E7     ZP_IND_X        JSR     DSPLY3          ;Do the 3 routines
  1456 00:E7C5: 20 A0 E7                     JSR     COM_X           ;Send ",X" to terminal
  1457 00:E7C8: 80 CF                        BRA     RT_BRKT         ;Send ")" to terminal, return
  1458                        ;
  1459                        ;ZP_IND_Y: two byte instructions: zero-page indirect post-indexed by Y mode
  1460 00:E7CA: 20 8E E7     ZP_IND_Y        JSR     DSPLY3          ;Do the 3 routines
  1461 00:E7CD: 20 99 E7                     JSR     RT_BRKT         ;Send ")" to terminal
  1462 00:E7D0: 80 DA                        BRA     COM_Y           ;Send ",Y" to terminal, return
  1463                        ;
  1464                        ;IND_ABS_X: three byte instruction: JMP (INDIRECT,X) 16 bit indirect
  1465 00:E7D2: 20 05 E7     IND_ABS_X       JSR     TRI_BYTE        ;Display operand bytes, then mnemonic
  1466 00:E7D5: 20 4F E7                     JSR     LF_BRKT         ;Send "(" to terminal
  1467 00:E7D8: 20 68 E7                     JSR     PRT2_OP         ;Display operand bytes again
  1468 00:E7DB: 20 A0 E7                     JSR     COM_X           ;Send ",X" to terminal
  1469 00:E7DE: 80 B9                        BRA     RT_BRKT         ;Send ")" to terminal,done w/INDABSX handler, return
  1470                        ;
  1471                        ;ZP_XMB: two byte instructions: zero page set/clear memory bit
  1472 00:E7E0: 20 41 E8     ZP_XMB          JSR     SRMB            ;Display operand/mnemonic, isolate bit selector from opcode
  1473 00:E7E3: C9 08                        CMP     #$08            ;Check if 0-7 or 8-F
  1474 00:E7E5: 90 02                        BCC     SRBIT           ;Just add $30 (0-7)
  1475 00:E7E7: E9 08                        SBC     #$08            ;Subtract $08 - convert $8-$F to $0-$7
  1476 00:E7E9: 18           SRBIT           CLC                     ;Convert bit selector value to an ASCII decimal digit
  1477 00:E7EA: 69 30                        ADC     #$30            ;Add "0" to bit selector value
  1478 00:E7EC: 20 3C FF                     JSR     B_CHROUT        ;Send digit to terminal
  1479 00:E7EF: 20 F0 E1                     JSR     SPC             ;Send a space to terminal
  1480 00:E7F2: 80 84                        BRA     PRT1_OP         ;Display operand byte again then return
  1481                        ;
  1482                        ;ZP_BBX: three byte instruction: branch on zero-page bit set/clear
  1483 00:E7F4: 20 39 E8     ZP_BBX          JSR     SRMB2           ;Display operand/mnemonic, isolate bit selector from opcode
  1484 00:E7F7: C9 08                        CMP     #$08            ;Check if $0-$7 or $8-$F
  Fri May 14 2021 10:56                                                                                                    Page 30


  1485 00:E7F9: 90 02                        BCC     SRBIT2          ;Just add $30 ($0-$7)
  1486 00:E7FB: E9 08                        SBC     #$08            ;Subtract $08 - convert $8-$F to $0-$7
  1487 00:E7FD: 20 E9 E7     SRBIT2          JSR     SRBIT           ;Convert and display bit selector digit
  1488 00:E800: A5 C7                        LDA     CRCHI           ;Move second operand to first operand position:
  1489 00:E802: 85 C8                        STA     CRCLO           ;CRCLO = branch offset
  1490 00:E804: 20 F0 E1                     JSR     SPC             ;Send a space to terminal
  1491 00:E807: 80 03                        BRA     BBX_REL         ;Display branch target address then return
  1492                        ;
  1493                        ;RELATIVE BRANCH: two byte relative branch mode BBX_REL: three byte relative branch mode
  1494                        ; Both calculate then display relative branch target address
  1495                        ;
  1496                        ; Update 12th February 2021: Fix offset page for Branch. High byte address would not
  1497                        ; update properly and could show the wrong page.
  1498 00:E809: 20 07 E7     REL_BRA         JSR     TWO_BYTE        ;Display operand byte, then mnemonic
  1499 00:E80C: 20 F5 E1     BBX_REL         JSR     DOLLAR          ;Send "$" to terminal
  1500 00:E80F: 20 CB E1                     JSR     INCINDEX        ;Increment address, ref for branch offset
  1501 00:E812: A5 C8                        LDA     CRCLO           ;Get branch operand value
  1502 00:E814: 30 0C                        BMI     BRA_MINUS       ;Check for $80 or higher (branch is + / -)
  1503 00:E816: 18                           CLC                     ;Clear carry for add
  1504 00:E817: 65 B0                        ADC     INDEXL          ;Add to Index lo
  1505 00:E819: 48                           PHA                     ;Save result to Stack
  1506 00:E81A: A5 B1                        LDA     INDEXH          ;Get Index Hi
  1507 00:E81C: 69 00                        ADC     #$00            ;Add result from Carry flag to A reg
  1508 00:E81E: A8                           TAY                     ;Xfer Hi address to Y Reg
  1509 00:E81F: 68                           PLA                     ;Get Lo Address from Stack
  1510 00:E820: 80 11                        BRA     REL_EXT         ;Print offset, cleanup, return
  1511 00:E822: 49 FF        BRA_MINUS       EOR     #$FF            ;Get 1's complement of offset
  1512 00:E824: 1A                           INC     A               ;Increment by 1
  1513 00:E825: 85 C4                        STA     TEMP3           ;Save result
  1514 00:E827: 38                           SEC                     ;Set carry for subtract
  1515 00:E828: A5 B0                        LDA     INDEXL          ;Get address Low byte
  1516 00:E82A: E5 C4                        SBC     TEMP3           ;Subtract branch offset
  1517 00:E82C: 48                           PHA                     ;Save result to Stack
  1518 00:E82D: A5 B1                        LDA     INDEXH          ;Get address High byte
  1519 00:E82F: E9 00                        SBC     #$00            ;Subtract carry flag
  1520 00:E831: A8                           TAY                     ;Xfer Hi address to Y reg
  1521 00:E832: 68                           PLA                     ;Get Lo address from Stack
  1522 00:E833: 20 38 E2     REL_EXT         JSR     PRWORD          ;Send address to terminal
  1523 00:E836: 4C C2 E1                     JMP     DECINDEX        ;Decrement working address, return
  1524                        ;
  1525                        ;SRMB2 subroutine: display 2 operand bytes, mnemonic, isolate bit selector from opcode
  1526                        ; SRMB subroutine: display 1 operand byte, mnemonic, isolate bit selector from opcode
  1527 00:E839: B2 B0        SRMB2           LDA     (INDEXL)        ;Read from working index
  1528 00:E83B: 48                           PHA                     ;Save byte to stack
  1529 00:E83C: 20 05 E7                     JSR     TRI_BYTE        ;Display operand bytes and mnemonic
  1530 00:E83F: 80 06                        BRA     SRM             ;Skip down
  1531 00:E841: B2 B0        SRMB            LDA     (INDEXL)        ;Read from working index
  1532 00:E843: 48                           PHA                     ;Save byte on STACK
  1533 00:E844: 20 07 E7                     JSR     TWO_BYTE        ;Display operand byte and mnemonic
  1534 00:E847: 20 E5 E1     SRM             JSR     BSOUT2T         ;Send 2 Backspaces
  1535 00:E84A: 68                           PLA                     ;Restore byte from stack
  1536 00:E84B: 4A                           LSR     A               ;Shift high nibble to low nibble
  1537 00:E84C: 4A                           LSR     A
  1538 00:E84D: 4A                           LSR     A
  1539 00:E84E: 4A                           LSR     A
  1540 00:E84F: 60                           RTS                     ;Done SRMB2/SRMB, return
  1541                        ;
  1542                        ;[CNTRL-E] EEPROM Edit
  1543                        ; Allows editing of a single byte location within the EEPROM starting at $8000.
  1544                        ; Note that this routines tests for target addresses at $8000 or above, but does NOT
  1545                        ; test for I/O address ranges. One should be cautious about editing the EEPROM directly
  1546                        ; to ensure it doesn't become unusable by changing things wrongly.
  1547 00:E850: A9 C3        EEDIT           LDA     #<TEMP2         ;Get address offset for TEMP2
  Fri May 14 2021 10:56                                                                                                    Page 31


  1548 00:E852: 85 B8                        STA     SRCL            ;Store in Source address Low
  1549 00:E854: 64 B9                        STZ     SRCH            ;Zero Source address High (Page Zero)
  1550                        ;
  1551                        ;Xfer byte write code to RAM for execution
  1552 00:E856: 20 EA E3                     JSR     XFER_BYTE_WRT   ;Xfer byte write code to Page Zero
  1553                        ;
  1554 00:E859: A9 2B                        LDA     #$2B            ;Get EEPROM edit msg
  1555 00:E85B: 20 FC E0     TRY_AGAIN       JSR     PROMPT          ;Send to console
  1556                        ;
  1557 00:E85E: 20 42 E2     CMP_OK2         JSR     CONTINUE        ;Prompt User for Y/N
  1558 00:E861: 20 FD E1                     JSR     CROUT           ;Send CR/LF to console
  1559                        ;
  1560 00:E864: A9 03                        LDA     #$03            ;Get " addr:" msg
  1561 00:E866: 20 1F E1                     JSR     HEX4            ;Display msg and get address
  1562                        ;
  1563                        ; Note: address in INDEXL/INDEXH and A/Y regs
  1564 00:E869: 85 BA                        STA     TGTL            ;Store in Target location Low
  1565 00:E86B: 84 BB                        STY     TGTH            ;Store in Target location High
  1566 00:E86D: C0 80                        CPY     #$80            ;Check for ROM start or higher
  1567 00:E86F: 90 1D                        BCC     NOT_ROM         ;Address is not in EEPROM
  1568                        ;
  1569 00:E871: 20 ED E1                     JSR     SPC2            ;Send 2 spaces
  1570 00:E874: B2 B0                        LDA     (INDEXL)        ;Get memory data
  1571 00:E876: 20 22 E2                     JSR     PRBYTE          ;Send to console
  1572 00:E879: 20 E2 E1                     JSR     BSOUT3T         ;Backspace 3 times
  1573 00:E87C: 20 2F E1                     JSR     HEXIN2          ;Get new data
  1574                        ;
  1575                        ; Note: new data is in A reg
  1576 00:E87F: 85 C3                        STA     TEMP2           ;Store in Temp location
  1577                        ;
  1578 00:E881: 20 88 00                     JSR     BURN_BYTE       ;Update EEPROM Data
  1579 00:E884: B2 B8                        LDA     (SRCL)          ;Get Source byte
  1580 00:E886: D2 BA                        CMP     (TGTL)          ;Compare to Target in EEPROM
  1581 00:E888: F0 D4                        BEQ     CMP_OK2         ;Branch if okay
  1582 00:E88A: A9 20                        LDA     #$20            ;Else, get error msg for failed write
  1583 00:E88C: 80 73                        BRA     PRMPTSC         ;Send to console and exit
  1584                        ;
  1585 00:E88E: A9 2C        NOT_ROM         LDA     #$2C            ;Get address range msg
  1586 00:E890: 20 FC E0                     JSR     PROMPT          ;Send to console
  1587 00:E893: A9 2D                        LDA     #$2D            ;Get EEPROM msg
  1588 00:E895: 80 C4                        BRA     TRY_AGAIN       ;Branch back and try again
  1589                        ;
  1590                        ;[CNTRL-Q] Query command:
  1591 00:E897: A9 4A        QUERY           LDA     #$4A            ;Get Query Commands Message
  1592 00:E899: 80 66                        BRA     PRMPTSC         ;Send to console and return
  1593                        ;
  1594                        ;[CNTL-T] TIME/DATE command: Sends a string to the console showing the current Date and Time
  1595                        ; Displays RTC values for Date and Time as:
  1596                        ;  Date: SUN Sep 15, 2020 Time: 12:34:56
  1597                        ;
  1598 00:E89B: A9 31        TIME            LDA     #$31            ;Get "Date: " message
  1599 00:E89D: 20 FC E0                     JSR     PROMPT          ;Send to console
  1600                        ;
  1601 00:E8A0: A5 EB                        LDA     DAY_DATE        ;Get Day and Date data
  1602 00:E8A2: 4A                           LSR     A               ;Move Day to lower 3 bits
  1603 00:E8A3: 4A                           LSR     A
  1604 00:E8A4: 4A                           LSR     A
  1605 00:E8A5: 4A                           LSR     A
  1606 00:E8A6: 4A                           LSR     A
  1607 00:E8A7: 18                           CLC                     ;Clear carry
  1608 00:E8A8: 69 31                        ADC     #$31            ;Add offset to MSG #
  1609 00:E8AA: 20 FC E0                     JSR     PROMPT          ;Send to console
  1610 00:E8AD: 20 F0 E1                     JSR     SPC             ;Send an ASCII space
  Fri May 14 2021 10:56                                                                                                    Page 32


  1611                        ;
  1612 00:E8B0: A5 EC                        LDA     MONTH_CENTURY   ;Get Month and Century
  1613 00:E8B2: 4A                           LSR     A               ;Move Month to lower 4 bits
  1614 00:E8B3: 4A                           LSR     A
  1615 00:E8B4: 4A                           LSR     A
  1616 00:E8B5: 4A                           LSR     A
  1617 00:E8B6: 18                           CLC                     ;Clear Carry
  1618 00:E8B7: 69 38                        ADC     #$38            ;Add offset to MSG #
  1619 00:E8B9: 20 FC E0                     JSR     PROMPT          ;Send to console
  1620 00:E8BC: 20 F0 E1                     JSR     SPC             ;Send an ASCII space
  1621                        ;
  1622 00:E8BF: A5 EB                        LDA     DAY_DATE        ;Get Day and Date data
  1623 00:E8C1: 29 1F                        AND     #%00011111      ;Mask off Day of week
  1624 00:E8C3: A2 46                        LDX     #$46            ;Get MSG for ", "
  1625 00:E8C5: 20 E8 E8                     JSR     DO8TIME         ;Convert and send to console
  1626                        ;
  1627 00:E8C8: A5 EC                        LDA     MONTH_CENTURY   ;Get Month and Year data
  1628 00:E8CA: 29 0F                        AND     #%00001111      ;Mask off Month
  1629 00:E8CC: A8                           TAY                     ;Xfer to Y reg
  1630 00:E8CD: A5 ED                        LDA     YEAR            ;Get Year low byte
  1631 00:E8CF: A2 47                        LDX     #$47            ;Get MSG for " Time: "
  1632 00:E8D1: 20 EA E8                     JSR     DO16TIME        ;Convert and send to console
  1633                        ;
  1634 00:E8D4: A2 45                        LDX     #$45            ;Get ":" message
  1635 00:E8D6: A5 EA                        LDA     HOURS           ;Get Current Hours (low byte)
  1636 00:E8D8: 20 F1 E8                     JSR     DO8LZ           ;Convert and send to console
  1637                        ;
  1638 00:E8DB: A2 45                        LDX     #$45            ;Get ":" message
  1639 00:E8DD: A5 E9                        LDA     MINS            ;Get Current Minutes (low byte)
  1640 00:E8DF: 20 F1 E8                     JSR     DO8LZ           ;Convert and send to console
  1641                        ;
  1642 00:E8E2: A2 48                        LDX     #$48            ;Get " " message
  1643 00:E8E4: A5 E8                        LDA     SECS            ;Get Current Seconds (low byte)
  1644 00:E8E6: 80 09                        BRA     DO8LZ           ;Convert to console and return
  1645                        ;
  1646 00:E8E8: A0 00        DO8TIME         LDY     #$00            ;Zero high byte
  1647 00:E8EA: DA           DO16TIME        PHX                     ;Push message number to stack
  1648 00:E8EB: 20 D0 E0                     JSR     HEX2ASC         ;Convert and print ASCII string
  1649 00:E8EE: 68                           PLA                     ;Pull message number from stack
  1650 00:E8EF: 80 10                        BRA     PRMPTSC         ;Send to console and return
  1651                        ;
  1652 00:E8F1: DA           DO8LZ           PHX                     ;Push message number to stack
  1653 00:E8F2: 20 BA E0                     JSR     HEX8ASC         ;Convert and print ASCII string with leading zero
  1654 00:E8F5: 68                           PLA                     ;Pull message number from stack
  1655 00:E8F6: 80 09                        BRA     PRMPTSC         ;Send to console and return
  1656                        ;
  1657                        ;[CNTRL-V] Version command:
  1658 00:E8F8: A0 FF        VER             LDY     #>BIOS_MSG      ;Get high offset
  1659 00:E8FA: A9 D0                        LDA     #<BIOS_MSG      ;Get low offset
  1660 00:E8FC: 20 04 E1                     JSR     PROMPTR         ;Show BIOS version
  1661 00:E8FF: A9 15                        LDA     #$15            ;Get Intro substring (version)
  1662 00:E901: 4C FC E0     PRMPTSC         JMP     PROMPT          ;Send to console and return
  1663                        ;
  1664                        ;[CNTRL-L] Xmodem/CRC Load command: receives a file from console via Xmodem protocol. no cable
  1665                        ; swapping needed, uses Console port and buffer via the terminal program. Not a full Xmodem/CRC
  1666                        ; implementation, only does CRC-16 checking, no fallback. Designed for direct attach to host
  1667                        ; machine via com port. Can handle full 8-bit binary transfers without errors.
  1668                        ; Tested with: ExtraPutty (Windows 7 Pro) and Serial (OSX).
  1669                        ;
  1670                        ;Added support for Motorola S-Record formatted files automatically. Default load address is $0800.
  1671                        ; An input parameter is used as a Load Address (for non-S-Record files) or as a positive offset for
  1672                        ; any S-Record formatted file. The supported S-Record format is S19 as created by WDC Tools Linker.
  1673                        ; Note: this code supports the execution address in the final S9 record, but WDC Tools does not
  Fri May 14 2021 10:56                                                                                                    Page 33


  1674                        ; provide any ability to put this into their code build. WDC are aware of this.
  1675 00:E904: F7 C5        XMODEML         SMB7    CMDFLAG         ;Set bit7 of command flag
  1676 00:E906: 64 C6                        STZ     OPXMDM          ;Clear Xmodem flag
  1677 00:E908: A9 01                        LDA     #$01            ;Set block count to one
  1678 00:E90A: 85 CC                        STA     BLKNO           ;Save it for starting block #
  1679                        ;
  1680 00:E90C: A9 23                        LDA     #$23            ;Get Xmodem intro msg
  1681 00:E90E: 20 1F E1                     JSR     HEX4            ;Print Msg, get Hex load address/S-record Offset
  1682 00:E911: D0 03                        BNE     XLINE           ;Branch if data entered (Z flag set from HEX4/HEXINPUT)
  1683 00:E913: 8A                           TXA                     ;Xfer to A reg (LDA #$00)
  1684 00:E914: A0 08                        LDY     #$08            ;Set High byte ($0800)
  1685 00:E916: 85 CA        XLINE           STA     PTRL            ;Store to Lo pointer
  1686 00:E918: 84 CB                        STY     PTRH            ;Store to Hi pointer
  1687                        ;
  1688                        XMDM_LOAD ;Entry point for an external program to load data via Xmodem CRC
  1689                        ; To use this routine, the external program must setup the variables above which include
  1690                        ; the starting address (PTRL/H), clear the OPXMDM flag and set the Block count to one.
  1691                        ; Once completed, the message to setup the terminal program is displayed and the user
  1692                        ; needs to setup the terminal to send data via a filename.
  1693                        ;
  1694                        ; A 5 seconds delay is started to allow the user time to navigate to the file to be sent.
  1695 00:E91A: A9 25                        LDA     #$25            ;Get Terminal Setup msg
  1696 00:E91C: 20 FC E0                     JSR     PROMPT          ;Send to console
  1697                        ;
  1698                        ;Wait for 5 seconds for user to setup xfer from terminal
  1699 00:E91F: A9 01                        LDA     #$01            ;Set milliseconds to 1(*10 ms)
  1700 00:E921: A2 01                        LDX     #$01            ;Set 16-bit multiplier
  1701 00:E923: A0 F4                        LDY     #$F4            ;to 500 decimal ($1F4)
  1702 00:E925: 20 3F FF                     JSR     B_SET_DLY       ;Set Delay parameters
  1703 00:E928: 20 45 FF                     JSR     B_EXE_LGDLY     ;Call long delay for 5 seconds
  1704                        ;
  1705 00:E92B: A9 43        STRT_XFER       LDA     #"C"            ;Send "C" character for CRC mode
  1706 00:E92D: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  1707 00:E930: A0 32                        LDY     #50             ;Set loop count to 50
  1708 00:E932: 20 42 FF     CHR_DLY         JSR     B_EXE_MSDLY     ;Delay 1*(10ms)
  1709 00:E935: A5 DF                        LDA     ICNT            ;Check input buffer count
  1710 00:E937: D0 36                        BNE     STRT_BLK        ;If a character is in, branch
  1711 00:E939: 88                           DEY                     ;Decrement loop count
  1712 00:E93A: D0 F6                        BNE     CHR_DLY         ;Branch and check again
  1713 00:E93C: 80 ED                        BRA     STRT_XFER       ;Else, branch and send another "C"
  1714                        ;
  1715 00:E93E: 60           XM_END          RTS                     ;Cancelled by user, return
  1716                        ;
  1717 00:E93F: A9 06        XDONE           LDA     #ACK            ;Last block, get ACK character
  1718 00:E941: 20 3C FF                     JSR     B_CHROUT        ;Send final ACK
  1719 00:E944: A0 02                        LDY     #$02            ;Get delay count
  1720 00:E946: A9 26                        LDA     #$26            ;Get Good xfer message number
  1721 00:E948: 20 C7 E2     FLSH_DLY        JSR     NOLOOPS         ;Zero input buffer pointers
  1722 00:E94B: 48                           PHA                     ;Save Message number
  1723 00:E94C: A9 19                        LDA     #$19            ;Load milliseconds = 250 ms (25x10ms)
  1724 00:E94E: A2 00                        LDX     #$00            ;Load High multiplier to 0 decimal
  1725 00:E950: 20 3F FF                     JSR     B_SET_DLY       ;Set Delay parameters
  1726 00:E953: 20 45 FF                     JSR     B_EXE_LGDLY     ;Execute delay, (wait to get terminal back)
  1727 00:E956: 68                           PLA                     ;Get message number back
  1728 00:E957: C9 27                        CMP     #$27            ;Check for error msg#
  1729 00:E959: F0 11                        BEQ     SHRT_EXIT       ;Do only one message
  1730 00:E95B: 48                           PHA                     ;Save MSG number
  1731 00:E95C: 7F C6 0C                     BBR7    OPXMDM,END_LOAD ;Branch if no S-Record
  1732 00:E95F: A9 28                        LDA     #$28            ;Get S-Record load address msg
  1733 00:E961: 20 FC E0                     JSR     PROMPT          ;Printer header msg
  1734 00:E964: A5 B8                        LDA     SRCL            ;Get source Low byte
  1735 00:E966: A4 B9                        LDY     SRCH            ;Get source High byte
  1736 00:E968: 20 38 E2                     JSR     PRWORD          ;Print Hex address
  Fri May 14 2021 10:56                                                                                                    Page 34


  1737 00:E96B: 68           END_LOAD        PLA                     ;Get Message number
  1738 00:E96C: 4C FC E0     SHRT_EXIT       JMP     PROMPT          ;Print Message and exit
  1739                        ;
  1740 00:E96F: 20 39 FF     STRT_BLK        JSR     B_CHRIN         ;Get a character
  1741 00:E972: C9 1B                        CMP     #$1B            ;Is it escape - quit?
  1742 00:E974: F0 C8                        BEQ     XM_END          ;If yes, exit
  1743 00:E976: C9 01                        CMP     #SOH            ;Start of header?
  1744 00:E978: F0 06                        BEQ     GET_BLK         ;If yes, branch and receive block
  1745 00:E97A: C9 04                        CMP     #EOT            ;End of Transmission?
  1746 00:E97C: F0 C1                        BEQ     XDONE           ;If yes, branch and exit
  1747 00:E97E: 80 3B                        BRA     STRT_ERR        ;Else branch to error
  1748                        ;
  1749 00:E980: A2 00        GET_BLK         LDX     #$00            ;Zero index for block receive
  1750                        ;
  1751 00:E982: 20 39 FF     GET_BLK1        JSR     B_CHRIN         ;Get a character
  1752 00:E985: 9D 7C 03                     STA     RBUFF,X         ;Move into buffer
  1753 00:E988: E8                           INX                     ;Increment buffer index
  1754 00:E989: E0 84                        CPX     #$84            ;Compare size (<01><FE><128 bytes><CRCH><CRCL>)
  1755 00:E98B: D0 F5                        BNE     GET_BLK1        ;If not done, loop back and continue
  1756                        ;
  1757 00:E98D: AD 7C 03                     LDA     RBUFF           ;Get block number from buffer
  1758 00:E990: C5 CC                        CMP     BLKNO           ;Compare to expected block number
  1759 00:E992: D0 07                        BNE     RESTRT          ;If not correct, restart the block
  1760 00:E994: 49 FF                        EOR     #$FF            ;Create one's complement of block number
  1761 00:E996: CD 7D 03                     CMP     RBUFF+1         ;Compare with rcv'd value for block number
  1762 00:E999: F0 07                        BEQ     BLK_OKAY        ;Branch if compare is good
  1763                        ;
  1764 00:E99B: A9 15        RESTRT          LDA     #NAK            ;Get NAK character
  1765 00:E99D: 20 3C FF     RESTRT2         JSR     B_CHROUT        ;Send to xfer program
  1766 00:E9A0: 80 CD                        BRA     STRT_BLK        ;Restart block transfer
  1767                        ;
  1768 00:E9A2: A9 0A        BLK_OKAY        LDA     #$0A            ;Set retry value to 10
  1769 00:E9A4: 85 C9                        STA     CRCCNT          ;Save it to CRC retry count
  1770                        ;
  1771 00:E9A6: 20 83 EB                     JSR     CRC16_GEN       ;Generate CRC16 from Buffer data
  1772                        ;
  1773 00:E9A9: B9 7E 03                     LDA     RBUFF+2,Y       ;Get received CRC hi byte (4)
  1774 00:E9AC: C5 C7                        CMP     CRCHI           ;Compare against calculated CRC hi byte (3)
  1775 00:E9AE: D0 07                        BNE     BADCRC          ;If bad CRC, handle error (2/3)
  1776 00:E9B0: B9 7F 03                     LDA     RBUFF+3,Y       ;Get CRC lo byte (4)
  1777 00:E9B3: C5 C8                        CMP     CRCLO           ;Compare against calculated CRC lo byte (3)
  1778 00:E9B5: F0 15                        BEQ     GOODCRC         ;If good, go move frame to memory (2/3)
  1779                        ;
  1780                        ;CRC was bad! Need to retry and receive the last frame again. Decrement the CRC retry count,
  1781                        ; send a NAK and try again. Count allows up to 10 retries, then cancels the transfer.
  1782 00:E9B7: C6 C9        BADCRC          DEC     CRCCNT          ;Decrement retry count
  1783 00:E9B9: D0 0C                        BNE     CRCRTRY         ;Retry again if count not zero
  1784 00:E9BB: A9 18        STRT_ERR        LDA     #CAN            ;Else get Cancel code
  1785 00:E9BD: 20 3C FF                     JSR     B_CHROUT        ;Send it to terminal program
  1786 00:E9C0: A0 08                        LDY     #$08            ;Set delay multiplier
  1787 00:E9C2: A9 27                        LDA     #$27            ;Get message for receive error
  1788 00:E9C4: 4C 48 E9                     JMP     FLSH_DLY        ;Do a flush, delay and exit
  1789 00:E9C7: 20 C7 E2     CRCRTRY         JSR     NOLOOPS         ;Zero Input buffer pointers
  1790 00:E9CA: 80 CF                        BRA     RESTRT          ;Send NAK and retry
  1791                        ;
  1792                        ;Block has been received, check for S19 record transfer
  1793 00:E9CC: FF C6 2D     GOODCRC         BBS7    OPXMDM,XFER_S19 ;Branch if bit 7 set (active S-record)
  1794 00:E9CF: A5 CC                        LDA     BLKNO           ;Else, check current block number
  1795 00:E9D1: 3A                           DEC     A               ;Check for block 1 only (first time thru)
  1796 00:E9D2: F0 16                        BEQ     TEST_S19        ;If yes, test for S19 record
  1797                        ;
  1798 00:E9D4: A2 00        MOVE_BLK        LDX     #$00            ;Zero index offset to data
  1799 00:E9D6: BD 7E 03     COPYBLK         LDA     RBUFF+2,X       ;Get data byte from buffer
  Fri May 14 2021 10:56                                                                                                    Page 35


  1800 00:E9D9: 92 CA                        STA     (PTRL)          ;Store to target address
  1801 00:E9DB: E6 CA                        INC     PTRL            ;Increment low address byte
  1802 00:E9DD: D0 02                        BNE     COPYBLK2        ;Check for hi byte loop
  1803 00:E9DF: E6 CB                        INC     PTRH            ;Increment hi byte address
  1804 00:E9E1: E8           COPYBLK2        INX                     ;Point to next data byte
  1805 00:E9E2: 10 F2                        BPL     COPYBLK         ;Loop back until done (128)
  1806 00:E9E4: E6 CC        INCBLK          INC     BLKNO           ;Increment block number
  1807 00:E9E6: A9 06                        LDA     #ACK            ;Get ACK character
  1808 00:E9E8: 80 B3                        BRA     RESTRT2         ;Send ACK and continue xfer
  1809                        ;
  1810 00:E9EA: AD 7E 03     TEST_S19        LDA     RBUFF+2         ;Get first character
  1811 00:E9ED: C9 53                        CMP     #"S"            ;Check for S character
  1812 00:E9EF: D0 E3                        BNE     MOVE_BLK        ;If not equal, no S-record, move block
  1813 00:E9F1: AD 7F 03                     LDA     RBUFF+3         ;Get second character
  1814 00:E9F4: C9 31                        CMP     #"1"            ;Check for 1 character
  1815 00:E9F6: D0 DC                        BNE     MOVE_BLK        ;If not equal, no S-record, move block
  1816 00:E9F8: F7 C6                        SMB7    OPXMDM          ;Set bit 7 for S-record xfer
  1817 00:E9FA: 64 C1                        STZ     IDY             ;Zero index for SRBUFF
  1818                        ;
  1819                        ;S-Record transfer routine: Xmodem is a 128 byte data block, S-Record is variable, up to
  1820                        ; 44 bytes needed to move a record at a time to the SRBUFF based on length, check as valid,
  1821                        ; then calculate the address and transfer to that location. Once the Xmodem buffer is empty,
  1822                        ; loop back to get the next block and continue processing S-Records until completed.
  1823                        ;
  1824                        ;RBUFF is the full Xmodem block, which starts with the block number, one's compliment of the
  1825                        ; block number, followed by the 128-bytes of data. The data is confirmed as "S1", which validates
  1826                        ; the start of a S-Record format.
  1827                        ;
  1828                        ;At first entry here, pointer IDY is zero. At all entries here, a 128 byte block has been received.
  1829                        ; The S-record type and length length needs to be calculated, then the proper count moved to the
  1830                        ; SRBUFF location and both pointers (IDX/IDY) are updated.
  1831                        ;
  1832                        ;S-Record format is as follows (44 bytes max):
  1833                        ; 2 bytes for type: "S1" or "S9" (ASCII text)
  1834                        ; 2 bytes for length (ASCII Hex) - includes load address, data and checksum (not CR/LF)
  1835                        ; 4 bytes for load address (ASCII Hex - 16-bit load address)
  1836                        ; 2-32 bytes for data (ASCII Hex - 1-16 bytes of data) - always an even number
  1837                        ; 2 bytes for checksum (ASCII Hex - 1 byte for checksum)
  1838                        ; 2 bytes for CR/LF
  1839                        ;
  1840                        ;First grab the 2 bytes for the length, convert to binary and transfer the correct count of
  1841                        ; data from RBUFF to SRBUFF. Note: increment count by two additional for CR/LF
  1842                        ; then update the running index into the 128 byte record (IDX) which points to the next record.
  1843                        ; minor update from Mike Barry, saves a byte.
  1844 00:E9FC: 64 C0        XFER_S19        STZ     IDX             ;Zero offset to RBUFF
  1845                        ;
  1846 00:E9FE: A6 C0        S19_LOOP2       LDX     IDX             ;Load current offset to RBUFF
  1847 00:EA00: A4 C1                        LDY     IDY             ;Get current offset SRBUFF
  1848 00:EA02: D0 11                        BNE     FIL_SRBUFF      ;Branch to complete RBUFF to SRBUFF xfer
  1849                        ;
  1850 00:EA04: BD 80 03                     LDA     RBUFF+4,X       ;Get first ASCII length character
  1851 00:EA07: BC 81 03                     LDY     RBUFF+5,X       ;Get second ASCII length character
  1852 00:EA0A: 20 8E E0                     JSR     ASC2BIN         ;Convert to binary length
  1853 00:EA0D: 1A                           INC     A               ;Increment length for "S1" or "S9"
  1854 00:EA0E: 1A                           INC     A               ;Increment length for "length characters"
  1855 00:EA0F: 1A                           INC     A               ;Increment length for "CR/LF"
  1856 00:EA10: 0A                           ASL     A               ;Multiply by two for 2-characters per byte
  1857 00:EA11: 85 C4                        STA     TEMP3           ;Save total bytes to move to SRBUFF
  1858 00:EA13: A4 C1                        LDY     IDY             ;Get offset to SRBUFF
  1859                        ;
  1860 00:EA15: BD 7E 03     FIL_SRBUFF      LDA     RBUFF+2,X       ;Get S-Record data
  1861 00:EA18: 99 50 03                     STA     SRBUFF,Y        ;Move into SREC buffer
  1862 00:EA1B: E8                           INX                     ;Increment index to RBUFF
  Fri May 14 2021 10:56                                                                                                    Page 36


  1863 00:EA1C: E0 81                        CPX     #$81            ;Check for end of buffer
  1864 00:EA1E: F0 0E                        BEQ     NXT_FRAME       ;If yes, go receive another block into the buffer
  1865 00:EA20: C8                           INY                     ;Increment index to SRBUFF
  1866 00:EA21: C4 C4                        CPY     TEMP3           ;Compare to length
  1867 00:EA23: D0 F0                        BNE     FIL_SRBUFF      ;Loop back until the full record is moved to SRBUFF
  1868                        ;
  1869 00:EA25: 86 C0                        STX     IDX             ;Update running offset to RBUFF
  1870 00:EA27: 64 C1                        STZ     IDY             ;Reset SRBUFF index pointer (for next S-record xfer)
  1871 00:EA29: 20 32 EA                     JSR     SREC_PROC       ;Process the S-Record in SRBUFF
  1872 00:EA2C: 80 D0                        BRA     S19_LOOP2       ;Branch back and get another S-Record
  1873                        ;
  1874 00:EA2E: 84 C1        NXT_FRAME       STY     IDY             ;Save SRBUFF offset
  1875 00:EA30: 80 B2        INCBLK2         BRA     INCBLK          ;Increment block and get next frame
  1876                        ;
  1877 00:EA32: AD 51 03     SREC_PROC       LDA     SRBUFF+1        ;Get the Record type character
  1878 00:EA35: C9 31                        CMP     #"1"            ;Check for S1 record
  1879 00:EA37: F0 54                        BEQ     S1_PROC         ;Process a S1 record
  1880 00:EA39: C9 39                        CMP     #"9"            ;Check for S9 (final) record
  1881 00:EA3B: F0 3F                        BEQ     S9_PROC         ;Process a S9 record
  1882 00:EA3D: 68           SREC_ERR        PLA                     ;Else, pull return address
  1883 00:EA3E: 68                           PLA                     ;of two bytes from stack
  1884 00:EA3F: 4C BB E9                     JMP     STRT_ERR        ;Branch to Xmodem error/exit routine
  1885                        ;
  1886                        ;This routine will decode the SRBUFF ASCII data to binary data.
  1887                        ; As each byte is two ASCII characters, the result is half the length.
  1888                        ; TEMP3 contains the overall length from above, plus extra to add in the "S1" or "S9" and CR/LF
  1889                        ; so we need to decrement TEMP3 by two to correct the required length.
  1890 00:EA42: C6 C4        SR_PROC         DEC     TEMP3           ;Decrement length
  1891 00:EA44: C6 C4                        DEC     TEMP3           ;Decrement length
  1892                        ;
  1893 00:EA46: A2 00        SR_COMP         LDX     #$00            ;Zero Index
  1894 00:EA48: A0 00                        LDY     #$00            ;Zero Index
  1895 00:EA4A: 5A           SR_CMPLP        PHY                     ;Save Y reg index
  1896 00:EA4B: BC 53 03                     LDY     SRBUFF+3,X      ;Get LS character
  1897 00:EA4E: BD 52 03                     LDA     SRBUFF+2,X      ;Get MS character
  1898 00:EA51: 20 8E E0                     JSR     ASC2BIN         ;Convert two ASCII characters to HEX byte
  1899 00:EA54: 7A                           PLY                     ;Restore Y reg index
  1900 00:EA55: 99 50 03                     STA     SRBUFF,Y        ;Store in SRBUFF starting at front
  1901 00:EA58: E8                           INX                     ;Increment X reg twice
  1902 00:EA59: E8                           INX                     ;Points to next character pair
  1903 00:EA5A: C8                           INY                     ;Increment Y reg once for offset to SRBUFF
  1904 00:EA5B: C6 C4                        DEC     TEMP3           ;Decrement character count
  1905 00:EA5D: D0 EB                        BNE     SR_CMPLP        ;Branch back until done
  1906                        ;
  1907                        ;SRBUFF now has the decoded HEX data, which is:
  1908                        ; 1 byte for length, 2 bytes for the load address, up to 16 bytes for data and 1 byte checksum
  1909                        ; Now calculate the checksum and ensure valid S-Record content
  1910 00:EA5F: 64 C8                        STZ     CRCLO           ;Zero Checksum location
  1911 00:EA61: AE 50 03                     LDX     SRBUFF          ;Load index with record length
  1912 00:EA64: A0 00                        LDY     #$00            ;Zero index
  1913 00:EA66: 18           SR_CHKSM        CLC                     ;Clear carry for add
  1914 00:EA67: B9 50 03                     LDA     SRBUFF,Y        ;Get S-Record byte
  1915 00:EA6A: 65 C8                        ADC     CRCLO           ;Add in checksum Temp
  1916 00:EA6C: 85 C8                        STA     CRCLO           ;Update checksum Temp
  1917 00:EA6E: C8                           INY                     ;Increment offset
  1918 00:EA6F: CA                           DEX                     ;Decrement count
  1919 00:EA70: D0 F4                        BNE     SR_CHKSM        ;Branch back until done
  1920                        ;
  1921 00:EA72: A9 FF                        LDA     #$FF            ;Get all bits on
  1922 00:EA74: 45 C8                        EOR     CRCLO           ;Exclusive OR TEMP for one's complement
  1923 00:EA76: D9 50 03                     CMP     SRBUFF,Y        ;Compare to last byte (which is checksum)
  1924 00:EA79: D0 C2                        BNE     SREC_ERR        ;If bad, exit out
  1925 00:EA7B: 60                           RTS                     ;Return to caller
  Fri May 14 2021 10:56                                                                                                    Page 37


  1926                        ;
  1927 00:EA7C: 20 42 EA     S9_PROC         JSR     SR_PROC         ;Process the S-Record and checksum
  1928 00:EA7F: AD 51 03                     LDA     SRBUFF+1        ;Get MSB load address
  1929 00:EA82: 85 AF                        STA     COMHI           ;Store to execution pointer
  1930 00:EA84: AD 52 03                     LDA     SRBUFF+2        ;Get LSB load address
  1931 00:EA87: 85 AE                        STA     COMLO           ;Store to execution pointer
  1932 00:EA89: 68                           PLA                     ;Pull return address
  1933 00:EA8A: 68                           PLA                     ;second byte
  1934 00:EA8B: 80 A3                        BRA     INCBLK2         ;Branch back to close out transfer
  1935                        ;
  1936 00:EA8D: 20 42 EA     S1_PROC         JSR     SR_PROC         ;Process the S-Record and checksum
  1937                        ;
  1938                        ;Valid binary S-Record decoded at SRBUFF. Calculate offset from input, add to specified load
  1939                        ; address and store into memory, then loop back until done. Offset is stored in PTR L/H from
  1940                        ; initial input. If no input entered, BUFIDX is zero and PTR L/H is preset to $0800, so checking
  1941                        ; for BUFIDX being zero bypasses adding the offset, if BUFIDX is non zero, then PTR L/H contains
  1942                        ; the offset address which is added to TGT L/H moving the S-Record data to memory.
  1943 00:EA90: AD 51 03                     LDA     SRBUFF+1        ;Get MS load address
  1944 00:EA93: 85 BB                        STA     TGTH            ;Store to target pointer
  1945 00:EA95: AD 52 03                     LDA     SRBUFF+2        ;Get LS load address
  1946 00:EA98: 85 BA                        STA     TGTL            ;Store to target pointer
  1947 00:EA9A: A5 BE                        LDA     BUFIDX          ;Check input count for offset required
  1948 00:EA9C: F0 11                        BEQ     NO_OFFSET       ;If Zero, no offset was entered
  1949                        ;
  1950                        ;Add in offset contained at PTR L/H to TGT L/H
  1951 00:EA9E: 18                           CLC                     ;Clear carry for add
  1952 00:EA9F: A5 CA                        LDA     PTRL            ;Get LS offset
  1953 00:EAA1: 65 BA                        ADC     TGTL            ;Add to TGTL address
  1954 00:EAA3: 90 02                        BCC     SKIP_HB         ;Skip increment HB if no carry
  1955 00:EAA5: E6 BB                        INC     TGTH            ;Else increment TGTH by one
  1956 00:EAA7: 85 BA        SKIP_HB         STA     TGTL            ;Save TGTL
  1957 00:EAA9: A5 CB                        LDA     PTRH            ;Get MS offset
  1958 00:EAAB: 65 BB                        ADC     TGTH            ;Add to TGTH
  1959 00:EAAD: 85 BB                        STA     TGTH            ;Save it
  1960                        ;
  1961                        ;Check for first Block and load SRC H/L with load address
  1962 00:EAAF: A5 CC        NO_OFFSET       LDA     BLKNO           ;Get Block number
  1963 00:EAB1: 3A                           DEC     A               ;Decrement to test for block one
  1964 00:EAB2: D0 0E                        BNE     NO_OFFST2       ;If not first block, skip around
  1965 00:EAB4: A5 C0                        LDA     IDX             ;Get running count for first block
  1966 00:EAB6: C9 2C                        CMP     #$2C            ;First S-record?
  1967 00:EAB8: D0 08                        BNE     NO_OFFST2       ;If yes, setup load address pointer
  1968 00:EABA: A5 BA                        LDA     TGTL            ;Get starting address Lo byte
  1969 00:EABC: 85 B8                        STA     SRCL            ;Save it as Source Lo byte
  1970 00:EABE: A5 BB                        LDA     TGTH            ;Get starting address Hi byte
  1971 00:EAC0: 85 B9                        STA     SRCH            ;Save it as Source Hi byte
  1972                        ;
  1973 00:EAC2: AE 50 03     NO_OFFST2       LDX     SRBUFF          ;Get record length
  1974 00:EAC5: CA                           DEX                     ;Decrement by 3
  1975 00:EAC6: CA                           DEX                     ;to only transfer the data
  1976 00:EAC7: CA                           DEX                     ;and not the count/load address
  1977 00:EAC8: A0 00                        LDY     #$00            ;Zero index
  1978 00:EACA: B9 53 03     MVE_SREC        LDA     SRBUFF+3,Y      ;Get offset to data in record
  1979 00:EACD: 91 BA                        STA     (TGTL),Y        ;Store it to memory
  1980 00:EACF: C8                           INY                     ;Increment index
  1981 00:EAD0: CA                           DEX                     ;Decrement record count
  1982 00:EAD1: D0 F7                        BNE     MVE_SREC        ;Branch back until done
  1983 00:EAD3: 60           XMDMQ           RTS                     ;Return to caller
  1984                        ;
  1985                        ;[CNTRL-S] Xmodem/CRC Save command: Sends data to the Terminal program via Xmodem CRC.
  1986                        ; No cable swapping is required, uses the console UART for all transfers. User must
  1987                        ; enter a starting address for the data and a length, both 16-bit. Once entered, the
  1988                        ; user will need to setup the terminal program to receive data via Xmodem CRC protocol.
  Fri May 14 2021 10:56                                                                                                    Page 38


  1989                        ;
  1990                        ; NOTE: Tested with ExtraPutty (Win7) and Serial (OSX). Serial (OSX) has a problem with EOT.
  1991                        ; Serial does not release the port after completed, so the last message does not show!
  1992                        ; I submitted a problem report with their support, they have asked for more detail which I
  1993                        ; provided. Further note: Zoc7 also works properly on OSX, so the problem is with Serial.
  1994                        ;
  1995                        ; 20/06/2019 Serial Update!
  1996                        ;
  1997                        ;A workaround has been implemented for the problem with Serial:
  1998                        ; by implementing a 15 seconds delay to allow the user to name the saved file, Serial will
  1999                        ; release the port nicely and the Monitor code can display the exit message and return with
  2000                        ; the Monitor prompt as normal. This is basically an anomaly with Serial and I have sent this
  2001                        ; in to them. So far, no response from them, which is disappointing ;-(
  2002                        ;
  2003                        ; 10/09/2019 Serial Update!
  2004                        ;
  2005                        ; Version 1.4.0 has been released. The problem noted here has been fixed, so all workarounds
  2006                        ; have been removed and the code functions as designed without issues.
  2007                        ;
  2008 00:EAD4: 64 C6        XMODEMS         STZ     OPXMDM          ;Clear Xmodem flag
  2009 00:EAD6: A9 01                        LDA     #$01            ;Set block count to one
  2010 00:EAD8: 85 CC                        STA     BLKNO           ;Save it
  2011                        ;
  2012 00:EADA: A9 24                        LDA     #$24            ;Get Xmodem Save intro msg
  2013 00:EADC: 20 1F E1                     JSR     HEX4            ;Send msg and get Source address
  2014 00:EADF: 85 B8                        STA     SRCL            ;Save Source low byte
  2015 00:EAE1: 84 B9                        STY     SRCH            ;Save Source high byte
  2016 00:EAE3: A9 04                        LDA     #$04            ;Get " len:" msg
  2017 00:EAE5: 20 1F E1                     JSR     HEX4            ;Send msg and get length to send
  2018 00:EAE8: 85 BC                        STA     LENL            ;Save Length low byte
  2019 00:EAEA: 84 BD                        STY     LENH            ;Save length high byte
  2020                        ;
  2021                        XMDM_SAVE       ;Entry point for an external program to save data via Xmodem CRC
  2022                        ; Entry at this point assumes that the variables have been setup properly.
  2023                        ; This includes the Source address (SCRL/H), Length (LENL/H), and that the
  2024                        ; Block count has been set to one and the OPXMDM flag has been cleared.
  2025 00:EAEC: A9 25                        LDA     #$25            ;Get Terminal Setup message
  2026 00:EAEE: 20 FC E0                     JSR     PROMPT          ;Send to console
  2027                        ;
  2028                        ; User now needs to setup terminal program to receive data via Xmodem/CRC.
  2029                        ;  Once setup, the terminal program will send an ASCII "C" character to signal the start
  2030                        ;  of data transfer. We can prompt the user to terminate the transfer by hitting ESC.
  2031                        ;  Once the transfer starts however, it is basically controlled by the receiving end.
  2032 00:EAF1: 20 39 FF                     JSR     B_CHRIN         ;Wait for a key from the terminal program
  2033 00:EAF4: C9 1B                        CMP     #$1B            ;Check for ESC key
  2034 00:EAF6: F0 DB                        BEQ     XMDMQ           ;If yes, quit Xmodem save function
  2035 00:EAF8: C9 43                        CMP     #'C'            ;Check for upper case ASCII "C"
  2036 00:EAFA: D0 D7                        BNE     XMDMQ           ;If not, quit Xmodem save function
  2037                        ;
  2038                        ; Terminal has sent an ASCII "C" character to initiate Xmodem/CRC transfer.
  2039                        ;  Note that per protocol, if receiver does not receive data within 3 seconds,
  2040                        ;  it will send another "C" to the device. This dictates the maximum time to
  2041                        ;  assemble the 133-byte block with 16-bit checksum must be less than 3 seconds.
  2042 00:EAFC: A5 CC        SND_LP          LDA     BLKNO           ;Get current block number
  2043 00:EAFE: 8D 7C 03                     STA     RBUFF           ;Store into buffer
  2044 00:EB01: 49 FF                        EOR     #$FF            ;One's compliment of BLKNO
  2045 00:EB03: 8D 7D 03                     STA     RBUFF+1         ;Store into buffer
  2046                        ;
  2047                        ; Now assemble 128 byte buffer and 16-bit CRC to send to terminal
  2048                        ;  SRCL/H is the start of the data to be sent. Start by moving 128 bytes into RBUFF
  2049 00:EB06: A2 00                        LDX     #$00            ;Zero index count
  2050 00:EB08: A5 BC        XMD_FIL         LDA     LENL            ;Get length low byte
  2051 00:EB0A: 05 BD                        ORA     LENH            ;Or in high byte
  Fri May 14 2021 10:56                                                                                                    Page 39


  2052 00:EB0C: F0 0F                        BEQ     XM_BLK          ;If length is zero, finish last block
  2053 00:EB0E: B2 B8                        LDA     (SRCL)          ;Get a byte from the source
  2054 00:EB10: 9D 7E 03                     STA     RBUFF+2,X       ;Save it into the buffer
  2055 00:EB13: 20 AD E1                     JSR     UPD_STL         ;Update source and length variables
  2056 00:EB16: E8                           INX                     ;Increment count
  2057 00:EB17: E0 80                        CPX     #$80            ;Compare to 128
  2058 00:EB19: D0 ED                        BNE     XMD_FIL         ;Loop back until buffer is filled
  2059 00:EB1B: 80 0E                        BRA     DO_UP_CRC       ;Calculate CRC and send block
  2060                        ;
  2061                        ;As each Xmodem block must contain 128 bytes, if the total amount data to be sent is less than
  2062                        ; 128 bytes, then the block must be padded to fill up the remaining space. By protocol
  2063                        ; definition, the default fill byte is hex $1E. The routine above checks the length during
  2064                        ; each byte transfer into the block buffer and will arrive here upon the length going to zero.
  2065                        ; Having arrived here with no more data to put into a block, we must determine if it's the
  2066                        ; last block and ensure that the block is a full 128 bytes with the proper $1E padding
  2067                        ; character for any unused data space.
  2068 00:EB1D: E0 80        XM_BLK          CPX     #$80            ;Check for X reg at 128 bytes
  2069 00:EB1F: F0 08                        BEQ     LAST_BLK        ;If yes, complete last block and exit
  2070 00:EB21: A9 1A        LST_BKLP        LDA     #$1A            ;Get padding character
  2071 00:EB23: 9D 7E 03                     STA     RBUFF+2,X       ;Place into buffer
  2072 00:EB26: E8                           INX                     ;Increment count
  2073 00:EB27: 80 F4                        BRA     XM_BLK          ;Loop back until done
  2074 00:EB29: 97 C6        LAST_BLK        SMB1    OPXMDM          ;Set bit in flag for last block
  2075                        ;
  2076                        ; Now calculate the 16-bit CRC value and add into buffer
  2077 00:EB2B: 20 83 EB     DO_UP_CRC       JSR     CRC16_GEN       ;Generate CRC for block
  2078                        ;
  2079 00:EB2E: A5 C7                        LDA     CRCHI           ;Get calculated CRC hi byte
  2080 00:EB30: 99 7E 03                     STA     RBUFF+2,Y       ;Save into buffer
  2081 00:EB33: A5 C8                        LDA     CRCLO           ;Get calculated CRC lo byte
  2082 00:EB35: 99 7F 03                     STA     RBUFF+3,Y       ;Save into buffer
  2083                        ;
  2084                        ; Buffer now has Block number/block compliment, 128 bytes of data and a 16-bit CRC
  2085 00:EB38: A9 01        RE_SEND         LDA     #SOH            ;Get start of header code
  2086 00:EB3A: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  2087                        ;
  2088 00:EB3D: A2 00                        LDX     #$00            ;Zero index count
  2089 00:EB3F: BD 7C 03     BLK_SND         LDA     RBUFF,X         ;Get Buffer data
  2090 00:EB42: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal
  2091 00:EB45: E8                           INX                     ;Increment count
  2092 00:EB46: E0 84                        CPX     #$84            ;Check for all bytes sent
  2093 00:EB48: D0 F5                        BNE     BLK_SND         ;Branch back till buffer sent
  2094                        ;
  2095                        ; Buffer sent, now check for either an ACK or NAK from the terminal to confirm receive
  2096 00:EB4A: 20 39 FF     CHK_LAST        JSR     B_CHRIN         ;Get a character back from the terminal
  2097 00:EB4D: C9 06                        CMP     #ACK            ;Check for good receive
  2098 00:EB4F: D0 0D                        BNE     BAD_RCV         ;Branch if error
  2099 00:EB51: 9F C6 1A                     BBS1    OPXMDM,XMUPDON  ;If last block sent, exit
  2100 00:EB54: A5 BC                        LDA     LENL            ;Check for zero length left
  2101 00:EB56: 05 BD                        ORA     LENH            ; - Even block size will be zero
  2102 00:EB58: F0 12                        BEQ     ZERO_BLK        ;If zero, just set bit and finish up
  2103 00:EB5A: E6 CC                        INC     BLKNO           ;Increment block count to next
  2104 00:EB5C: 80 9E                        BRA     SND_LP          ;Branch back to send next block
  2105                        ;
  2106                        ; ACK not received from terminal, check for NAK
  2107 00:EB5E: C9 15        BAD_RCV         CMP     #NAK            ;Check for NAK
  2108 00:EB60: F0 D6                        BEQ     RE_SEND         ;Resend block
  2109                        ;
  2110                        ; Unknown error at the this point... ACK or NAK not received.
  2111                        ;  Cancel the transfer with two CAN characters and return to Monitor
  2112 00:EB62: A9 18                        LDA     #CAN            ;Get cancel code
  2113 00:EB64: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal (A reg preserved)
  2114 00:EB67: 20 3C FF                     JSR     B_CHROUT        ;Send to terminal again
  Fri May 14 2021 10:56                                                                                                    Page 40


  2115 00:EB6A: 80 13                        BRA     XMDM_ERR        ;Finish up with error message and exit
  2116                        ;
  2117 00:EB6C: 97 C6        ZERO_BLK        SMB1    OPXMDM          ;Set bit for last block
  2118                        ;
  2119                        ;Transfer is now completed. Last block was received properly. So we should
  2120                        ; send a EOT character and return to the Monitor.
  2121 00:EB6E: A9 04        XMUPDON         LDA     #EOT            ;Get end of transmission character
  2122 00:EB70: 20 3C FF                     JSR     B_CHROUT        ;Sent to terminal
  2123                        ;
  2124 00:EB73: 20 39 FF                     JSR     B_CHRIN         ;Get a character back from terminal
  2125 00:EB76: C9 06                        CMP     #ACK            ;Check for completion of transfer
  2126 00:EB78: D0 05                        BNE     XMDM_ERR        ;Branch if an error occurred
  2127                        ;
  2128 00:EB7A: A9 26                        LDA     #$26            ;Else, get complete msg
  2129 00:EB7C: 4C FC E0     XMDM_NE         JMP     PROMPT          ;Send to console and return
  2130                        ;
  2131 00:EB7F: A9 27        XMDM_ERR        LDA     #$27            ;Get xfer fail msg
  2132 00:EB81: 80 F9                        BRA     XMDM_NE         ;Send message and return to Monitor
  2133                        ;
  2134                        ;CRC-16 Generation program. This routine generates the 16-bit CRC for the 128 byte
  2135                        ;  data block stored in RBUFF. It is a separate routine as it's used in both the
  2136                        ;  Xmodem load and save routines. It saves 31 bytes with a small penalty in speed.
  2137 00:EB83: 64 C8        CRC16_GEN       STZ     CRCLO           ;Reset the CRC value by
  2138 00:EB85: 64 C7                        STZ     CRCHI           ;putting all bits off
  2139 00:EB87: A0 00                        LDY     #$00            ;Set index for data offset
  2140 00:EB89: B9 7E 03     CALCCRC         LDA     RBUFF+2,Y       ;Get data byte
  2141 00:EB8C: 08                           PHP                     ;Save status reg
  2142 00:EB8D: A2 08                        LDX     #$08            ;Load index for 8 bits
  2143 00:EB8F: 45 C7                        EOR     CRCHI           ;XOR High CRC byte
  2144 00:EB91: 06 C8        CRCLOOP         ASL     CRCLO           ;Shift carry to CRC low byte
  2145 00:EB93: 2A                           ROL     A               ;Shift bit to carry flag
  2146 00:EB94: 90 0A                        BCC     CRCLP1          ;Branch if MSB is 1
  2147 00:EB96: 49 10                        EOR     #$10            ;Exclusive OR with polynomial
  2148 00:EB98: 48                           PHA                     ;Save result on stack
  2149 00:EB99: A5 C8                        LDA     CRCLO           ;Get CRC low byte
  2150 00:EB9B: 49 21                        EOR     #$21            ;Exclusive OR with polynomial
  2151 00:EB9D: 85 C8                        STA     CRCLO           ;Save it back
  2152 00:EB9F: 68                           PLA                     ;Get previous result
  2153 00:EBA0: CA           CRCLP1          DEX                     ;Decrement index
  2154 00:EBA1: D0 EE                        BNE     CRCLOOP         ;Loop back for all 8 bits
  2155 00:EBA3: 85 C7                        STA     CRCHI           ;Update CRC high byte
  2156 00:EBA5: 28                           PLP                     ;Restore status reg
  2157 00:EBA6: C8                           INY                     ;Increment index to the next data byte
  2158 00:EBA7: 10 E0                        BPL     CALCCRC         ;Branch back until all 128 fed to CRC routine
  2159 00:EBA9: 60                           RTS                     ;Return to caller
  2160                        ;
  2161                        ;[CNTL-R] Reset System command: Resets system by calling Coldstart routine. Page zero is
  2162                        ; cleared, vectors and config data re-initialized from ROM. All I/O devices are reset from
  2163                        ; initial ROM parameters. Monitor cold start is entered.
  2164                        ;
  2165                        ; Using extended baud rates in the C02BIOS now requires an additional check for jumping to the
  2166                        ; COLDSTRT routine in BIOS. An odd number of accesses to the BRG register effectively toggles
  2167                        ; the BRG Test register, so checking for extended baud rates allows for an additional access
  2168                        ; to ensure the total number of accesses is "even", not "odd".
  2169                        ; Bits 4,5 of the MATCH flag byte are used for current status of the BRG Test register.
  2170                        ; The Reset/Zero RAM routines now checks for the current mode and will either toggle the
  2171                        ; BRG Test Register or not, to ensure it's inactive before calling the COLDSTRT routine.
  2172                        ;
  2173 00:EBAA: A9 1B        SYS_RST         LDA     #$1B            ;Get msg "Reset System"
  2174 00:EBAC: 87 C5                        SMB0    CMDFLAG         ;Set bit0 of command flag
  2175 00:EBAE: 80 02                        BRA     RST_ONLY        ;Branch below and handle reset
  2176                        ;
  2177                        ;[CNTL-Z] Zero command: zero RAM from $0100-$7FFF and Reset
  Fri May 14 2021 10:56                                                                                                    Page 41


  2178 00:EBB0: A9 1A        ZERO            LDA     #$1A            ;Get msg "Zero RAM/Reset System"
  2179 00:EBB2: 20 FC E0     RST_ONLY        JSR     PROMPT          ;Send to terminal
  2180 00:EBB5: 20 42 E2                     JSR     CONTINUE        ;Prompt for Continue
  2181 00:EBB8: 8F C5 12                     BBS0    CMDFLAG,CHK_EBR ;Branch if reset only
  2182 00:EBBB: 78                           SEI                     ;Disable IRQs
  2183 00:EBBC: A9 01                        LDA     #$01            ;Initialize address pointer to $0100
  2184 00:EBBE: 85 01                        STA     $01             ;Store to pointer high byte
  2185 00:EBC0: 64 00                        STZ     $00             ;Zero address low byte
  2186 00:EBC2: 3A                           DEC     A               ;LDA #$00
  2187 00:EBC3: 92 00        ZEROLOOP        STA     ($00)           ;Write $00 to current address
  2188 00:EBC5: E6 00                        INC     $00             ;Increment address pointer
  2189 00:EBC7: D0 FA                        BNE     ZEROLOOP        ;Loop back until done
  2190 00:EBC9: E6 01                        INC     $01             ;Increment page
  2191 00:EBCB: 10 F6                        BPL     ZEROLOOP        ;Loop back IF address pointer < $8000
  2192 00:EBCD: 4F FF 03     CHK_EBR         BBR4    MATCH,DO_COLD   ;Check if BRG toggled, branch if no EBR in use
  2193 00:EBD0: 2C 82 FE                     BIT     UART_BRGTST     ;Else, toggle BRG Test register to normal
  2194 00:EBD3: 4C 5D FF     DO_COLD         JMP     B_COLDSTRT      ;Jump to coldstart vector
  2195                        ;
  2196                        ;END OF MONITOR CODE
  2197                        ;**************************************************************************************************
  2198                        ;                               START OF MONITOR DATA                                             *
  2199                        ;**************************************************************************************************
  2200                        ;Monitor command & jump table
  2201                        ; There are two parts to the Monitor command and jump table; First is the list of commands, which
  2202                        ; are one byte each. Alpha command characters are upper case. Second is the 16-bit address table
  2203                        ; that corresponds to the command routines for each command character.
  2204 00:EBD6: 01           MONCMD  .DB     $01             ;[CNTRL-A] Start Assembler
  2205 00:EBD7: 02                   .DB     $02             ;[CNTRL-B] Boot DOS/65 ROM Version
  2206 00:EBD8: 04                   .DB     $04             ;[CNTRL-D] Start Disassembler
  2207 00:EBD9: 05                   .DB     $05             ;[CNTRL-E] Edit EEPROM byte location
  2208 00:EBDA: 0C                   .DB     $0C             ;[CNTRL-L] Xmodem/CRC Load
  2209 00:EBDB: 10                   .DB     $10             ;[CNTRL-P] Program EEPROM
  2210 00:EBDC: 11                   .DB     $11             ;[CNTRL-Q] Query Monitor Commands
  2211 00:EBDD: 12                   .DB     $12             ;[CNTRL-R] Reset - same as power up
  2212 00:EBDE: 13                   .DB     $13             ;[CNTRL-S] Xmodem/CRC Save
  2213 00:EBDF: 14                   .DB     $14             ;[CNTRL-T] Time/Date display
  2214 00:EBE0: 16                   .DB     $16             ;[CNTRL-V] Display Monitor Version
  2215 00:EBE1: 1A                   .DB     $1A             ;[CNTRL-Z] Zero Memory - calls reset
  2216 00:EBE2: 28                   .DB     $28             ;(         Init Macro
  2217 00:EBE3: 29                   .DB     $29             ;)         Run Macro
  2218 00:EBE4: 2C                   .DB     $2C             ;,         Setup Delay parameters
  2219 00:EBE5: 2E                   .DB     $2E             ;.         Execute Millisecond Delay
  2220 00:EBE6: 2F                   .DB     $2F             ;/         Execute Long Delay
  2221 00:EBE7: 5C                   .DB     $5C             ;\         Load and Go Extra Long Delay
  2222 00:EBE8: 41                   .DB     $41             ;A         Display/Edit A register
  2223 00:EBE9: 42                   .DB     $42             ;B         Benchmark Timer clear/start
  2224 00:EBEA: 43                   .DB     $43             ;C         Compare memory block
  2225 00:EBEB: 44                   .DB     $44             ;D         Display Memory contents in HEX/TEXT
  2226 00:EBEC: 45                   .DB     $45             ;E         Examine/Edit memory
  2227 00:EBED: 46                   .DB     $46             ;F         Fill memory block
  2228 00:EBEE: 47                   .DB     $47             ;G         Go execute to <addr>
  2229 00:EBEF: 48                   .DB     $48             ;H         Hex byte string search
  2230 00:EBF0: 49                   .DB     $49             ;I         Input Text string
  2231 00:EBF1: 4D                   .DB     $4D             ;M         Move memory block
  2232 00:EBF2: 50                   .DB     $50             ;P         Display/Edit CPU status reg
  2233 00:EBF3: 51                   .DB     $51             ;Q         Quit Benchmark timer
  2234 00:EBF4: 52                   .DB     $52             ;R         Display Registers
  2235 00:EBF5: 53                   .DB     $53             ;S         Display/Edit stack pointer
  2236 00:EBF6: 54                   .DB     $54             ;T         Text character string search
  2237 00:EBF7: 58                   .DB     $58             ;X         Display/Edit X register
  2238 00:EBF8: 59                   .DB     $59             ;Y         Display/Edit Y register
  2239                        ;
  2240 00:EBF9: 54 E6        MONTAB  .DW     ASSEMBLER       ;[CNTRL-A] $01 Start Assembler
  Fri May 14 2021 10:56                                                                                                    Page 42


  2241 00:EBFB: A5 E6                .DW     EHBASIC         ;[CNTRL-B] $02 Boot DOS/65 Rom Version
  2242 00:EBFD: A8 E6                .DW     DISASSEMBLER    ;[CNTRL-D] $04 Start Disassembler
  2243 00:EBFF: 50 E8                .DW     EEDIT           ;[CNTRL-E] $05 Edit EEPROM byte location
  2244 00:EC01: 04 E9                .DW     XMODEML         ;[CNTRL-L] $0C Xmodem Download. Uses Console Port
  2245 00:EC03: 15 E3                .DW     PROGEE          ;[CNTRL-P] $10 Program the EEPROM
  2246 00:EC05: 97 E8                .DW     QUERY           ;[CNTRL-Q] $11 Query Monitor Commands
  2247 00:EC07: AA EB                .DW     SYS_RST         ;[CNTRL-R] $12 Reset CO2Monitor
  2248 00:EC09: D4 EA                .DW     XMODEMS         ;[CNTRL-S] $13 Xmodem Upload. Uses Console Port
  2249 00:EC0B: 9B E8                .DW     TIME            ;[CNTRL-T] $14 System Date and Time
  2250 00:EC0D: F8 E8                .DW     VER             ;[CNTRL-V] $16 Display Monitor Version level
  2251 00:EC0F: B0 EB                .DW     ZERO            ;[CNTRL-Z] $1A Zero memory ($0100-$7FFF) then Reset
  2252 00:EC11: A5 E2                .DW     INIMACRO        ;(         $28 Clear input buffer/reset pointers
  2253 00:EC13: CE E2                .DW     RUNMACRO        ;)         $29 Run Macro from start of input buffer
  2254 00:EC15: 60 E2                .DW     SET_DELAY       ;.         $2C Setup Delay Parameters
  2255 00:EC17: 42 FF                .DW     B_EXE_MSDLY     ;,         $2E Perform Millisecond Delay
  2256 00:EC19: 45 FF                .DW     B_EXE_LGDLY     ;/         $2F Execute Long Delay
  2257 00:EC1B: 71 E2                .DW     SET_XLDLY       ;\         $5C Load and execute Extra Long Delay
  2258 00:EC1D: 0A E6                .DW     ARG             ;A         $41 Examine/Edit ACCUMULATOR preset/result
  2259 00:EC1F: 80 E2                .DW     BENCH           ;B         $42 Clear count and start Benchmark timer
  2260 00:EC21: 08 E3                .DW     CPMVFL          ;C         $43 Compare command - new
  2261 00:EC23: 0A E4                .DW     MDUMP           ;D         $44 HEX/TEXT dump from specified memory address
  2262 00:EC25: 8F E4                .DW     CHANGE          ;E         $45 Examine/change a memory location's contents
  2263 00:EC27: 08 E3                .DW     CPMVFL          ;F         $46 Fill specified memory range with a value
  2264 00:EC29: C0 E4                .DW     GO              ;G         $47 Execute program code at specified address
  2265 00:EC2B: 18 E5                .DW     SRCHBYT         ;H         $48 Search memory for a specified byte string
  2266 00:EC2D: A7 E5                .DW     TEXT            ;I         $49 Input text string into memory
  2267 00:EC2F: 08 E3                .DW     CPMVFL          ;M         $4D Copy memory from Source to Target space
  2268 00:EC31: FA E5                .DW     PRG             ;P         $50 Examine/Edit CPU STATUS REGISTER preset/result
  2269 00:EC33: 8B E2                .DW     QUITB           ;Q         $51 Quit Benchmark timer and display count
  2270 00:EC35: 21 E6                .DW     PRSTAT          ;R         $52 Display all preset/result contents
  2271 00:EC37: FE E5                .DW     SRG             ;S         $53 Examine/Edit STACK POINTER preset/result
  2272 00:EC39: EA E4                .DW     SRCHTXT         ;T         $54 Search memory for a specified text string
  2273 00:EC3B: 06 E6                .DW     XRG             ;X         $58 Examine/Edit X-REGISTER preset/result
  2274 00:EC3D: 02 E6                .DW     YRG             ;Y         $59 Examine/Edit Y-REGISTER preset/result
  2275                        ;
  2276                        ;**************************************************************************************************
  2277                        ;       C02Monitor message strings used with PROMPT routine, terminated with $00                  *
  2278                        ;**************************************************************************************************
  2279 00:EC3F: 20 63 6F 6E  MSG_00  .DB     " cont?"
       00:EC43: 74 3F 
  2280 00:EC45: 28 79 2F 6E  MSG_01  .DB     "(y/n)"
       00:EC49: 29 
  2281 00:EC4A: 00                   .DB     $00
  2282 00:EC4B: 0D 0A        MSG_02  .DB     $0D,$0A
  2283 00:EC4D: 20 20 20             .DB     "   "
  2284 00:EC50: 20 61 64 64  MSG_03  .DB     " addr:"
       00:EC54: 72 3A 
  2285 00:EC56: 00                   .DB     $00
  2286 00:EC57: 20 6C 65 6E  MSG_04  .DB     " len:"
       00:EC5B: 3A 
  2287 00:EC5C: 00                   .DB     $00
  2288 00:EC5D: 20 76 61 6C  MSG_05  .DB     " val:"
       00:EC61: 3A 
  2289 00:EC62: 00                   .DB     $00
  2290 00:EC63: 20 73 72 63  MSG_06  .DB     " src:"
       00:EC67: 3A 
  2291 00:EC68: 00                   .DB     $00
  2292 00:EC69: 20 74 67 74  MSG_07  .DB     " tgt:"
       00:EC6D: 3A 
  2293 00:EC6E: 00                   .DB     $00
  2294 00:EC6F: 20 66 69 6E  MSG_08  .DB     " find txt:"
       00:EC73: 64 20 74 78 
       00:EC77: 74 3A 
  Fri May 14 2021 10:56                                                                                                    Page 43


  2295 00:EC79: 00                   .DB     $00
  2296 00:EC7A: 20 66 69 6E  MSG_09  .DB     " find bin:"
       00:EC7E: 64 20 62 69 
       00:EC82: 6E 3A 
  2297 00:EC84: 00                   .DB     $00
  2298 00:EC85: 6E 6F 74 20  MSG_0A  .DB     "not "
  2299 00:EC89: 66 6F 75 6E  MSG_0B  .DB     "found"
       00:EC8D: 64 
  2300 00:EC8E: 00                   .DB     $00
  2301 00:EC8F: 0D 0A        MSG_0C  .DB     $0D,$0A
  2302 00:EC91: 73 65 61 72          .DB     "search- "
       00:EC95: 63 68 2D 20 
  2303 00:EC99: 00                   .DB     $00
  2304 00:EC9A: 0D 0A        MSG_0D  .DB     $0D,$0A
  2305 00:EC9C: 28 6E 29 65          .DB     "(n)ext? "
       00:ECA0: 78 74 3F 20 
  2306 00:ECA4: 00                   .DB     $00
  2307 00:ECA5: 53 52 3A 24  MSG_0E  .DB     "SR:$"
  2308 00:ECA9: 00                   .DB     $00
  2309 00:ECAA: 53 50 3A 24  MSG_0F  .DB     "SP:$"
  2310 00:ECAE: 00                   .DB     $00
  2311 00:ECAF: 59 52 3A 24  MSG_10  .DB     "YR:$"
  2312 00:ECB3: 00                   .DB     $00
  2313 00:ECB4: 58 52 3A 24  MSG_11  .DB     "XR:$"
  2314 00:ECB8: 00                   .DB     $00
  2315 00:ECB9: 41 43 3A 24  MSG_12  .DB     "AC:$"
  2316 00:ECBD: 00                   .DB     $00
  2317 00:ECBE: 0D 0A        MSG_13  .DB     $0D,$0A
  2318 00:ECC0: 20 20 20 50          .DB      "   PC  AC XR YR SP NV-BDIZC",$0D,$0A
       00:ECC4: 43 20 20 41 
       00:ECC8: 43 20 58 52 
       00:ECCC: 20 59 52 20 
       00:ECD0: 53 50 20 4E 
       00:ECD4: 56 2D 42 44 
       00:ECD8: 49 5A 43 0D 
       00:ECDC: 0A 
  2319 00:ECDD: 3B 20                .DB     "; "
  2320 00:ECDF: 00                   .DB     $00
  2321 00:ECE0: 0D 0A        MSG_14  .DB     $0D,$0A
  2322 00:ECE2: 43 30 32 4D          .DB     "C02Monitor (c)2013-2021 K.E.Maier",$07
       00:ECE6: 6F 6E 69 74 
       00:ECEA: 6F 72 20 28 
       00:ECEE: 63 29 32 30 
       00:ECF2: 31 33 2D 32 
       00:ECF6: 30 32 31 20 
       00:ECFA: 4B 2E 45 2E 
       00:ECFE: 4D 61 69 65 
       00:ED02: 72 07 
  2323 00:ED04: 0D 0A                .DB     $0D,$0A
  2324 00:ED06: 43 54 52 4C          .DB     "CTRL-Q for command list"
       00:ED0A: 2D 51 20 66 
       00:ED0E: 6F 72 20 63 
       00:ED12: 6F 6D 6D 61 
       00:ED16: 6E 64 20 6C 
       00:ED1A: 69 73 74 
  2325 00:ED1D: 0D 0A        MSG_15  .DB     $0D,$0A
  2326 00:ED1F: 56 65 72 73          .DB     "Version 3.04"
       00:ED23: 69 6F 6E 20 
       00:ED27: 33 2E 30 34 
  2327 00:ED2B: 0D 0A                .DB     $0D,$0A
  2328 00:ED2D: 31 34 2F 30          .DB     "14/05/2021"
       00:ED31: 35 2F 32 30 
       00:ED35: 32 31 
  Fri May 14 2021 10:56                                                                                                    Page 44


  2329 00:ED37: 0D 0A                .DB     $0D,$0A
  2330 00:ED39: 00                   .DB     $00
  2331 00:ED3A: 0D 0A        MSG_16  .DB     $0D,$0A
  2332 00:ED3C: 3B 2D                .DB     ";-"
  2333 00:ED3E: 00                   .DB     $00
  2334 00:ED3F: 20 64 65 6C  MSG_17  .DB     " delay ms:"
       00:ED43: 61 79 20 6D 
       00:ED47: 73 3A 
  2335 00:ED49: 00                   .DB     $00
  2336 00:ED4A: 20 6D 75 6C  MSG_18  .DB     " mult:"
       00:ED4E: 74 3A 
  2337 00:ED50: 00                   .DB     $00
  2338 00:ED51: 20 64 65 6C  MSG_19  .DB     " delay xl:"
       00:ED55: 61 79 20 78 
       00:ED59: 6C 3A 
  2339 00:ED5B: 00                   .DB     $00
  2340 00:ED5C: 5A 65 72 6F  MSG_1A  .DB     "Zero RAM/"
       00:ED60: 20 52 41 4D 
       00:ED64: 2F 
  2341 00:ED65: 52 65 73 65  MSG_1B  .DB     "Reset,"
       00:ED69: 74 2C 
  2342 00:ED6B: 00                   .DB     $00
  2343 00:ED6C: 50 72 6F 67  MSG_1C  .DB     "Program EEPROM",$0D,$0A
       00:ED70: 72 61 6D 20 
       00:ED74: 45 45 50 52 
       00:ED78: 4F 4D 0D 0A 
  2344 00:ED7C: 00                   .DB     $00
  2345 00:ED7D: 0D 0A        MSG_1D  .DB     $0D,$0A
  2346 00:ED7F: 41 72 65 20          .DB     "Are you sure? "
       00:ED83: 79 6F 75 20 
       00:ED87: 73 75 72 65 
       00:ED8B: 3F 20 
  2347 00:ED8D: 00                   .DB     $00
  2348 00:ED8E: 0D 0A        MSG_1E  .DB     $0D,$0A
  2349 00:ED90: 57 72 69 74          .DB     "Writing EEPROM..."
       00:ED94: 69 6E 67 20 
       00:ED98: 45 45 50 52 
       00:ED9C: 4F 4D 2E 2E 
       00:EDA0: 2E 
  2350 00:EDA1: 00                   .DB     $00
  2351 00:EDA2: 0D 0A        MSG_1F  .DB     $0D,$0A
  2352 00:EDA4: 45 45 50 52          .DB     "EEPROM write complete."
       00:EDA8: 4F 4D 20 77 
       00:EDAC: 72 69 74 65 
       00:EDB0: 20 63 6F 6D 
       00:EDB4: 70 6C 65 74 
       00:EDB8: 65 2E 
  2353 00:EDBA: 00                   .DB     $00
  2354 00:EDBB: 0D 0A        MSG_20  .DB     $0D,$0A
  2355 00:EDBD: 45 45 50 52          .DB     "EEPROM write failed!",$0D,$0A
       00:EDC1: 4F 4D 20 77 
       00:EDC5: 72 69 74 65 
       00:EDC9: 20 66 61 69 
       00:EDCD: 6C 65 64 21 
       00:EDD1: 0D 0A 
  2356 00:EDD3: 43 68 65 63          .DB     "Check R/W jumper."
       00:EDD7: 6B 20 52 2F 
       00:EDDB: 57 20 6A 75 
       00:EDDF: 6D 70 65 72 
       00:EDE3: 2E 
  2357 00:EDE4: 00                   .DB     $00
  2358 00:EDE5: 0D 0A        MSG_21  .DB     $0D,$0A
  2359 00:EDE7: 53 68 6F 77          .DB     "Show Loop count "
  Fri May 14 2021 10:56                                                                                                    Page 45


       00:EDEB: 20 4C 6F 6F 
       00:EDEF: 70 20 63 6F 
       00:EDF3: 75 6E 74 20 
  2360 00:EDF7: 00                   .DB     $00
  2361 00:EDF8: 0D 0A        MSG_22  .DB     $0D,$0A
  2362 00:EDFA: 4C 6F 6F 70          .DB     "Loops: "
       00:EDFE: 73 3A 20 
  2363 00:EE01: 00                   .DB     $00
  2364 00:EE02: 58 6D 6F 64  MSG_23  .DB     "Xmodem Download, <ESC> to abort, or"
       00:EE06: 65 6D 20 44 
       00:EE0A: 6F 77 6E 6C 
       00:EE0E: 6F 61 64 2C 
       00:EE12: 20 3C 45 53 
       00:EE16: 43 3E 20 74 
       00:EE1A: 6F 20 61 62 
       00:EE1E: 6F 72 74 2C 
       00:EE22: 20 6F 72 
  2365 00:EE25: 0D 0A                .DB     $0D,$0A
  2366 00:EE27: 4C 6F 61 64          .DB     "Load Address/S-Record offset:"
       00:EE2B: 20 41 64 64 
       00:EE2F: 72 65 73 73 
       00:EE33: 2F 53 2D 52 
       00:EE37: 65 63 6F 72 
       00:EE3B: 64 20 6F 66 
       00:EE3F: 66 73 65 74 
       00:EE43: 3A 
  2367 00:EE44: 00                   .DB     $00
  2368 00:EE45: 58 6D 6F 64  MSG_24  .DB     "Xmodem Upload, <ESC> to abort, or"
       00:EE49: 65 6D 20 55 
       00:EE4D: 70 6C 6F 61 
       00:EE51: 64 2C 20 3C 
       00:EE55: 45 53 43 3E 
       00:EE59: 20 74 6F 20 
       00:EE5D: 61 62 6F 72 
       00:EE61: 74 2C 20 6F 
       00:EE65: 72 
  2369 00:EE66: 0D 0A                .DB     $0D,$0A
  2370 00:EE68: 45 6E 74 65          .DB     "Enter Start address:"
       00:EE6C: 72 20 53 74 
       00:EE70: 61 72 74 20 
       00:EE74: 61 64 64 72 
       00:EE78: 65 73 73 3A 
  2371 00:EE7C: 00                   .DB     $00
  2372 00:EE7D: 0D 0A        MSG_25  .DB     $0D,$0A
  2373 00:EE7F: 53 65 74 75          .DB     "Setup Terminal program for Data transfer."
       00:EE83: 70 20 54 65 
       00:EE87: 72 6D 69 6E 
       00:EE8B: 61 6C 20 70 
       00:EE8F: 72 6F 67 72 
       00:EE93: 61 6D 20 66 
       00:EE97: 6F 72 20 44 
       00:EE9B: 61 74 61 20 
       00:EE9F: 74 72 61 6E 
       00:EEA3: 73 66 65 72 
       00:EEA7: 2E 
  2374 00:EEA8: 0D 0A                .DB     $0D,$0A
  2375 00:EEAA: 00                   .DB     $00
  2376 00:EEAB: 0D 0A        MSG_26  .DB     $0D,$0A
  2377 00:EEAD: 44 61 74 61          .DB     "Data transfer complete."
       00:EEB1: 20 74 72 61 
       00:EEB5: 6E 73 66 65 
       00:EEB9: 72 20 63 6F 
       00:EEBD: 6D 70 6C 65 
  Fri May 14 2021 10:56                                                                                                    Page 46


       00:EEC1: 74 65 2E 
  2378 00:EEC4: 00                   .DB     $00
  2379 00:EEC5: 0D 0A        MSG_27  .DB     $0D,$0A
  2380 00:EEC7: 44 61 74 61          .DB     "Data transfer error!"
       00:EECB: 20 74 72 61 
       00:EECF: 6E 73 66 65 
       00:EED3: 72 20 65 72 
       00:EED7: 72 6F 72 21 
  2381 00:EEDB: 00                   .DB     $00
  2382 00:EEDC: 0D 0A        MSG_28  .DB     $0D,$0A
  2383 00:EEDE: 53 2D 52 65          .DB     "S-Record load at:$"
       00:EEE2: 63 6F 72 64 
       00:EEE6: 20 6C 6F 61 
       00:EEEA: 64 20 61 74 
       00:EEEE: 3A 24 
  2384 00:EEF0: 00                   .DB     $00
  2385 00:EEF1: 0D 0A        MSG_29  .DB     $0D,$0A
  2386 00:EEF3: 44 69 73 61          .DB     "Disassembly from"
       00:EEF7: 73 73 65 6D 
       00:EEFB: 62 6C 79 20 
       00:EEFF: 66 72 6F 6D 
  2387 00:EF03: 00                   .DB     $00
  2388 00:EF04: 53 74 61 72  MSG_2A  .DB     "Start Benchmark counter? "
       00:EF08: 74 20 42 65 
       00:EF0C: 6E 63 68 6D 
       00:EF10: 61 72 6B 20 
       00:EF14: 63 6F 75 6E 
       00:EF18: 74 65 72 3F 
       00:EF1C: 20 
  2389 00:EF1D: 00                   .DB     $00
  2390 00:EF1E: 43 61 75 74  MSG_2B  .DB     "Caution! Editing EEPROM data."
       00:EF22: 69 6F 6E 21 
       00:EF26: 20 45 64 69 
       00:EF2A: 74 69 6E 67 
       00:EF2E: 20 45 45 50 
       00:EF32: 52 4F 4D 20 
       00:EF36: 64 61 74 61 
       00:EF3A: 2E 
  2391 00:EF3B: 00                   .DB     $00
  2392 00:EF3C: 0D 0A        MSG_2C  .DB     $0D,$0A
  2393 00:EF3E: 41 64 64 72          .DB     "Address not in "
       00:EF42: 65 73 73 20 
       00:EF46: 6E 6F 74 20 
       00:EF4A: 69 6E 20 
  2394 00:EF4D: 00                   .DB     $00
  2395 00:EF4E: 45 45 50 52  MSG_2D  .DB     "EEPROM!"
       00:EF52: 4F 4D 21 
  2396 00:EF55: 0D 0A                .DB     $0D,$0A
  2397 00:EF57: 00                   .DB     $00
  2398 00:EF58: 52 41 4D 21  MSG_2E  .DB     "RAM!"
  2399 00:EF5C: 0D 0A                .DB     $0D,$0A
  2400 00:EF5E: 00                   .DB     $00
  2401 00:EF5F: 0D 0A        MSG_2F  .DB     $0D,$0A
  2402 00:EF61: 41 73 73 65          .DB     "Assembly from"
       00:EF65: 6D 62 6C 79 
       00:EF69: 20 66 72 6F 
       00:EF6D: 6D 
  2403 00:EF6E: 00                   .DB     $00
  2404 00:EF6F: 0D 0A        MSG_30  .DB     $0D,$0A
  2405 00:EF71: 62 72 61 6E          .DB     "branch out of range",$0D, $0A
       00:EF75: 63 68 20 6F 
       00:EF79: 75 74 20 6F 
       00:EF7D: 66 20 72 61 
  Fri May 14 2021 10:56                                                                                                    Page 47


       00:EF81: 6E 67 65 0D 
       00:EF85: 0A 
  2406 00:EF86: 00                   .DB     $00
  2407                        ;
  2408 00:EF87: 44 61 74 65  MSG_31  .DB     "Date: "
       00:EF8B: 3A 20 
  2409 00:EF8D: 00                   .DB     $00
  2410 00:EF8E: 53 61 74     MSG_32  .DB     "Sat"
  2411 00:EF91: 00                   .DB     $00
  2412 00:EF92: 53 75 6E     MSG_33  .DB     "Sun"
  2413 00:EF95: 00                   .DB     $00
  2414 00:EF96: 4D 6F 6E     MSG_34  .DB     "Mon"
  2415 00:EF99: 00                   .DB     $00
  2416 00:EF9A: 54 75 65     MSG_35  .DB     "Tue"
  2417 00:EF9D: 00                   .DB     $00
  2418 00:EF9E: 57 65 64     MSG_36  .DB     "Wed"
  2419 00:EFA1: 00                   .DB     $00
  2420 00:EFA2: 54 68 75     MSG_37  .DB     "Thu"
  2421 00:EFA5: 00                   .DB     $00
  2422 00:EFA6: 46 72 69     MSG_38  .DB     "Fri"
  2423 00:EFA9: 00                   .DB     $00
  2424 00:EFAA: 4A 61 6E     MSG_39  .DB     "Jan"
  2425 00:EFAD: 00                   .DB     $00
  2426 00:EFAE: 46 65 62     MSG_3A  .DB     "Feb"
  2427 00:EFB1: 00                   .DB     $00
  2428 00:EFB2: 4D 61 72     MSG_3B  .DB     "Mar"
  2429 00:EFB5: 00                   .DB     $00
  2430 00:EFB6: 41 70 72     MSG_3C  .DB     "Apr"
  2431 00:EFB9: 00                   .DB     $00
  2432 00:EFBA: 4D 61 79     MSG_3D  .DB     "May"
  2433 00:EFBD: 00                   .DB     $00
  2434 00:EFBE: 4A 75 6E     MSG_3E  .DB     "Jun"
  2435 00:EFC1: 00                   .DB     $00
  2436 00:EFC2: 4A 75 6C     MSG_3F  .DB     "Jul"
  2437 00:EFC5: 00                   .DB     $00
  2438 00:EFC6: 41 75 67     MSG_40  .DB     "Aug"
  2439 00:EFC9: 00                   .DB     $00
  2440 00:EFCA: 53 65 70     MSG_41  .DB     "Sep"
  2441 00:EFCD: 00                   .DB     $00
  2442 00:EFCE: 4F 63 74     MSG_42  .DB     "Oct"
  2443 00:EFD1: 00                   .DB     $00
  2444 00:EFD2: 4E 6F 76     MSG_43  .DB     "Nov"
  2445 00:EFD5: 00                   .DB     $00
  2446 00:EFD6: 44 65 63     MSG_44  .DB     "Dec"
  2447 00:EFD9: 00                   .DB     $00
  2448 00:EFDA: 3A           MSG_45  .DB     ":"
  2449 00:EFDB: 00                   .DB     $00
  2450 00:EFDC: 2C 20        MSG_46  .DB     ", "
  2451 00:EFDE: 00                   .DB     $00
  2452 00:EFDF: 20 54 69 6D  MSG_47  .DB     " Time: "
       00:EFE3: 65 3A 20 
  2453 00:EFE6: 00                   .DB     $00
  2454 00:EFE7: 20           MSG_48  .DB     " "
  2455 00:EFE8: 00                   .DB     $00
  2456 00:EFE9: 20 53 65 63  MSG_49  .DB     " Seconds"
       00:EFED: 6F 6E 64 73 
  2457 00:EFF1: 00                   .DB     $00
  2458 00:EFF2: 0D 0A        MSG_4A  .DB     $0D,$0A
  2459 00:EFF4: 4D 65 6D 6F          .DB     "Memory Ops: "
       00:EFF8: 72 79 20 4F 
       00:EFFC: 70 73 3A 20 
  2460 00:F000: 5B 43 5D 6F          .DB     "[C]ompare, "
       00:F004: 6D 70 61 72 
  Fri May 14 2021 10:56                                                                                                    Page 48


       00:F008: 65 2C 20 
  2461 00:F00B: 5B 44 5D 69          .DB     "[D]isplay, "
       00:F00F: 73 70 6C 61 
       00:F013: 79 2C 20 
  2462 00:F016: 5B 45 5D 64          .DB     "[E]dit, "
       00:F01A: 69 74 2C 20 
  2463 00:F01E: 5B 46 5D 69          .DB     "[F]ill, "
       00:F022: 6C 6C 2C 20 
  2464 00:F026: 5B 47 5D 6F          .DB     "[G]o Exec,",$0D,$0A
       00:F02A: 20 45 78 65 
       00:F02E: 63 2C 0D 0A 
  2465 00:F032: 5B 48 5D 65          .DB     "[H]ex Find, "
       00:F036: 78 20 46 69 
       00:F03A: 6E 64 2C 20 
  2466 00:F03E: 5B 49 5D 6E          .DB     "[I]nput Text, "
       00:F042: 70 75 74 20 
       00:F046: 54 65 78 74 
       00:F04A: 2C 20 
  2467 00:F04C: 5B 4D 5D 6F          .DB     "[M]ove, "
       00:F050: 76 65 2C 20 
  2468 00:F054: 5B 54 5D 65          .DB     "[T]ext Find",$0D,$0A,$0A
       00:F058: 78 74 20 46 
       00:F05C: 69 6E 64 0D 
       00:F060: 0A 0A 
  2469 00:F062: 52 65 67 69          .DB     "Register Ops: "
       00:F066: 73 74 65 72 
       00:F06A: 20 4F 70 73 
       00:F06E: 3A 20 
  2470 00:F070: 52 2C 41 2C          .DB     "R,A,X,Y,S,P",$0D,$0A,$0A
       00:F074: 58 2C 59 2C 
       00:F078: 53 2C 50 0D 
       00:F07C: 0A 0A 
  2471 00:F07E: 43 6F 75 6E          .DB     "Counter/Timer Ops: "
       00:F082: 74 65 72 2F 
       00:F086: 54 69 6D 65 
       00:F08A: 72 20 4F 70 
       00:F08E: 73 3A 20 
  2472 00:F091: 2C 3D 20 73          .DB     ",= set ms|mult, "
       00:F095: 65 74 20 6D 
       00:F099: 73 7C 6D 75 
       00:F09D: 6C 74 2C 20 
  2473 00:F0A1: 2E 3D 20 65          .DB     ".= exe ms, "
       00:F0A5: 78 65 20 6D 
       00:F0A9: 73 2C 20 
  2474 00:F0AC: 2F 3D 20 65          .DB     "/= exe ms*mult, "
       00:F0B0: 78 65 20 6D 
       00:F0B4: 73 2A 6D 75 
       00:F0B8: 6C 74 2C 20 
  2475 00:F0BC: 5C 3D 20 65          .DB     "\= exe (?)*ms*mult",$0D,$0A
       00:F0C0: 78 65 20 28 
       00:F0C4: 3F 29 2A 6D 
       00:F0C8: 73 2A 6D 75 
       00:F0CC: 6C 74 0D 0A 
  2476 00:F0D0: 5B 42 5D 65          .DB     "[B]enchmark clear/start, "
       00:F0D4: 6E 63 68 6D 
       00:F0D8: 61 72 6B 20 
       00:F0DC: 63 6C 65 61 
       00:F0E0: 72 2F 73 74 
       00:F0E4: 61 72 74 2C 
       00:F0E8: 20 
  2477 00:F0E9: 5B 51 5D 75          .DB     "[Q]uit benchmark/display elapsed time",$0D,$0A,$0A
       00:F0ED: 69 74 20 62 
       00:F0F1: 65 6E 63 68 
  Fri May 14 2021 10:56                                                                                                    Page 49


       00:F0F5: 6D 61 72 6B 
       00:F0F9: 2F 64 69 73 
       00:F0FD: 70 6C 61 79 
       00:F101: 20 65 6C 61 
       00:F105: 70 73 65 64 
       00:F109: 20 74 69 6D 
       00:F10D: 65 0D 0A 0A 
  2478 00:F111: 4D 61 63 72          .DB     "Macro: "
       00:F115: 6F 3A 20 
  2479 00:F118: 28 3D 20 49          .DB     "(= Init "
       00:F11C: 6E 69 74 20 
  2480 00:F120: 29 3D 20 52          .DB     ")= Run",$0D,$0A,$0A
       00:F124: 75 6E 0D 0A 
       00:F128: 0A 
  2481 00:F129: 43 54 52 4C          .DB     "CTRL[?]: "
       00:F12D: 5B 3F 5D 3A 
       00:F131: 20 
  2482 00:F132: 5B 41 5D 73          .DB     "[A]ssemble, "
       00:F136: 73 65 6D 62 
       00:F13A: 6C 65 2C 20 
  2483 00:F13E: 5B 42 5D 6F          .DB     "[B]oot DOS/65, "
       00:F142: 6F 74 20 44 
       00:F146: 4F 53 2F 36 
       00:F14A: 35 2C 20 
  2484 00:F14D: 5B 44 5D 69          .DB     "[D]isassemble, "
       00:F151: 73 61 73 73 
       00:F155: 65 6D 62 6C 
       00:F159: 65 2C 20 
  2485 00:F15C: 5B 45 5D 64          .DB     "[E]dit EEPROM, "
       00:F160: 69 74 20 45 
       00:F164: 45 50 52 4F 
       00:F168: 4D 2C 20 
  2486 00:F16B: 5B 4C 5D 6F          .DB     "[L]oad",$0D,$0A
       00:F16F: 61 64 0D 0A 
  2487 00:F173: 5B 50 5D 72          .DB     "[P]rogram, "
       00:F177: 6F 67 72 61 
       00:F17B: 6D 2C 20 
  2488 00:F17E: 5B 51 5D 75          .DB     "[Q]uery Cmds ,"
       00:F182: 65 72 79 20 
       00:F186: 43 6D 64 73 
       00:F18A: 20 2C 
  2489 00:F18C: 5B 52 5D 65          .DB     "[R]eset, "
       00:F190: 73 65 74 2C 
       00:F194: 20 
  2490 00:F195: 5B 53 5D 61          .DB     "[S]ave, "
       00:F199: 76 65 2C 20 
  2491 00:F19D: 5B 54 5D 69          .DB     "[T]ime/Date, "
       00:F1A1: 6D 65 2F 44 
       00:F1A5: 61 74 65 2C 
       00:F1A9: 20 
  2492 00:F1AA: 5B 56 5D 65          .DB     "[V]ersion",$0D,$0A
       00:F1AE: 72 73 69 6F 
       00:F1B2: 6E 0D 0A 
  2493 00:F1B5: 5B 5A 5D 65          .DB     "[Z]ero RAM/Reset",$0A
       00:F1B9: 72 6F 20 52 
       00:F1BD: 41 4D 2F 52 
       00:F1C1: 65 73 65 74 
       00:F1C5: 0A 
  2494 00:F1C6: 00                   .DB     $00
  2495                        ;
  2496                        MSG_TABLE       ;Message table: contains message addresses sent via the PROMPT routine
  2497 00:F1C7: 3F EC 45 EC          .DW     MSG_00, MSG_01, MSG_02, MSG_03, MSG_04, MSG_05, MSG_06, MSG_07
       00:F1CB: 4B EC 50 EC 
  Fri May 14 2021 10:56                                                                                                    Page 50


       00:F1CF: 57 EC 5D EC 
       00:F1D3: 63 EC 69 EC 
  2498 00:F1D7: 6F EC 7A EC          .DW     MSG_08, MSG_09, MSG_0A, MSG_0B, MSG_0C, MSG_0D, MSG_0E, MSG_0F
       00:F1DB: 85 EC 89 EC 
       00:F1DF: 8F EC 9A EC 
       00:F1E3: A5 EC AA EC 
  2499 00:F1E7: AF EC B4 EC          .DW     MSG_10, MSG_11, MSG_12, MSG_13, MSG_14, MSG_15, MSG_16, MSG_17
       00:F1EB: B9 EC BE EC 
       00:F1EF: E0 EC 1D ED 
       00:F1F3: 3A ED 3F ED 
  2500 00:F1F7: 4A ED 51 ED          .DW     MSG_18, MSG_19, MSG_1A, MSG_1B, MSG_1C, MSG_1D, MSG_1E, MSG_1F
       00:F1FB: 5C ED 65 ED 
       00:F1FF: 6C ED 7D ED 
       00:F203: 8E ED A2 ED 
  2501 00:F207: BB ED E5 ED          .DW     MSG_20, MSG_21, MSG_22, MSG_23, MSG_24, MSG_25, MSG_26, MSG_27
       00:F20B: F8 ED 02 EE 
       00:F20F: 45 EE 7D EE 
       00:F213: AB EE C5 EE 
  2502 00:F217: DC EE F1 EE          .DW     MSG_28, MSG_29, MSG_2A, MSG_2B, MSG_2C, MSG_2D, MSG_2E, MSG_2F
       00:F21B: 04 EF 1E EF 
       00:F21F: 3C EF 4E EF 
       00:F223: 58 EF 5F EF 
  2503 00:F227: 6F EF 87 EF          .DW     MSG_30, MSG_31, MSG_32, MSG_33, MSG_34, MSG_35, MSG_36, MSG_37
       00:F22B: 8E EF 92 EF 
       00:F22F: 96 EF 9A EF 
       00:F233: 9E EF A2 EF 
  2504 00:F237: A6 EF AA EF          .DW     MSG_38, MSG_39, MSG_3A, MSG_3B, MSG_3C, MSG_3D, MSG_3E, MSG_3F
       00:F23B: AE EF B2 EF 
       00:F23F: B6 EF BA EF 
       00:F243: BE EF C2 EF 
  2505 00:F247: C6 EF CA EF          .DW     MSG_40, MSG_41, MSG_42, MSG_43, MSG_44, MSG_45, MSG_46, MSG_47
       00:F24B: CE EF D2 EF 
       00:F24F: D6 EF DA EF 
       00:F253: DC EF DF EF 
  2506 00:F257: E7 EF E9 EF          .DW     MSG_48, MSG_49, MSG_4A
       00:F25B: F2 EF 
  2507                        ;
  2508                        ;**************************************************************************************************
  2509                        ;                               START OF DISASSEMBLER DATA                                        *
  2510                        ;**************************************************************************************************
  2511                        ; Pointer for address mode handlers. Each byte contains handler pointer for two opcodes;
  2512                        ; Upper nibble for odd, lower nibble for even
  2513                        HDLR_IDX
  2514 00:F25D: 26 00 33 3E          .DB     $26,$00,$33,$3E,$02,$10,$88,$8F
       00:F261: 02 10 88 8F 
  2515 00:F265: C7 B0 34 4E          .DB     $C7,$B0,$34,$4E,$0A,$10,$89,$9F
       00:F269: 0A 10 89 9F 
  2516 00:F26D: 86 00 33 3E          .DB     $86,$00,$33,$3E,$02,$10,$88,$8F
       00:F271: 02 10 88 8F 
  2517 00:F275: C7 B0 44 4E          .DB     $C7,$B0,$44,$4E,$0A,$10,$99,$9F
       00:F279: 0A 10 99 9F 
  2518 00:F27D: 06 00 03 3E          .DB     $06,$00,$03,$3E,$02,$10,$88,$8F
       00:F281: 02 10 88 8F 
  2519 00:F285: C7 B0 04 4E          .DB     $C7,$B0,$04,$4E,$0A,$00,$09,$9F
       00:F289: 0A 00 09 9F 
  2520 00:F28D: 06 00 33 3E          .DB     $06,$00,$33,$3E,$02,$10,$B8,$8F
       00:F291: 02 10 B8 8F 
  2521 00:F295: C7 B0 44 4E          .DB     $C7,$B0,$44,$4E,$0A,$00,$D9,$9F
       00:F299: 0A 00 D9 9F 
  2522 00:F29D: C6 00 33 3E          .DB     $C6,$00,$33,$3E,$02,$00,$88,$8F
       00:F2A1: 02 00 88 8F 
  2523 00:F2A5: C7 B0 44 5E          .DB     $C7,$B0,$44,$5E,$0A,$00,$89,$9F
       00:F2A9: 0A 00 89 9F 
  Fri May 14 2021 10:56                                                                                                    Page 51


  2524 00:F2AD: 26 20 33 3E          .DB     $26,$20,$33,$3E,$02,$00,$88,$8F
       00:F2B1: 02 00 88 8F 
  2525 00:F2B5: C7 B0 44 5E          .DB     $C7,$B0,$44,$5E,$0A,$00,$99,$AF
       00:F2B9: 0A 00 99 AF 
  2526 00:F2BD: 26 00 33 3E          .DB     $26,$00,$33,$3E,$02,$00,$88,$8F
       00:F2C1: 02 00 88 8F 
  2527 00:F2C5: C7 B0 04 4E          .DB     $C7,$B0,$04,$4E,$0A,$00,$09,$9F
       00:F2C9: 0A 00 09 9F 
  2528 00:F2CD: 26 00 33 3E          .DB     $26,$00,$33,$3E,$02,$00,$88,$8F
       00:F2D1: 02 00 88 8F 
  2529 00:F2D5: C7 B0 04 4E          .DB     $C7,$B0,$04,$4E,$0A,$00,$09,$9F
       00:F2D9: 0A 00 09 9F 
  2530                        ;
  2531                        ;Disassembler handler table: Handler address index: (referenced in table HDLR_IDX)
  2532                        HDLR_TAB
  2533 00:F2DD: 16 E7                .DW     IMPLIED         ;$00
  2534 00:F2DF: 5D E7                .DW     ACC_MODE        ;$01
  2535 00:F2E1: 53 E7                .DW     ZP_IMED         ;$02
  2536 00:F2E3: 75 E7                .DW     ZP_ABS          ;$03
  2537 00:F2E5: 9D E7                .DW     ZP_ABS_X        ;$04
  2538 00:F2E7: A9 E7                .DW     ZP_ABS_Y        ;$05
  2539 00:F2E9: C2 E7                .DW     ZP_IND_X        ;$06
  2540 00:F2EB: CA E7                .DW     ZP_IND_Y        ;$07
  2541 00:F2ED: 65 E7                .DW     ABSOLUTE        ;$08
  2542 00:F2EF: B7 E7                .DW     ABS_X           ;$09
  2543 00:F2F1: B5 E7                .DW     ABS_Y           ;$0A
  2544 00:F2F3: 7D E7                .DW     INDIRECT        ;$0B
  2545 00:F2F5: 09 E8                .DW     REL_BRA         ;$0C
  2546 00:F2F7: D2 E7                .DW     IND_ABS_X       ;$0D
  2547 00:F2F9: E0 E7                .DW     ZP_XMB          ;$0E
  2548 00:F2FB: F4 E7                .DW     ZP_BBX          ;$0F
  2549                        ;
  2550                        ;Disassembler mnemonic pointer table. This is indexed by the instruction opcode.
  2551                        ; The values in this table are an index to the mnemonic data used to print:
  2552                        MNE_PTAB        ;Mnemonic pointer index table
  2553 00:F2FD: 1C 4C 00 00          .DB     $1C,$4C,$00,$00,$82,$4C,$06,$5E,$50,$4C,$06,$00,$82,$4C,$06,$08
       00:F301: 82 4C 06 5E 
       00:F305: 50 4C 06 00 
       00:F309: 82 4C 06 08 
  2554 00:F30D: 18 4C 4C 00          .DB     $18,$4C,$4C,$00,$80,$4C,$06,$5E,$22,$4C,$38,$00,$80,$4C,$06,$08
       00:F311: 80 4C 06 5E 
       00:F315: 22 4C 38 00 
       00:F319: 80 4C 06 08 
  2555 00:F31D: 40 04 00 00          .DB     $40,$04,$00,$00,$12,$04,$60,$5E,$58,$04,$60,$00,$12,$04,$60,$08
       00:F321: 12 04 60 5E 
       00:F325: 58 04 60 00 
       00:F329: 12 04 60 08 
  2556 00:F32D: 14 04 04 00          .DB     $14,$04,$04,$00,$12,$04,$60,$5E,$6A,$04,$30,$00,$12,$04,$60,$08
       00:F331: 12 04 60 5E 
       00:F335: 6A 04 30 00 
       00:F339: 12 04 60 08 
  2557 00:F33D: 64 36 00 00          .DB     $64,$36,$00,$00,$00,$36,$48,$5E,$4E,$36,$48,$00,$3E,$36,$48,$08
       00:F341: 00 36 48 5E 
       00:F345: 4E 36 48 00 
       00:F349: 3E 36 48 08 
  2558 00:F34D: 1E 36 36 00          .DB     $1E,$36,$36,$00,$00,$36,$48,$5E,$26,$36,$54,$00,$00,$36,$48,$08
       00:F351: 00 36 48 5E 
       00:F355: 26 36 54 00 
       00:F359: 00 36 48 08 
  2559 00:F35D: 66 02 00 00          .DB     $66,$02,$00,$00,$7A,$02,$62,$5E,$56,$02,$62,$00,$3E,$02,$62,$08
       00:F361: 7A 02 62 5E 
       00:F365: 56 02 62 00 
       00:F369: 3E 02 62 08 
  Fri May 14 2021 10:56                                                                                                    Page 52


  2560 00:F36D: 20 02 02 00          .DB     $20,$02,$02,$00,$7A,$02,$62,$5E,$6E,$02,$5C,$00,$3E,$02,$62,$08
       00:F371: 7A 02 62 5E 
       00:F375: 6E 02 5C 00 
       00:F379: 3E 02 62 08 
  2561 00:F37D: 1A 72 00 00          .DB     $1A,$72,$00,$00,$78,$72,$76,$70,$34,$12,$86,$00,$78,$72,$76,$0A
       00:F381: 78 72 76 70 
       00:F385: 34 12 86 00 
       00:F389: 78 72 76 0A 
  2562 00:F38D: 0C 72 72 00          .DB     $0C,$72,$72,$00,$78,$72,$76,$70,$8A,$72,$88,$00,$7A,$72,$7A,$0A
       00:F391: 78 72 76 70 
       00:F395: 8A 72 88 00 
       00:F399: 7A 72 7A 0A 
  2563 00:F39D: 46 42 44 00          .DB     $46,$42,$44,$00,$46,$42,$44,$70,$7E,$42,$7C,$00,$46,$42,$44,$0A
       00:F3A1: 46 42 44 70 
       00:F3A5: 7E 42 7C 00 
       00:F3A9: 46 42 44 0A 
  2564 00:F3AD: 0E 42 42 00          .DB     $0E,$42,$42,$00,$46,$42,$44,$70,$28,$42,$84,$00,$46,$42,$44,$0A
       00:F3B1: 46 42 44 70 
       00:F3B5: 28 42 84 00 
       00:F3B9: 46 42 44 0A 
  2565 00:F3BD: 2E 2A 00 00          .DB     $2E,$2A,$00,$00,$2E,$2A,$30,$70,$3C,$2A,$32,$8C,$2E,$2A,$30,$0A
       00:F3C1: 2E 2A 30 70 
       00:F3C5: 3C 2A 32 8C 
       00:F3C9: 2E 2A 30 0A 
  2566 00:F3CD: 16 2A 2A 00          .DB     $16,$2A,$2A,$00,$00,$2A,$30,$70,$24,$2A,$52,$74,$00,$2A,$30,$0A
       00:F3D1: 00 2A 30 70 
       00:F3D5: 24 2A 52 74 
       00:F3D9: 00 2A 30 0A 
  2567 00:F3DD: 2C 68 00 00          .DB     $2C,$68,$00,$00,$2C,$68,$38,$70,$3A,$68,$4A,$00,$2C,$68,$38,$0A
       00:F3E1: 2C 68 38 70 
       00:F3E5: 3A 68 4A 00 
       00:F3E9: 2C 68 38 0A 
  2568 00:F3ED: 10 68 68 00          .DB     $10,$68,$68,$00,$00,$68,$38,$70,$6C,$68,$5A,$00,$00,$68,$38,$0A
       00:F3F1: 00 68 38 70 
       00:F3F5: 6C 68 5A 00 
       00:F3F9: 00 68 38 0A 
  2569                        ;
  2570                        DIS_NMEM        ;Mnemonic compressed table
  2571                        ; Uses two bytes per 3-character Mnemonic. 5-bits per character uses 15-bit total
  2572                        ; Characters are left to right. 5-bits shifted into A reg, add in $3F and print
  2573                        ; "?" starts with "00000", "A" starts with "00010", "B" starts with "00011", etc.
  2574                        ;
  2575                        ; A-00010 B-00011 C-00100 D-00101 E-00110 F-00111 G-01000 H-01001 I-01010
  2576                        ; J-01011 K-01100 L-01101 M-01110 N-01111 O-10000 P-10001 Q-10010 R-10011
  2577                        ; S-10100 T-10101 U-10110 V-10111 W-11000 X-11001 Y-11010 Z-11011
  2578 00:F3FD: 00 00                .DBYTE  %0000000000000000       ;???    $00
  2579 00:F3FF: 11 48                .DBYTE  %0001000101001000       ;ADC    $02
  2580 00:F401: 13 CA                .DBYTE  %0001001111001010       ;AND    $04
  2581 00:F403: 15 1A                .DBYTE  %0001010100011010       ;ASL    $06
  2582 00:F405: 18 E6                .DBYTE  %0001100011100110       ;BBR    $08
  2583 00:F407: 18 E8                .DBYTE  %0001100011101000       ;BBS    $0A
  2584 00:F409: 19 08                .DBYTE  %0001100100001000       ;BCC    $0C
  2585 00:F40B: 19 28                .DBYTE  %0001100100101000       ;BCS    $0E
  2586 00:F40D: 19 A4                .DBYTE  %0001100110100100       ;BEQ    $10
  2587 00:F40F: 1A AA                .DBYTE  %0001101010101010       ;BIT    $12
  2588 00:F411: 1B 94                .DBYTE  %0001101110010100       ;BMI    $14
  2589 00:F413: 1B CC                .DBYTE  %0001101111001100       ;BNE    $16
  2590 00:F415: 1C 5A                .DBYTE  %0001110001011010       ;BPL    $18
  2591 00:F417: 1C C4                .DBYTE  %0001110011000100       ;BRA    $1A
  2592 00:F419: 1C D8                .DBYTE  %0001110011011000       ;BRK    $1C
  2593 00:F41B: 1D C8                .DBYTE  %0001110111001000       ;BVC    $1E
  2594 00:F41D: 1D E8                .DBYTE  %0001110111101000       ;BVS    $20
  2595 00:F41F: 23 48                .DBYTE  %0010001101001000       ;CLC    $22
  Fri May 14 2021 10:56                                                                                                    Page 53


  2596 00:F421: 23 4A                .DBYTE  %0010001101001010       ;CLD    $24
  2597 00:F423: 23 54                .DBYTE  %0010001101010100       ;CLI    $26
  2598 00:F425: 23 6E                .DBYTE  %0010001101101110       ;CLV    $28
  2599 00:F427: 23 A2                .DBYTE  %0010001110100010       ;CMP    $2A
  2600 00:F429: 24 72                .DBYTE  %0010010001110010       ;CPX    $2C
  2601 00:F42B: 24 74                .DBYTE  %0010010001110100       ;CPY    $2E
  2602 00:F42D: 29 88                .DBYTE  %0010100110001000       ;DEC    $30
  2603 00:F42F: 29 B2                .DBYTE  %0010100110110010       ;DEX    $32
  2604 00:F431: 29 B4                .DBYTE  %0010100110110100       ;DEY    $34
  2605 00:F433: 34 26                .DBYTE  %0011010000100110       ;EOR    $36
  2606 00:F435: 53 C8                .DBYTE  %0101001111001000       ;INC    $38
  2607 00:F437: 53 F2                .DBYTE  %0101001111110010       ;INX    $3A
  2608 00:F439: 53 F4                .DBYTE  %0101001111110100       ;INY    $3C
  2609 00:F43B: 5B A2                .DBYTE  %0101101110100010       ;JMP    $3E
  2610 00:F43D: 5D 26                .DBYTE  %0101110100100110       ;JSR    $40
  2611 00:F43F: 69 44                .DBYTE  %0110100101000100       ;LDA    $42
  2612 00:F441: 69 72                .DBYTE  %0110100101110010       ;LDX    $44
  2613 00:F443: 69 74                .DBYTE  %0110100101110100       ;LDY    $46
  2614 00:F445: 6D 26                .DBYTE  %0110110100100110       ;LSR    $48
  2615 00:F447: 7C 22                .DBYTE  %0111110000100010       ;NOP    $4A
  2616 00:F449: 84 C4                .DBYTE  %1000010011000100       ;ORA    $4C
  2617 00:F44B: 8A 44                .DBYTE  %1000101001000100       ;PHA    $4E
  2618 00:F44D: 8A 62                .DBYTE  %1000101001100010       ;PHP    $50
  2619 00:F44F: 8A 72                .DBYTE  %1000101001110010       ;PHX    $52
  2620 00:F451: 8A 74                .DBYTE  %1000101001110100       ;PHY    $54
  2621 00:F453: 8B 44                .DBYTE  %1000101101000100       ;PLA    $56
  2622 00:F455: 8B 62                .DBYTE  %1000101101100010       ;PLP    $58
  2623 00:F457: 8B 72                .DBYTE  %1000101101110010       ;PLX    $5A
  2624 00:F459: 8B 74                .DBYTE  %1000101101110100       ;PLY    $5C
  2625 00:F45B: 9B 86                .DBYTE  %1001101110000110       ;RMB    $5E
  2626 00:F45D: 9C 1A                .DBYTE  %1001110000011010       ;ROL    $60
  2627 00:F45F: 9C 26                .DBYTE  %1001110000100110       ;ROR    $62
  2628 00:F461: 9D 54                .DBYTE  %1001110101010100       ;RTI    $64
  2629 00:F463: 9D 68                .DBYTE  %1001110101101000       ;RTS    $66
  2630 00:F465: A0 C8                .DBYTE  %1010000011001000       ;SBC    $68
  2631 00:F467: A1 88                .DBYTE  %1010000110001000       ;SEC    $6A
  2632 00:F469: A1 8A                .DBYTE  %1010000110001010       ;SED    $6C
  2633 00:F46B: A1 94                .DBYTE  %1010000110010100       ;SEI    $6E
  2634 00:F46D: A3 86                .DBYTE  %1010001110000110       ;SMB    $70
  2635 00:F46F: A5 44                .DBYTE  %1010010101000100       ;STA    $72
  2636 00:F471: A5 62                .DBYTE  %1010010101100010       ;STP    $74
  2637 00:F473: A5 72                .DBYTE  %1010010101110010       ;STX    $76
  2638 00:F475: A5 74                .DBYTE  %1010010101110100       ;STY    $78
  2639 00:F477: A5 76                .DBYTE  %1010010101110110       ;STZ    $7A
  2640 00:F479: A8 B2                .DBYTE  %1010100010110010       ;TAX    $7C
  2641 00:F47B: A8 B4                .DBYTE  %1010100010110100       ;TAY    $7E
  2642 00:F47D: AC E8                .DBYTE  %1010110011101000       ;TRB    $80
  2643 00:F47F: AD 06                .DBYTE  %1010110100000110       ;TSB    $82
  2644 00:F481: AD 32                .DBYTE  %1010110100110010       ;TSX    $84
  2645 00:F483: AE 44                .DBYTE  %1010111001000100       ;TXA    $86
  2646 00:F485: AE 68                .DBYTE  %1010111001101000       ;TXS    $88
  2647 00:F487: AE 84                .DBYTE  %1010111010000100       ;TYA    $8A
  2648 00:F489: C0 94                .DBYTE  %1100000010010100       ;WAI    $8C
  2649                        ;
  2650                        ;**************************************************************************************************
  2651                        ;                               END OF DISASSEMBLER DATA                                          *
  2652                        ;**************************************************************************************************
  2653                        ;                               END OF MONITOR DATA                                               *
  2654                        ;**************************************************************************************************
  2655                                .END


      Lines assembled: 2992
  Fri May 14 2021 10:56                                                                                                    Page 54


      Errors: 0
